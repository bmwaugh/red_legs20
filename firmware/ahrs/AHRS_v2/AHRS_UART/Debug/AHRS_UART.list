
AHRS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000798c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba0  08007ba0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba8  08007ba8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a6c  200001e4  08007d94  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c50  08007d94  00021c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c13  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003036  00000000  00000000  00034e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00038c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ad2  00000000  00000000  00039868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e39f  00000000  00000000  0005f33a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4da1  00000000  00000000  0006d6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014247a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  001424f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e4 	.word	0x200001e4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007b20 	.word	0x08007b20

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001e8 	.word	0x200001e8
 80001e8:	08007b20 	.word	0x08007b20

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb06 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f81a 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8d4 	bl	80006b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f8aa 	bl	8000664 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f87e 	bl	8000610 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000514:	f006 fd2e 	bl	8006f74 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_13);
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x3c>)
 800051e:	f001 f956 	bl	80017ce <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_14);
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x3c>)
 8000528:	f001 f951 	bl	80017ce <HAL_GPIO_TogglePin>
	 HAL_Delay(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000530:	f000 fb4c 	bl	8000bcc <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_13);
 8000534:	e7f0      	b.n	8000518 <main+0x1c>
 8000536:	bf00      	nop
 8000538:	40020000 	.word	0x40020000

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fa26 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b4:	2348      	movs	r3, #72	; 0x48
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005bc:	2303      	movs	r3, #3
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 faa1 	bl	8002b0c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 f8fe 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2102      	movs	r1, #2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fcfb 	bl	8002fec <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f8e8 	bl	80007d0 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_USART2_UART_Init+0x4c>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART2_UART_Init+0x4c>)
 8000648:	f002 fec2 	bl	80033d0 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000652:	f000 f8bd 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000330 	.word	0x20000330
 8000660:	40004400 	.word	0x40004400

08000664 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_DMA_Init+0x4c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <MX_DMA_Init+0x4c>)
 8000674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_DMA_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2010      	movs	r0, #16
 800068c:	f000 fb9b 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000690:	2010      	movs	r0, #16
 8000692:	f000 fbb4 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2011      	movs	r0, #17
 800069c:	f000 fb93 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006a0:	2011      	movs	r0, #17
 80006a2:	f000 fbac 	bl	8000dfe <HAL_NVIC_EnableIRQ>

}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b32      	ldr	r3, [pc, #200]	; (8000798 <MX_GPIO_Init+0xe4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a31      	ldr	r2, [pc, #196]	; (8000798 <MX_GPIO_Init+0xe4>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_GPIO_Init+0xe4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_GPIO_Init+0xe4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <MX_GPIO_Init+0xe4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_GPIO_Init+0xe4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_GPIO_Init+0xe4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a23      	ldr	r2, [pc, #140]	; (8000798 <MX_GPIO_Init+0xe4>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_GPIO_Init+0xe4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_GPIO_Init+0xe4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_GPIO_Init+0xe4>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_GPIO_Init+0xe4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <MX_GPIO_Init+0xe8>)
 8000742:	f001 f82b 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <MX_GPIO_Init+0xec>)
 800074e:	f001 f825 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000752:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_GPIO_Init+0xe8>)
 800076c:	f000 fe6c 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000770:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_GPIO_Init+0xec>)
 800078a:	f000 fe5d 	bl	8001448 <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40021800 	.word	0x40021800

080007a4 <HAL_UART_RxCpltCallback>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_UART_Transmit(&huart2, (uint8_t *)rxData, strlen(rxData), 10);
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <HAL_UART_RxCpltCallback+0x24>)
 80007ae:	f7ff fd1d 	bl	80001ec <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	230a      	movs	r3, #10
 80007b8:	4903      	ldr	r1, [pc, #12]	; (80007c8 <HAL_UART_RxCpltCallback+0x24>)
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <HAL_UART_RxCpltCallback+0x28>)
 80007bc:	f002 fe55 	bl	800346a <HAL_UART_Transmit>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000210 	.word	0x20000210
 80007cc:	20000330 	.word	0x20000330

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <HAL_MspInit+0x4c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a4b      	ldr	r2, [pc, #300]	; (800097c <HAL_UART_MspInit+0x14c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	f040 8090 	bne.w	8000974 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	4b49      	ldr	r3, [pc, #292]	; (8000980 <HAL_UART_MspInit+0x150>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a48      	ldr	r2, [pc, #288]	; (8000980 <HAL_UART_MspInit+0x150>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b46      	ldr	r3, [pc, #280]	; (8000980 <HAL_UART_MspInit+0x150>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4b42      	ldr	r3, [pc, #264]	; (8000980 <HAL_UART_MspInit+0x150>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a41      	ldr	r2, [pc, #260]	; (8000980 <HAL_UART_MspInit+0x150>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <HAL_UART_MspInit+0x150>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800088c:	230c      	movs	r3, #12
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4837      	ldr	r0, [pc, #220]	; (8000984 <HAL_UART_MspInit+0x154>)
 80008a8:	f000 fdce 	bl	8001448 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008ae:	4a37      	ldr	r2, [pc, #220]	; (800098c <HAL_UART_MspInit+0x15c>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008ec:	4826      	ldr	r0, [pc, #152]	; (8000988 <HAL_UART_MspInit+0x158>)
 80008ee:	f000 faa1 	bl	8000e34 <HAL_DMA_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80008f8:	f7ff ff6a 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a22      	ldr	r2, [pc, #136]	; (8000988 <HAL_UART_MspInit+0x158>)
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4a21      	ldr	r2, [pc, #132]	; (8000988 <HAL_UART_MspInit+0x158>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_UART_MspInit+0x160>)
 800090a:	4a22      	ldr	r2, [pc, #136]	; (8000994 <HAL_UART_MspInit+0x164>)
 800090c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000914:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000918:	2240      	movs	r2, #64	; 0x40
 800091a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_UART_MspInit+0x160>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000928:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x160>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_UART_MspInit+0x160>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <HAL_UART_MspInit+0x160>)
 800094a:	f000 fa73 	bl	8000e34 <HAL_DMA_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000954:	f7ff ff3c 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_UART_MspInit+0x160>)
 800095c:	631a      	str	r2, [r3, #48]	; 0x30
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_UART_MspInit+0x160>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2026      	movs	r0, #38	; 0x26
 800096a:	f000 fa2c 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096e:	2026      	movs	r0, #38	; 0x26
 8000970:	f000 fa45 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40004400 	.word	0x40004400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	2000026c 	.word	0x2000026c
 800098c:	40026088 	.word	0x40026088
 8000990:	200002cc 	.word	0x200002cc
 8000994:	400260a0 	.word	0x400260a0

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <DMA1_Stream5_IRQHandler+0x10>)
 80009ee:	f000 faf1 	bl	8000fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000026c 	.word	0x2000026c

080009fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <DMA1_Stream6_IRQHandler+0x10>)
 8000a02:	f000 fae7 	bl	8000fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200002cc 	.word	0x200002cc

08000a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART2_IRQHandler+0x10>)
 8000a16:	f002 fdc1 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000330 	.word	0x20000330

08000a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <OTG_FS_IRQHandler+0x10>)
 8000a2a:	f001 f83b 	bl	8001aa4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20001844 	.word	0x20001844

08000a38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x50>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x16>
		heap_end = &end;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <_sbrk+0x50>)
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <_sbrk+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <_sbrk+0x50>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <_sbrk+0x50>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	466a      	mov	r2, sp
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d907      	bls.n	8000a72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a62:	f006 ff61 	bl	8007928 <__errno>
 8000a66:	4602      	mov	r2, r0
 8000a68:	230c      	movs	r3, #12
 8000a6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <_sbrk+0x50>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <_sbrk+0x50>)
 8000a7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000200 	.word	0x20000200
 8000a8c:	20001c50 	.word	0x20001c50

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <SystemInit+0x28>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <SystemInit+0x28>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SystemInit+0x28>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000adc:	f842 3b04 	str.w	r3, [r2], #4

08000ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd3 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f006 ff23 	bl	8007934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd05 	bl	80004fc <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000af4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000af8:	08007bb0 	.word	0x08007bb0
  ldr  r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b00:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000b04:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000b08:	20001c50 	.word	0x20001c50

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f939 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe4c 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f951 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 f919 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000370 	.word	0x20000370

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_Delay+0x40>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff29 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff3e 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff31 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff feb8 	bl	8000bb4 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e099      	b.n	8000f84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e70:	e00f      	b.n	8000e92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e72:	f7ff fe9f 	bl	8000bb4 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d908      	bls.n	8000e92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e078      	b.n	8000f84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e8      	bne.n	8000e72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_DMA_Init+0x158>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d107      	bne.n	8000efc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f023 0307 	bic.w	r3, r3, #7
 8000f12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d117      	bne.n	8000f56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00e      	beq.n	8000f56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fa0b 	bl	8001354 <DMA_CheckFifoParam>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f52:	2301      	movs	r3, #1
 8000f54:	e016      	b.n	8000f84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f9c2 	bl	80012e8 <DMA_CalcBaseAndBitshift>
 8000f64:	4603      	mov	r3, r0
 8000f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f6c:	223f      	movs	r2, #63	; 0x3f
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	f010803f 	.word	0xf010803f

08000f90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d004      	beq.n	8000fae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00c      	b.n	8000fc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fe0:	4b92      	ldr	r3, [pc, #584]	; (800122c <HAL_DMA_IRQHandler+0x258>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a92      	ldr	r2, [pc, #584]	; (8001230 <HAL_DMA_IRQHandler+0x25c>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0a9b      	lsrs	r3, r3, #10
 8000fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffe:	2208      	movs	r2, #8
 8001000:	409a      	lsls	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01a      	beq.n	8001040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0204 	bic.w	r2, r2, #4
 8001026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102c:	2208      	movs	r2, #8
 800102e:	409a      	lsls	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	2201      	movs	r2, #1
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d012      	beq.n	8001076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	2201      	movs	r2, #1
 8001064:	409a      	lsls	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106e:	f043 0202 	orr.w	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	2204      	movs	r2, #4
 800107c:	409a      	lsls	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d012      	beq.n	80010ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00b      	beq.n	80010ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001098:	2204      	movs	r2, #4
 800109a:	409a      	lsls	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a4:	f043 0204 	orr.w	r2, r3, #4
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	2210      	movs	r2, #16
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d043      	beq.n	8001144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d03c      	beq.n	8001144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ce:	2210      	movs	r2, #16
 80010d0:	409a      	lsls	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d018      	beq.n	8001116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d108      	bne.n	8001104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d024      	beq.n	8001144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
 8001102:	e01f      	b.n	8001144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01b      	beq.n	8001144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	4798      	blx	r3
 8001114:	e016      	b.n	8001144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0208 	bic.w	r2, r2, #8
 8001132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	2220      	movs	r2, #32
 800114a:	409a      	lsls	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 808e 	beq.w	8001272 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8086 	beq.w	8001272 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116a:	2220      	movs	r2, #32
 800116c:	409a      	lsls	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b05      	cmp	r3, #5
 800117c:	d136      	bne.n	80011ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0216 	bic.w	r2, r2, #22
 800118c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <HAL_DMA_IRQHandler+0x1da>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0208 	bic.w	r2, r2, #8
 80011bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	223f      	movs	r2, #63	; 0x3f
 80011c4:	409a      	lsls	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d07d      	beq.n	80012de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	4798      	blx	r3
        }
        return;
 80011ea:	e078      	b.n	80012de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01c      	beq.n	8001234 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d108      	bne.n	800121a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	2b00      	cmp	r3, #0
 800120e:	d030      	beq.n	8001272 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
 8001218:	e02b      	b.n	8001272 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121e:	2b00      	cmp	r3, #0
 8001220:	d027      	beq.n	8001272 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
 800122a:	e022      	b.n	8001272 <HAL_DMA_IRQHandler+0x29e>
 800122c:	20000000 	.word	0x20000000
 8001230:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0210 	bic.w	r2, r2, #16
 8001250:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001276:	2b00      	cmp	r3, #0
 8001278:	d032      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d022      	beq.n	80012cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2205      	movs	r2, #5
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d307      	bcc.n	80012ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f2      	bne.n	800129e <HAL_DMA_IRQHandler+0x2ca>
 80012b8:	e000      	b.n	80012bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
 80012dc:	e000      	b.n	80012e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80012de:	bf00      	nop
    }
  }
}
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop

080012e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	3b10      	subs	r3, #16
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <DMA_CalcBaseAndBitshift+0x64>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <DMA_CalcBaseAndBitshift+0x68>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d909      	bls.n	800132a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800131e:	f023 0303 	bic.w	r3, r3, #3
 8001322:	1d1a      	adds	r2, r3, #4
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	659a      	str	r2, [r3, #88]	; 0x58
 8001328:	e007      	b.n	800133a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	aaaaaaab 	.word	0xaaaaaaab
 8001350:	08007b98 	.word	0x08007b98

08001354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11f      	bne.n	80013ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d855      	bhi.n	8001420 <DMA_CheckFifoParam+0xcc>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <DMA_CheckFifoParam+0x28>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	0800138d 	.word	0x0800138d
 8001380:	0800139f 	.word	0x0800139f
 8001384:	0800138d 	.word	0x0800138d
 8001388:	08001421 	.word	0x08001421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d045      	beq.n	8001424 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800139c:	e042      	b.n	8001424 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013a6:	d13f      	bne.n	8001428 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013ac:	e03c      	b.n	8001428 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b6:	d121      	bne.n	80013fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d836      	bhi.n	800142c <DMA_CheckFifoParam+0xd8>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <DMA_CheckFifoParam+0x70>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013db 	.word	0x080013db
 80013cc:	080013d5 	.word	0x080013d5
 80013d0:	080013ed 	.word	0x080013ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
      break;
 80013d8:	e02f      	b.n	800143a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d024      	beq.n	8001430 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013ea:	e021      	b.n	8001430 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013f4:	d11e      	bne.n	8001434 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013fa:	e01b      	b.n	8001434 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d902      	bls.n	8001408 <DMA_CheckFifoParam+0xb4>
 8001402:	2b03      	cmp	r3, #3
 8001404:	d003      	beq.n	800140e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001406:	e018      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
      break;
 800140c:	e015      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
      break;
 800141e:	e00b      	b.n	8001438 <DMA_CheckFifoParam+0xe4>
      break;
 8001420:	bf00      	nop
 8001422:	e00a      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      break;
 8001424:	bf00      	nop
 8001426:	e008      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      break;
 8001428:	bf00      	nop
 800142a:	e006      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      break;
 800142c:	bf00      	nop
 800142e:	e004      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      break;
 8001430:	bf00      	nop
 8001432:	e002      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      break;   
 8001434:	bf00      	nop
 8001436:	e000      	b.n	800143a <DMA_CheckFifoParam+0xe6>
      break;
 8001438:	bf00      	nop
    }
  } 
  
  return status; 
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e177      	b.n	8001754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8166 	bne.w	800174e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d00b      	beq.n	80014a2 <HAL_GPIO_Init+0x5a>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001496:	2b11      	cmp	r3, #17
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b12      	cmp	r3, #18
 80014a0:	d130      	bne.n	8001504 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 0201 	and.w	r2, r3, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0xfc>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b12      	cmp	r3, #18
 8001542:	d123      	bne.n	800158c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80c0 	beq.w	800174e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b65      	ldr	r3, [pc, #404]	; (8001768 <HAL_GPIO_Init+0x320>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a64      	ldr	r2, [pc, #400]	; (8001768 <HAL_GPIO_Init+0x320>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_GPIO_Init+0x320>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a60      	ldr	r2, [pc, #384]	; (800176c <HAL_GPIO_Init+0x324>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a57      	ldr	r2, [pc, #348]	; (8001770 <HAL_GPIO_Init+0x328>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d037      	beq.n	8001686 <HAL_GPIO_Init+0x23e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x32c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d031      	beq.n	8001682 <HAL_GPIO_Init+0x23a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x330>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x236>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <HAL_GPIO_Init+0x334>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x232>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_GPIO_Init+0x338>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x33c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x22a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a51      	ldr	r2, [pc, #324]	; (8001788 <HAL_GPIO_Init+0x340>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x226>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a50      	ldr	r2, [pc, #320]	; (800178c <HAL_GPIO_Init+0x344>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x222>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4f      	ldr	r2, [pc, #316]	; (8001790 <HAL_GPIO_Init+0x348>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x21e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4e      	ldr	r2, [pc, #312]	; (8001794 <HAL_GPIO_Init+0x34c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x21a>
 800165e:	2309      	movs	r3, #9
 8001660:	e012      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001662:	230a      	movs	r3, #10
 8001664:	e010      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001666:	2308      	movs	r3, #8
 8001668:	e00e      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166a:	2307      	movs	r3, #7
 800166c:	e00c      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166e:	2306      	movs	r3, #6
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001672:	2305      	movs	r3, #5
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001698:	4934      	ldr	r1, [pc, #208]	; (800176c <HAL_GPIO_Init+0x324>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ca:	4a33      	ldr	r2, [pc, #204]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f4:	4a28      	ldr	r2, [pc, #160]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_GPIO_Init+0x350>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_GPIO_Init+0x350>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_GPIO_Init+0x350>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001748:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_GPIO_Init+0x350>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f ae84 	bls.w	8001464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	3724      	adds	r7, #36	; 0x24
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40023800 	.word	0x40023800
 800176c:	40013800 	.word	0x40013800
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	40020800 	.word	0x40020800
 800177c:	40020c00 	.word	0x40020c00
 8001780:	40021000 	.word	0x40021000
 8001784:	40021400 	.word	0x40021400
 8001788:	40021800 	.word	0x40021800
 800178c:	40021c00 	.word	0x40021c00
 8001790:	40022000 	.word	0x40022000
 8001794:	40022400 	.word	0x40022400
 8001798:	40013c00 	.word	0x40013c00

0800179c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
 80017a8:	4613      	mov	r3, r2
 80017aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ac:	787b      	ldrb	r3, [r7, #1]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b8:	e003      	b.n	80017c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	041a      	lsls	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	619a      	str	r2, [r3, #24]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	401a      	ands	r2, r3
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d104      	bne.n	80017f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	041a      	lsls	r2, r3, #16
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b08f      	sub	sp, #60	; 0x3c
 8001808:	af0a      	add	r7, sp, #40	; 0x28
 800180a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e10f      	b.n	8001a36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f005 fd7d 	bl	8007330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fdb2 	bl	80043be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	687e      	ldr	r6, [r7, #4]
 8001862:	466d      	mov	r5, sp
 8001864:	f106 0410 	add.w	r4, r6, #16
 8001868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001874:	e885 0003 	stmia.w	r5, {r0, r1}
 8001878:	1d33      	adds	r3, r6, #4
 800187a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f002 fc89 	bl	8004194 <USB_CoreInit>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0d0      	b.n	8001a36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fda0 	bl	80043e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e04a      	b.n	800193c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	333d      	adds	r3, #61	; 0x3d
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	333c      	adds	r3, #60	; 0x3c
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	b298      	uxth	r0, r3
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	4602      	mov	r2, r0
 80018e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	333f      	adds	r3, #63	; 0x3f
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3344      	adds	r3, #68	; 0x44
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3348      	adds	r3, #72	; 0x48
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3350      	adds	r3, #80	; 0x50
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3af      	bcc.n	80018a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e044      	b.n	80019d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	3301      	adds	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d3b5      	bcc.n	800194c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	687e      	ldr	r6, [r7, #4]
 80019e8:	466d      	mov	r5, sp
 80019ea:	f106 0410 	add.w	r4, r6, #16
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80019fe:	1d33      	adds	r3, r6, #4
 8001a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f002 fd16 	bl	8004434 <USB_DevInit>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00d      	b.n	8001a36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fd55 	bl	80054de <USB_DevDisconnect>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_Start+0x1c>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e020      	b.n	8001a9c <HAL_PCD_Start+0x5e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d109      	bne.n	8001a7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d005      	beq.n	8001a7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fd13 	bl	80054ae <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fc85 	bl	800439c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b08d      	sub	sp, #52	; 0x34
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fdba 	bl	8005634 <USB_GetMode>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 839d 	bne.w	8002202 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fd1e 	bl	800550e <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8393 	beq.w	8002200 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fd15 	bl	800550e <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d107      	bne.n	8001afe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f002 0202 	and.w	r2, r2, #2
 8001afc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fd03 	bl	800550e <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d161      	bne.n	8001bd6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0210 	bic.w	r2, r2, #16
 8001b20:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f003 020f 	and.w	r2, r3, #15
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	0c5b      	lsrs	r3, r3, #17
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d124      	bne.n	8001b98 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d035      	beq.n	8001bc6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6a38      	ldr	r0, [r7, #32]
 8001b6e:	f003 fb7b 	bl	8005268 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b7e:	441a      	add	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b90:	441a      	add	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	e016      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	0c5b      	lsrs	r3, r3, #17
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	2b06      	cmp	r3, #6
 8001ba2:	d110      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001baa:	2208      	movs	r2, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	6a38      	ldr	r0, [r7, #32]
 8001bb0:	f003 fb5a 	bl	8005268 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc0:	441a      	add	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0210 	orr.w	r2, r2, #16
 8001bd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fc97 	bl	800550e <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bea:	d16e      	bne.n	8001cca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fc9d 	bl	8005534 <USB_ReadDevAllOutEpInterrupt>
 8001bfa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bfc:	e062      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d057      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fcc2 	bl	800559c <USB_ReadDevOutEPInterrupt>
 8001c18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00c      	beq.n	8001c3e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c30:	461a      	mov	r2, r3
 8001c32:	2301      	movs	r3, #1
 8001c34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fdb1 	bl	80027a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00c      	beq.n	8001c62 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c54:	461a      	mov	r2, r3
 8001c56:	2308      	movs	r3, #8
 8001c58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 feab 	bl	80029b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c94:	461a      	mov	r2, r3
 8001c96:	2320      	movs	r3, #32
 8001c98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	3301      	adds	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d199      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fc1d 	bl	800550e <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cde:	f040 80c0 	bne.w	8001e62 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fc3e 	bl	8005568 <USB_ReadDevAllInEpInterrupt>
 8001cec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cf2:	e0b2      	b.n	8001e5a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a7 	beq.w	8001e4e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fc64 	bl	80055d8 <USB_ReadDevInEPInterrupt>
 8001d10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d057      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	2201      	movs	r2, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69f9      	ldr	r1, [r7, #28]
 8001d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d132      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3348      	adds	r3, #72	; 0x48
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4403      	add	r3, r0
 8001d7a:	3344      	adds	r3, #68	; 0x44
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4419      	add	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4403      	add	r3, r0
 8001d8e:	3348      	adds	r3, #72	; 0x48
 8001d90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d113      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x31c>
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	3350      	adds	r3, #80	; 0x50
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001db8:	461a      	mov	r2, r3
 8001dba:	2101      	movs	r1, #1
 8001dbc:	f003 fc6c 	bl	8005698 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f005 fb33 	bl	8007432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de2:	461a      	mov	r2, r3
 8001de4:	2308      	movs	r3, #8
 8001de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2310      	movs	r3, #16
 8001e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2340      	movs	r3, #64	; 0x40
 8001e1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e36:	461a      	mov	r2, r3
 8001e38:	2302      	movs	r3, #2
 8001e3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fc1b 	bl	8002684 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	3301      	adds	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f47f af49 	bne.w	8001cf4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fb51 	bl	800550e <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e76:	d122      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fe27 	bl	8002af4 <HAL_PCDEx_LPM_Callback>
 8001ea6:	e002      	b.n	8001eae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f005 fb39 	bl	8007520 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fb23 	bl	800550e <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed2:	d112      	bne.n	8001efa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d102      	bne.n	8001eea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f005 faf5 	bl	80074d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ef8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fb05 	bl	800550e <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0e:	f040 80c7 	bne.w	80020a0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fbe5 	bl	80046fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	e056      	b.n	8001fe6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f44:	461a      	mov	r2, r3
 8001f46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5c:	0151      	lsls	r1, r2, #5
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	440a      	add	r2, r1
 8001f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f6a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7c:	0151      	lsls	r1, r2, #5
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	440a      	add	r2, r1
 8001f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb0:	0151      	lsls	r1, r2, #5
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	440a      	add	r2, r1
 8001fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd0:	0151      	lsls	r1, r2, #5
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	440a      	add	r2, r1
 8001fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3a3      	bcc.n	8001f38 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002002:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	2b00      	cmp	r3, #0
 800200a:	d016      	beq.n	800203a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201c:	f043 030b 	orr.w	r3, r3, #11
 8002020:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002032:	f043 030b 	orr.w	r3, r3, #11
 8002036:	6453      	str	r3, [r2, #68]	; 0x44
 8002038:	e015      	b.n	8002066 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800204c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002050:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002060:	f043 030b 	orr.w	r3, r3, #11
 8002064:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002074:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002078:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800208a:	461a      	mov	r2, r3
 800208c:	f003 fb04 	bl	8005698 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800209e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fa32 	bl	800550e <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b4:	d124      	bne.n	8002100 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fac8 	bl	8005650 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fb7a 	bl	80047be <USB_GetDevSpeed>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681c      	ldr	r4, [r3, #0]
 80020d6:	f001 f947 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80020da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	4620      	mov	r0, r4
 80020e6:	f002 f8b7 	bl	8004258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f005 f9c9 	bl	8007482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fa02 	bl	800550e <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d10a      	bne.n	800212a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f005 f9a6 	bl	8007466 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f002 0208 	and.w	r2, r2, #8
 8002128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f9ed 	bl	800550e <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800213e:	d10f      	bne.n	8002160 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f005 fa08 	bl	8007560 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800215e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f9d2 	bl	800550e <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002174:	d10f      	bne.n	8002196 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f005 f9db 	bl	800753c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f9b7 	bl	800550e <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021aa:	d10a      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f005 f9e9 	bl	8007584 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f9a1 	bl	800550e <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d115      	bne.n	8002202 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f005 f9d9 	bl	80075a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e000      	b.n	8002202 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002200:	bf00      	nop
    }
  }
}
 8002202:	3734      	adds	r7, #52	; 0x34
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_PCD_SetAddress+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e013      	b.n	800224a <HAL_PCD_SetAddress+0x42>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f003 f911 	bl	8005462 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4603      	mov	r3, r0
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	460b      	mov	r3, r1
 8002266:	803b      	strh	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	da0f      	bge.n	8002298 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3338      	adds	r3, #56	; 0x38
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	705a      	strb	r2, [r3, #1]
 8002296:	e00f      	b.n	80022b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022c4:	883a      	ldrh	r2, [r7, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	78ba      	ldrb	r2, [r7, #2]
 80022ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022e2:	78bb      	ldrb	r3, [r7, #2]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d102      	bne.n	80022ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_PCD_EP_Open+0xaa>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e00e      	b.n	800231a <HAL_PCD_EP_Open+0xc8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fa7c 	bl	8004808 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002318:	7afb      	ldrb	r3, [r7, #11]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800232e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002332:	2b00      	cmp	r3, #0
 8002334:	da0f      	bge.n	8002356 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3338      	adds	r3, #56	; 0x38
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	705a      	strb	r2, [r3, #1]
 8002354:	e00f      	b.n	8002376 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_PCD_EP_Close+0x6e>
 800238c:	2302      	movs	r3, #2
 800238e:	e00e      	b.n	80023ae <HAL_PCD_EP_Close+0x8c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 faba 	bl	8004918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	460b      	mov	r3, r1
 80023c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	6979      	ldr	r1, [r7, #20]
 800242a:	f002 fd95 	bl	8004f58 <USB_EP0StartXfer>
 800242e:	e008      	b.n	8002442 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	f002 fb47 	bl	8004ad0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	460b      	mov	r3, r1
 800248a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3338      	adds	r3, #56	; 0x38
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2201      	movs	r2, #1
 80024ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	6979      	ldr	r1, [r7, #20]
 80024ee:	f002 fd33 	bl	8004f58 <USB_EP0StartXfer>
 80024f2:	e008      	b.n	8002506 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	f002 fae5 	bl	8004ad0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 020f 	and.w	r2, r3, #15
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d901      	bls.n	800252e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e050      	b.n	80025d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800252e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da0f      	bge.n	8002556 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	705a      	strb	r2, [r3, #1]
 8002554:	e00d      	b.n	8002572 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_PCD_EP_SetStall+0x82>
 800258e:	2302      	movs	r3, #2
 8002590:	e01e      	b.n	80025d0 <HAL_PCD_EP_SetStall+0xc0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fe8a 	bl	80052ba <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2d9      	uxtb	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025c0:	461a      	mov	r2, r3
 80025c2:	f003 f869 	bl	8005698 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d901      	bls.n	80025f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e042      	b.n	800267c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da0f      	bge.n	800261e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3338      	adds	r3, #56	; 0x38
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	705a      	strb	r2, [r3, #1]
 800261c:	e00f      	b.n	800263e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	b2da      	uxtb	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_PCD_EP_ClrStall+0x86>
 800265a:	2302      	movs	r3, #2
 800265c:	e00e      	b.n	800267c <HAL_PCD_EP_ClrStall+0xa4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fe92 	bl	8005396 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	3338      	adds	r3, #56	; 0x38
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	3304      	adds	r3, #4
 80026aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d901      	bls.n	80026bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e06c      	b.n	8002796 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d902      	bls.n	80026d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3303      	adds	r3, #3
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026e0:	e02b      	b.n	800273a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d902      	bls.n	80026fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3303      	adds	r3, #3
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68d9      	ldr	r1, [r3, #12]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002716:	b2db      	uxtb	r3, r3
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4603      	mov	r3, r0
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f002 fd6e 	bl	80051fe <USB_WritePacket>

    ep->xfer_buff  += len;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	441a      	add	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	441a      	add	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	b29b      	uxth	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	429a      	cmp	r2, r3
 800274e:	d809      	bhi.n	8002764 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002758:	429a      	cmp	r2, r3
 800275a:	d203      	bcs.n	8002764 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1be      	bne.n	80026e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	429a      	cmp	r2, r3
 800276e:	d811      	bhi.n	8002794 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	43db      	mvns	r3, r3
 800278a:	6939      	ldr	r1, [r7, #16]
 800278c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002790:	4013      	ands	r3, r2
 8002792:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	333c      	adds	r3, #60	; 0x3c
 80027b8:	3304      	adds	r3, #4
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	f040 80a0 	bne.w	8002918 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d015      	beq.n	800280e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a72      	ldr	r2, [pc, #456]	; (80029b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	f240 80dd 	bls.w	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80d7 	beq.w	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800280a:	6093      	str	r3, [r2, #8]
 800280c:	e0cb      	b.n	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	2320      	movs	r3, #32
 8002828:	6093      	str	r3, [r2, #8]
 800282a:	e0bc      	b.n	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80b7 	bne.w	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d90f      	bls.n	8002860 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002856:	461a      	mov	r2, r3
 8002858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285c:	6093      	str	r3, [r2, #8]
 800285e:	e0a2      	b.n	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002872:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	0159      	lsls	r1, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	440b      	add	r3, r1
 800287c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002886:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4403      	add	r3, r0
 8002896:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800289a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4403      	add	r3, r0
 80028be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4419      	add	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4403      	add	r3, r0
 80028d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d114      	bne.n	800290a <PCD_EP_OutXfrComplete_int+0x16a>
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d108      	bne.n	800290a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002902:	461a      	mov	r2, r3
 8002904:	2101      	movs	r1, #1
 8002906:	f002 fec7 	bl	8005698 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f004 fd73 	bl	80073fc <HAL_PCD_DataOutStageCallback>
 8002916:	e046      	b.n	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d124      	bne.n	800296a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002936:	461a      	mov	r2, r3
 8002938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800293c:	6093      	str	r3, [r2, #8]
 800293e:	e032      	b.n	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002956:	461a      	mov	r2, r3
 8002958:	2320      	movs	r3, #32
 800295a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f004 fd4a 	bl	80073fc <HAL_PCD_DataOutStageCallback>
 8002968:	e01d      	b.n	80029a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d114      	bne.n	800299a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002992:	461a      	mov	r2, r3
 8002994:	2100      	movs	r1, #0
 8002996:	f002 fe7f 	bl	8005698 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f004 fd2b 	bl	80073fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	4f54300a 	.word	0x4f54300a
 80029b4:	4f54310a 	.word	0x4f54310a

080029b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	333c      	adds	r3, #60	; 0x3c
 80029d0:	3304      	adds	r3, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d90e      	bls.n	8002a0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a04:	461a      	mov	r2, r3
 8002a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f004 fce3 	bl	80073d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d90c      	bls.n	8002a34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2101      	movs	r1, #1
 8002a30:	f002 fe32 	bl	8005698 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	4f54300a 	.word	0x4f54300a

08002a44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
 8002a50:	4613      	mov	r3, r2
 8002a52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a62:	883b      	ldrh	r3, [r7, #0]
 8002a64:	0419      	lsls	r1, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a70:	e028      	b.n	8002ac4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e00d      	b.n	8002aa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4413      	add	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3ec      	bcc.n	8002a86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002aac:	883b      	ldrh	r3, [r7, #0]
 8002aae:	0418      	lsls	r0, r3, #16
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	4302      	orrs	r2, r0
 8002abc:	3340      	adds	r3, #64	; 0x40
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e25b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d075      	beq.n	8002c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	4ba3      	ldr	r3, [pc, #652]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d00c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b36:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d112      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b9d      	ldr	r3, [pc, #628]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	4b99      	ldr	r3, [pc, #612]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x108>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d157      	bne.n	8002c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e236      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x74>
 8002b72:	4b91      	ldr	r3, [pc, #580]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a90      	ldr	r2, [pc, #576]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x98>
 8002b8a:	4b8b      	ldr	r3, [pc, #556]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a8a      	ldr	r2, [pc, #552]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b88      	ldr	r3, [pc, #544]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a87      	ldr	r2, [pc, #540]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002ba4:	4b84      	ldr	r3, [pc, #528]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a83      	ldr	r2, [pc, #524]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b81      	ldr	r3, [pc, #516]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a80      	ldr	r2, [pc, #512]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fd fff6 	bl	8000bb4 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fd fff2 	bl	8000bb4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1fb      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xc0>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fd ffe2 	bl	8000bb4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fd ffde 	bl	8000bb4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1e7      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b6c      	ldr	r3, [pc, #432]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xe8>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1bb      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4952      	ldr	r1, [pc, #328]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <HAL_RCC_OscConfig+0x2b0>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fd ff97 	bl	8000bb4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fd ff93 	bl	8000bb4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e19c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4940      	ldr	r1, [pc, #256]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_RCC_OscConfig+0x2b0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fd ff76 	bl	8000bb4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fd ff72 	bl	8000bb4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e17b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d030      	beq.n	8002d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x2b4>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fd ff56 	bl	8000bb4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fd ff52 	bl	8000bb4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e15b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x200>
 8002d2a:	e015      	b.n	8002d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x2b4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fd ff3f 	bl	8000bb4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7fd ff3b 	bl	8000bb4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e144      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a0 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d92:	2301      	movs	r3, #1
 8002d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x2b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCC_OscConfig+0x2b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_RCC_OscConfig+0x2b8>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dae:	f7fd ff01 	bl	8000bb4 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	e011      	b.n	8002dda <HAL_RCC_OscConfig+0x2ce>
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	42470000 	.word	0x42470000
 8002dc0:	42470e80 	.word	0x42470e80
 8002dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7fd fef4 	bl	8000bb4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0fd      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x4d4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
 8002dee:	4b7d      	ldr	r3, [pc, #500]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a7c      	ldr	r2, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x32a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x312>
 8002e04:	4b77      	ldr	r3, [pc, #476]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a76      	ldr	r2, [pc, #472]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b74      	ldr	r3, [pc, #464]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x32a>
 8002e1e:	4b71      	ldr	r3, [pc, #452]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a70      	ldr	r2, [pc, #448]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	4b6e      	ldr	r3, [pc, #440]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a6d      	ldr	r2, [pc, #436]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fd feb9 	bl	8000bb4 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fd feb5 	bl	8000bb4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0bc      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x33a>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fd fea3 	bl	8000bb4 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fd fe9f 	bl	8000bb4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0a6      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a51      	ldr	r2, [pc, #324]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8092 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d05c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d141      	bne.n	8002f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <HAL_RCC_OscConfig+0x4dc>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fd fe73 	bl	8000bb4 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fd fe6f 	bl	8000bb4 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e078      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4933      	ldr	r1, [pc, #204]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x4dc>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fd fe48 	bl	8000bb4 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fd fe44 	bl	8000bb4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e04d      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x41c>
 8002f46:	e045      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x4dc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fd fe31 	bl	8000bb4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fd fe2d 	bl	8000bb4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e036      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x44a>
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e029      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_RCC_OscConfig+0x4d8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d115      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470060 	.word	0x42470060

08002fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0cc      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d90c      	bls.n	8003028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0b8      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a58      	ldr	r2, [pc, #352]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800304a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a52      	ldr	r2, [pc, #328]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	494d      	ldr	r1, [pc, #308]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d044      	beq.n	800310c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d119      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e07f      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06f      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e067      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4934      	ldr	r1, [pc, #208]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fd fd6a 	bl	8000bb4 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fd fd66 	bl	8000bb4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e04f      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d20c      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e032      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4916      	ldr	r1, [pc, #88]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	490e      	ldr	r1, [pc, #56]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003172:	f000 f821 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003176:	4601      	mov	r1, r0
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	fa21 f303 	lsr.w	r3, r1, r3
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fcde 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023c00 	.word	0x40023c00
 80031a8:	40023800 	.word	0x40023800
 80031ac:	08007b80 	.word	0x08007b80
 80031b0:	20000000 	.word	0x20000000
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d007      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x32>
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d008      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x38>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 80b4 	bne.w	800334c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031e6:	60bb      	str	r3, [r7, #8]
       break;
 80031e8:	e0b3      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ea:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80031ec:	60bb      	str	r3, [r7, #8]
      break;
 80031ee:	e0b0      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	4b5a      	ldr	r3, [pc, #360]	; (800335c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fa:	4b58      	ldr	r3, [pc, #352]	; (800335c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d04a      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b55      	ldr	r3, [pc, #340]	; (800335c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	ea03 0501 	and.w	r5, r3, r1
 800321c:	ea04 0602 	and.w	r6, r4, r2
 8003220:	4629      	mov	r1, r5
 8003222:	4632      	mov	r2, r6
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	0154      	lsls	r4, r2, #5
 800322e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003232:	014b      	lsls	r3, r1, #5
 8003234:	4619      	mov	r1, r3
 8003236:	4622      	mov	r2, r4
 8003238:	1b49      	subs	r1, r1, r5
 800323a:	eb62 0206 	sbc.w	r2, r2, r6
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	0194      	lsls	r4, r2, #6
 8003248:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800324c:	018b      	lsls	r3, r1, #6
 800324e:	1a5b      	subs	r3, r3, r1
 8003250:	eb64 0402 	sbc.w	r4, r4, r2
 8003254:	f04f 0100 	mov.w	r1, #0
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	00e2      	lsls	r2, r4, #3
 800325e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003262:	00d9      	lsls	r1, r3, #3
 8003264:	460b      	mov	r3, r1
 8003266:	4614      	mov	r4, r2
 8003268:	195b      	adds	r3, r3, r5
 800326a:	eb44 0406 	adc.w	r4, r4, r6
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	0262      	lsls	r2, r4, #9
 8003278:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800327c:	0259      	lsls	r1, r3, #9
 800327e:	460b      	mov	r3, r1
 8003280:	4614      	mov	r4, r2
 8003282:	4618      	mov	r0, r3
 8003284:	4621      	mov	r1, r4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f04f 0400 	mov.w	r4, #0
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	f7fc ffb4 	bl	80001fc <__aeabi_uldivmod>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e049      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329c:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	f04f 0400 	mov.w	r4, #0
 80032a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	ea03 0501 	and.w	r5, r3, r1
 80032b2:	ea04 0602 	and.w	r6, r4, r2
 80032b6:	4629      	mov	r1, r5
 80032b8:	4632      	mov	r2, r6
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	0154      	lsls	r4, r2, #5
 80032c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032c8:	014b      	lsls	r3, r1, #5
 80032ca:	4619      	mov	r1, r3
 80032cc:	4622      	mov	r2, r4
 80032ce:	1b49      	subs	r1, r1, r5
 80032d0:	eb62 0206 	sbc.w	r2, r2, r6
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	0194      	lsls	r4, r2, #6
 80032de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032e2:	018b      	lsls	r3, r1, #6
 80032e4:	1a5b      	subs	r3, r3, r1
 80032e6:	eb64 0402 	sbc.w	r4, r4, r2
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	00e2      	lsls	r2, r4, #3
 80032f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032f8:	00d9      	lsls	r1, r3, #3
 80032fa:	460b      	mov	r3, r1
 80032fc:	4614      	mov	r4, r2
 80032fe:	195b      	adds	r3, r3, r5
 8003300:	eb44 0406 	adc.w	r4, r4, r6
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	02a2      	lsls	r2, r4, #10
 800330e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003312:	0299      	lsls	r1, r3, #10
 8003314:	460b      	mov	r3, r1
 8003316:	4614      	mov	r4, r2
 8003318:	4618      	mov	r0, r3
 800331a:	4621      	mov	r1, r4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	461a      	mov	r2, r3
 8003324:	4623      	mov	r3, r4
 8003326:	f7fc ff69 	bl	80001fc <__aeabi_uldivmod>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	3301      	adds	r3, #1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e002      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800334e:	60bb      	str	r3, [r7, #8]
      break;
 8003350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003352:	68bb      	ldr	r3, [r7, #8]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	00f42400 	.word	0x00f42400
 8003364:	007a1200 	.word	0x007a1200

08003368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_RCC_GetHCLKFreq+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000000 	.word	0x20000000

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003384:	f7ff fff0 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003388:	4601      	mov	r1, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08007b90 	.word	0x08007b90

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ac:	f7ff ffdc 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033b0:	4601      	mov	r1, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0b5b      	lsrs	r3, r3, #13
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08007b90 	.word	0x08007b90

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e03f      	b.n	8003462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fa1a 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb41 	bl	8003a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b088      	sub	sp, #32
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	f040 8083 	bne.w	8003592 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_UART_Transmit+0x2e>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e07b      	b.n	8003594 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Transmit+0x40>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e074      	b.n	8003594 <HAL_UART_Transmit+0x12a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2221      	movs	r2, #33	; 0x21
 80034bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034c0:	f7fd fb78 	bl	8000bb4 <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034da:	e042      	b.n	8003562 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f2:	d122      	bne.n	800353a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f960 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e042      	b.n	8003594 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003520:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3302      	adds	r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e017      	b.n	8003562 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	e013      	b.n	8003562 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f93d 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e01f      	b.n	8003594 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	60ba      	str	r2, [r7, #8]
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1b7      	bne.n	80034dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f924 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e006      	b.n	8003594 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_UART_IRQHandler+0x52>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9d6 	bl	8003998 <UART_Receive_IT>
      return;
 80035ec:	e0d1      	b.n	8003792 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80b0 	beq.w	8003756 <HAL_UART_IRQHandler+0x1ba>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_UART_IRQHandler+0x70>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80a5 	beq.w	8003756 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_UART_IRQHandler+0x90>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_UART_IRQHandler+0xb0>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	f043 0202 	orr.w	r2, r3, #2
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_UART_IRQHandler+0xd0>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00f      	beq.n	8003696 <HAL_UART_IRQHandler+0xfa>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_UART_IRQHandler+0xee>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	f043 0208 	orr.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d078      	beq.n	8003790 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_UART_IRQHandler+0x11c>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f970 	bl	8003998 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_UART_IRQHandler+0x144>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d031      	beq.n	8003744 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8b9 	bl	8003858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d123      	bne.n	800373c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003702:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	4a21      	ldr	r2, [pc, #132]	; (8003798 <HAL_UART_IRQHandler+0x1fc>)
 8003712:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fc39 	bl	8000f90 <HAL_DMA_Abort_IT>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d016      	beq.n	8003752 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800372e:	4610      	mov	r0, r2
 8003730:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003732:	e00e      	b.n	8003752 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f83b 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	e00a      	b.n	8003752 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f837 	bl	80037b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003742:	e006      	b.n	8003752 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f833 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003750:	e01e      	b.n	8003790 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003752:	bf00      	nop
    return;
 8003754:	e01c      	b.n	8003790 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_UART_IRQHandler+0x1d6>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8a6 	bl	80038bc <UART_Transmit_IT>
    return;
 8003770:	e00f      	b.n	8003792 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_UART_IRQHandler+0x1f6>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8ee 	bl	8003968 <UART_EndTransmit_IT>
    return;
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003790:	bf00      	nop
  }
}
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	08003895 	.word	0x08003895

0800379c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d4:	e02c      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037dc:	d028      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e4:	f7fd f9e6 	bl	8000bb4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d21d      	bcs.n	8003830 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003802:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e00f      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	429a      	cmp	r2, r3
 800384c:	d0c3      	beq.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800386e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ff7e 	bl	80037b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b21      	cmp	r3, #33	; 0x21
 80038ce:	d144      	bne.n	800395a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d11a      	bne.n	8003910 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	621a      	str	r2, [r3, #32]
 8003902:	e00e      	b.n	8003922 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]
 800390e:	e008      	b.n	8003922 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6211      	str	r1, [r2, #32]
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4619      	mov	r1, r3
 8003930:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003954:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff07 	bl	800379c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b22      	cmp	r3, #34	; 0x22
 80039aa:	d171      	bne.n	8003a90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b4:	d123      	bne.n	80039fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10e      	bne.n	80039e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e029      	b.n	8003a36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
 80039fc:	e01b      	b.n	8003a36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6858      	ldr	r0, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6291      	str	r1, [r2, #40]	; 0x28
 8003a16:	b2c2      	uxtb	r2, r0
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e00c      	b.n	8003a36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	1c58      	adds	r0, r3, #1
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6288      	str	r0, [r1, #40]	; 0x28
 8003a2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d120      	bne.n	8003a8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0220 	bic.w	r2, r2, #32
 8003a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fe8e 	bl	80007a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e002      	b.n	8003a92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ade:	f023 030c 	bic.w	r3, r3, #12
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	f040 818b 	bne.w	8003e24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4ac1      	ldr	r2, [pc, #772]	; (8003e18 <UART_SetConfig+0x37c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d005      	beq.n	8003b24 <UART_SetConfig+0x88>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4abf      	ldr	r2, [pc, #764]	; (8003e1c <UART_SetConfig+0x380>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	f040 80bd 	bne.w	8003c9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7ff fc40 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8003b28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	46a8      	mov	r8, r5
 8003b34:	46b1      	mov	r9, r6
 8003b36:	eb18 0308 	adds.w	r3, r8, r8
 8003b3a:	eb49 0409 	adc.w	r4, r9, r9
 8003b3e:	4698      	mov	r8, r3
 8003b40:	46a1      	mov	r9, r4
 8003b42:	eb18 0805 	adds.w	r8, r8, r5
 8003b46:	eb49 0906 	adc.w	r9, r9, r6
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b5e:	4688      	mov	r8, r1
 8003b60:	4691      	mov	r9, r2
 8003b62:	eb18 0005 	adds.w	r0, r8, r5
 8003b66:	eb49 0106 	adc.w	r1, r9, r6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0600 	mov.w	r6, #0
 8003b74:	196b      	adds	r3, r5, r5
 8003b76:	eb46 0406 	adc.w	r4, r6, r6
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	f7fc fb3d 	bl	80001fc <__aeabi_uldivmod>
 8003b82:	4603      	mov	r3, r0
 8003b84:	460c      	mov	r4, r1
 8003b86:	461a      	mov	r2, r3
 8003b88:	4ba5      	ldr	r3, [pc, #660]	; (8003e20 <UART_SetConfig+0x384>)
 8003b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	461d      	mov	r5, r3
 8003b98:	f04f 0600 	mov.w	r6, #0
 8003b9c:	46a9      	mov	r9, r5
 8003b9e:	46b2      	mov	sl, r6
 8003ba0:	eb19 0309 	adds.w	r3, r9, r9
 8003ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ba8:	4699      	mov	r9, r3
 8003baa:	46a2      	mov	sl, r4
 8003bac:	eb19 0905 	adds.w	r9, r9, r5
 8003bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bb4:	f04f 0100 	mov.w	r1, #0
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bc8:	4689      	mov	r9, r1
 8003bca:	4692      	mov	sl, r2
 8003bcc:	eb19 0005 	adds.w	r0, r9, r5
 8003bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	461d      	mov	r5, r3
 8003bda:	f04f 0600 	mov.w	r6, #0
 8003bde:	196b      	adds	r3, r5, r5
 8003be0:	eb46 0406 	adc.w	r4, r6, r6
 8003be4:	461a      	mov	r2, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	f7fc fb08 	bl	80001fc <__aeabi_uldivmod>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <UART_SetConfig+0x384>)
 8003bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	2164      	movs	r1, #100	; 0x64
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	3332      	adds	r3, #50	; 0x32
 8003c06:	4a86      	ldr	r2, [pc, #536]	; (8003e20 <UART_SetConfig+0x384>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c14:	4498      	add	r8, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	461d      	mov	r5, r3
 8003c1a:	f04f 0600 	mov.w	r6, #0
 8003c1e:	46a9      	mov	r9, r5
 8003c20:	46b2      	mov	sl, r6
 8003c22:	eb19 0309 	adds.w	r3, r9, r9
 8003c26:	eb4a 040a 	adc.w	r4, sl, sl
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	46a2      	mov	sl, r4
 8003c2e:	eb19 0905 	adds.w	r9, r9, r5
 8003c32:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c4a:	4689      	mov	r9, r1
 8003c4c:	4692      	mov	sl, r2
 8003c4e:	eb19 0005 	adds.w	r0, r9, r5
 8003c52:	eb4a 0106 	adc.w	r1, sl, r6
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	f04f 0600 	mov.w	r6, #0
 8003c60:	196b      	adds	r3, r5, r5
 8003c62:	eb46 0406 	adc.w	r4, r6, r6
 8003c66:	461a      	mov	r2, r3
 8003c68:	4623      	mov	r3, r4
 8003c6a:	f7fc fac7 	bl	80001fc <__aeabi_uldivmod>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <UART_SetConfig+0x384>)
 8003c76:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2164      	movs	r1, #100	; 0x64
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	3332      	adds	r3, #50	; 0x32
 8003c88:	4a65      	ldr	r2, [pc, #404]	; (8003e20 <UART_SetConfig+0x384>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 0207 	and.w	r2, r3, #7
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4442      	add	r2, r8
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e26f      	b.n	800417e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7ff fb6f 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8003ca2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	46a8      	mov	r8, r5
 8003cae:	46b1      	mov	r9, r6
 8003cb0:	eb18 0308 	adds.w	r3, r8, r8
 8003cb4:	eb49 0409 	adc.w	r4, r9, r9
 8003cb8:	4698      	mov	r8, r3
 8003cba:	46a1      	mov	r9, r4
 8003cbc:	eb18 0805 	adds.w	r8, r8, r5
 8003cc0:	eb49 0906 	adc.w	r9, r9, r6
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cd8:	4688      	mov	r8, r1
 8003cda:	4691      	mov	r9, r2
 8003cdc:	eb18 0005 	adds.w	r0, r8, r5
 8003ce0:	eb49 0106 	adc.w	r1, r9, r6
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	461d      	mov	r5, r3
 8003cea:	f04f 0600 	mov.w	r6, #0
 8003cee:	196b      	adds	r3, r5, r5
 8003cf0:	eb46 0406 	adc.w	r4, r6, r6
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f7fc fa80 	bl	80001fc <__aeabi_uldivmod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <UART_SetConfig+0x384>)
 8003d04:	fba3 2302 	umull	r2, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	461d      	mov	r5, r3
 8003d12:	f04f 0600 	mov.w	r6, #0
 8003d16:	46a9      	mov	r9, r5
 8003d18:	46b2      	mov	sl, r6
 8003d1a:	eb19 0309 	adds.w	r3, r9, r9
 8003d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003d22:	4699      	mov	r9, r3
 8003d24:	46a2      	mov	sl, r4
 8003d26:	eb19 0905 	adds.w	r9, r9, r5
 8003d2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d42:	4689      	mov	r9, r1
 8003d44:	4692      	mov	sl, r2
 8003d46:	eb19 0005 	adds.w	r0, r9, r5
 8003d4a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	461d      	mov	r5, r3
 8003d54:	f04f 0600 	mov.w	r6, #0
 8003d58:	196b      	adds	r3, r5, r5
 8003d5a:	eb46 0406 	adc.w	r4, r6, r6
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4623      	mov	r3, r4
 8003d62:	f7fc fa4b 	bl	80001fc <__aeabi_uldivmod>
 8003d66:	4603      	mov	r3, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <UART_SetConfig+0x384>)
 8003d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2164      	movs	r1, #100	; 0x64
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <UART_SetConfig+0x384>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d8e:	4498      	add	r8, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	461d      	mov	r5, r3
 8003d94:	f04f 0600 	mov.w	r6, #0
 8003d98:	46a9      	mov	r9, r5
 8003d9a:	46b2      	mov	sl, r6
 8003d9c:	eb19 0309 	adds.w	r3, r9, r9
 8003da0:	eb4a 040a 	adc.w	r4, sl, sl
 8003da4:	4699      	mov	r9, r3
 8003da6:	46a2      	mov	sl, r4
 8003da8:	eb19 0905 	adds.w	r9, r9, r5
 8003dac:	eb4a 0a06 	adc.w	sl, sl, r6
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc4:	4689      	mov	r9, r1
 8003dc6:	4692      	mov	sl, r2
 8003dc8:	eb19 0005 	adds.w	r0, r9, r5
 8003dcc:	eb4a 0106 	adc.w	r1, sl, r6
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	f04f 0600 	mov.w	r6, #0
 8003dda:	196b      	adds	r3, r5, r5
 8003ddc:	eb46 0406 	adc.w	r4, r6, r6
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	f7fc fa0a 	bl	80001fc <__aeabi_uldivmod>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <UART_SetConfig+0x384>)
 8003df0:	fba3 1302 	umull	r1, r3, r3, r2
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	2164      	movs	r1, #100	; 0x64
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	3332      	adds	r3, #50	; 0x32
 8003e02:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <UART_SetConfig+0x384>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 0207 	and.w	r2, r3, #7
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4442      	add	r2, r8
 8003e14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e16:	e1b2      	b.n	800417e <UART_SetConfig+0x6e2>
 8003e18:	40011000 	.word	0x40011000
 8003e1c:	40011400 	.word	0x40011400
 8003e20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4ad7      	ldr	r2, [pc, #860]	; (8004188 <UART_SetConfig+0x6ec>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d005      	beq.n	8003e3a <UART_SetConfig+0x39e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4ad6      	ldr	r2, [pc, #856]	; (800418c <UART_SetConfig+0x6f0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 80d1 	bne.w	8003fdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e3a:	f7ff fab5 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8003e3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	469a      	mov	sl, r3
 8003e44:	f04f 0b00 	mov.w	fp, #0
 8003e48:	46d0      	mov	r8, sl
 8003e4a:	46d9      	mov	r9, fp
 8003e4c:	eb18 0308 	adds.w	r3, r8, r8
 8003e50:	eb49 0409 	adc.w	r4, r9, r9
 8003e54:	4698      	mov	r8, r3
 8003e56:	46a1      	mov	r9, r4
 8003e58:	eb18 080a 	adds.w	r8, r8, sl
 8003e5c:	eb49 090b 	adc.w	r9, r9, fp
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e74:	4688      	mov	r8, r1
 8003e76:	4691      	mov	r9, r2
 8003e78:	eb1a 0508 	adds.w	r5, sl, r8
 8003e7c:	eb4b 0609 	adc.w	r6, fp, r9
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f04f 0400 	mov.w	r4, #0
 8003e92:	0094      	lsls	r4, r2, #2
 8003e94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e98:	008b      	lsls	r3, r1, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	f7fc f9ab 	bl	80001fc <__aeabi_uldivmod>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4bb8      	ldr	r3, [pc, #736]	; (8004190 <UART_SetConfig+0x6f4>)
 8003eae:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	469b      	mov	fp, r3
 8003ebc:	f04f 0c00 	mov.w	ip, #0
 8003ec0:	46d9      	mov	r9, fp
 8003ec2:	46e2      	mov	sl, ip
 8003ec4:	eb19 0309 	adds.w	r3, r9, r9
 8003ec8:	eb4a 040a 	adc.w	r4, sl, sl
 8003ecc:	4699      	mov	r9, r3
 8003ece:	46a2      	mov	sl, r4
 8003ed0:	eb19 090b 	adds.w	r9, r9, fp
 8003ed4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eec:	4689      	mov	r9, r1
 8003eee:	4692      	mov	sl, r2
 8003ef0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ef4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	0094      	lsls	r4, r2, #2
 8003f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f10:	008b      	lsls	r3, r1, #2
 8003f12:	461a      	mov	r2, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	4631      	mov	r1, r6
 8003f1a:	f7fc f96f 	bl	80001fc <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b9a      	ldr	r3, [pc, #616]	; (8004190 <UART_SetConfig+0x6f4>)
 8003f26:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2164      	movs	r1, #100	; 0x64
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a95      	ldr	r2, [pc, #596]	; (8004190 <UART_SetConfig+0x6f4>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f44:	4498      	add	r8, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	469b      	mov	fp, r3
 8003f4a:	f04f 0c00 	mov.w	ip, #0
 8003f4e:	46d9      	mov	r9, fp
 8003f50:	46e2      	mov	sl, ip
 8003f52:	eb19 0309 	adds.w	r3, r9, r9
 8003f56:	eb4a 040a 	adc.w	r4, sl, sl
 8003f5a:	4699      	mov	r9, r3
 8003f5c:	46a2      	mov	sl, r4
 8003f5e:	eb19 090b 	adds.w	r9, r9, fp
 8003f62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	4692      	mov	sl, r2
 8003f7e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f82:	eb4c 060a 	adc.w	r6, ip, sl
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	f04f 0400 	mov.w	r4, #0
 8003f98:	0094      	lsls	r4, r2, #2
 8003f9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f9e:	008b      	lsls	r3, r1, #2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	f7fc f928 	bl	80001fc <__aeabi_uldivmod>
 8003fac:	4603      	mov	r3, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b77      	ldr	r3, [pc, #476]	; (8004190 <UART_SetConfig+0x6f4>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	; 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	; 0x32
 8003fc6:	4a72      	ldr	r2, [pc, #456]	; (8004190 <UART_SetConfig+0x6f4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4442      	add	r2, r8
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e0d0      	b.n	800417e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7ff f9d0 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	469a      	mov	sl, r3
 8003fe6:	f04f 0b00 	mov.w	fp, #0
 8003fea:	46d0      	mov	r8, sl
 8003fec:	46d9      	mov	r9, fp
 8003fee:	eb18 0308 	adds.w	r3, r8, r8
 8003ff2:	eb49 0409 	adc.w	r4, r9, r9
 8003ff6:	4698      	mov	r8, r3
 8003ff8:	46a1      	mov	r9, r4
 8003ffa:	eb18 080a 	adds.w	r8, r8, sl
 8003ffe:	eb49 090b 	adc.w	r9, r9, fp
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800400e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004012:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004016:	4688      	mov	r8, r1
 8004018:	4691      	mov	r9, r2
 800401a:	eb1a 0508 	adds.w	r5, sl, r8
 800401e:	eb4b 0609 	adc.w	r6, fp, r9
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4619      	mov	r1, r3
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	f04f 0400 	mov.w	r4, #0
 8004034:	0094      	lsls	r4, r2, #2
 8004036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800403a:	008b      	lsls	r3, r1, #2
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	4628      	mov	r0, r5
 8004042:	4631      	mov	r1, r6
 8004044:	f7fc f8da 	bl	80001fc <__aeabi_uldivmod>
 8004048:	4603      	mov	r3, r0
 800404a:	460c      	mov	r4, r1
 800404c:	461a      	mov	r2, r3
 800404e:	4b50      	ldr	r3, [pc, #320]	; (8004190 <UART_SetConfig+0x6f4>)
 8004050:	fba3 2302 	umull	r2, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	469b      	mov	fp, r3
 800405e:	f04f 0c00 	mov.w	ip, #0
 8004062:	46d9      	mov	r9, fp
 8004064:	46e2      	mov	sl, ip
 8004066:	eb19 0309 	adds.w	r3, r9, r9
 800406a:	eb4a 040a 	adc.w	r4, sl, sl
 800406e:	4699      	mov	r9, r3
 8004070:	46a2      	mov	sl, r4
 8004072:	eb19 090b 	adds.w	r9, r9, fp
 8004076:	eb4a 0a0c 	adc.w	sl, sl, ip
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800408a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800408e:	4689      	mov	r9, r1
 8004090:	4692      	mov	sl, r2
 8004092:	eb1b 0509 	adds.w	r5, fp, r9
 8004096:	eb4c 060a 	adc.w	r6, ip, sl
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4619      	mov	r1, r3
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	0094      	lsls	r4, r2, #2
 80040ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	4631      	mov	r1, r6
 80040bc:	f7fc f89e 	bl	80001fc <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <UART_SetConfig+0x6f4>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <UART_SetConfig+0x6f4>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e6:	4498      	add	r8, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	469b      	mov	fp, r3
 80040ec:	f04f 0c00 	mov.w	ip, #0
 80040f0:	46d9      	mov	r9, fp
 80040f2:	46e2      	mov	sl, ip
 80040f4:	eb19 0309 	adds.w	r3, r9, r9
 80040f8:	eb4a 040a 	adc.w	r4, sl, sl
 80040fc:	4699      	mov	r9, r3
 80040fe:	46a2      	mov	sl, r4
 8004100:	eb19 090b 	adds.w	r9, r9, fp
 8004104:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800411c:	4689      	mov	r9, r1
 800411e:	4692      	mov	sl, r2
 8004120:	eb1b 0509 	adds.w	r5, fp, r9
 8004124:	eb4c 060a 	adc.w	r6, ip, sl
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4619      	mov	r1, r3
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f04f 0400 	mov.w	r4, #0
 800413a:	0094      	lsls	r4, r2, #2
 800413c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004140:	008b      	lsls	r3, r1, #2
 8004142:	461a      	mov	r2, r3
 8004144:	4623      	mov	r3, r4
 8004146:	4628      	mov	r0, r5
 8004148:	4631      	mov	r1, r6
 800414a:	f7fc f857 	bl	80001fc <__aeabi_uldivmod>
 800414e:	4603      	mov	r3, r0
 8004150:	460c      	mov	r4, r1
 8004152:	461a      	mov	r2, r3
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <UART_SetConfig+0x6f4>)
 8004156:	fba3 1302 	umull	r1, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2164      	movs	r1, #100	; 0x64
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	; 0x32
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <UART_SetConfig+0x6f4>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4442      	add	r2, r8
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	e7ff      	b.n	800417e <UART_SetConfig+0x6e2>
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	40011000 	.word	0x40011000
 800418c:	40011400 	.word	0x40011400
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004194:	b084      	sub	sp, #16
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	f107 001c 	add.w	r0, r7, #28
 80041a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d122      	bne.n	80041f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 fab4 	bl	8005754 <USB_CoreReset>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e01a      	b.n	8004228 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f001 faa8 	bl	8005754 <USB_CoreReset>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
 800421a:	e005      	b.n	8004228 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10b      	bne.n	8004246 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f043 0206 	orr.w	r2, r3, #6
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004252:	b004      	add	sp, #16
 8004254:	4770      	bx	lr
	...

08004258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d165      	bne.n	8004338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a41      	ldr	r2, [pc, #260]	; (8004374 <USB_SetTurnaroundTime+0x11c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x2a>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a40      	ldr	r2, [pc, #256]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d802      	bhi.n	8004282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800427c:	230f      	movs	r3, #15
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e062      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d906      	bls.n	8004298 <USB_SetTurnaroundTime+0x40>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a3b      	ldr	r2, [pc, #236]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d802      	bhi.n	8004298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004292:	230e      	movs	r3, #14
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e057      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a38      	ldr	r2, [pc, #224]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0x56>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d802      	bhi.n	80042ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042a8:	230d      	movs	r3, #13
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e04c      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d906      	bls.n	80042c4 <USB_SetTurnaroundTime+0x6c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042be:	230c      	movs	r3, #12
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e041      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0x82>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d802      	bhi.n	80042da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042d4:	230b      	movs	r3, #11
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e036      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d906      	bls.n	80042f0 <USB_SetTurnaroundTime+0x98>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a29      	ldr	r2, [pc, #164]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042ea:	230a      	movs	r3, #10
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e02b      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0xae>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d802      	bhi.n	8004306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004300:	2309      	movs	r3, #9
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e020      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d906      	bls.n	800431c <USB_SetTurnaroundTime+0xc4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004316:	2308      	movs	r3, #8
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e015      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d906      	bls.n	8004332 <USB_SetTurnaroundTime+0xda>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <USB_SetTurnaroundTime+0x140>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d802      	bhi.n	8004332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800432c:	2307      	movs	r3, #7
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004332:	2306      	movs	r3, #6
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e007      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800433e:	2309      	movs	r3, #9
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e001      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004344:	2309      	movs	r3, #9
 8004346:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	00d8acbf 	.word	0x00d8acbf
 8004378:	00e4e1bf 	.word	0x00e4e1bf
 800437c:	00f423ff 	.word	0x00f423ff
 8004380:	0106737f 	.word	0x0106737f
 8004384:	011a499f 	.word	0x011a499f
 8004388:	01312cff 	.word	0x01312cff
 800438c:	014ca43f 	.word	0x014ca43f
 8004390:	016e35ff 	.word	0x016e35ff
 8004394:	01a6ab1f 	.word	0x01a6ab1f
 8004398:	01e847ff 	.word	0x01e847ff

0800439c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d106      	bne.n	800440c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e00b      	b.n	8004424 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e001      	b.n	8004424 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e003      	b.n	800442c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004424:	2032      	movs	r0, #50	; 0x32
 8004426:	f7fc fbd1 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004434:	b084      	sub	sp, #16
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e009      	b.n	8004468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	3340      	adds	r3, #64	; 0x40
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0e      	cmp	r3, #14
 800446c:	d9f2      	bls.n	8004454 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11c      	bne.n	80044ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004482:	f043 0302 	orr.w	r3, r3, #2
 8004486:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
 80044ac:	e00b      	b.n	80044c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044cc:	461a      	mov	r2, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	4619      	mov	r1, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	461a      	mov	r2, r3
 80044e2:	680b      	ldr	r3, [r1, #0]
 80044e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044f2:	2100      	movs	r1, #0
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f949 	bl	800478c <USB_SetDevSpeed>
 80044fa:	e008      	b.n	800450e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044fc:	2101      	movs	r1, #1
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f944 	bl	800478c <USB_SetDevSpeed>
 8004504:	e003      	b.n	800450e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004506:	2103      	movs	r1, #3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f93f 	bl	800478c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800450e:	2110      	movs	r1, #16
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8f3 	bl	80046fc <USB_FlushTxFifo>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f911 	bl	8004748 <USB_FlushRxFifo>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e043      	b.n	80045e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800456c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004570:	d118      	bne.n	80045a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	461a      	mov	r2, r3
 8004586:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e013      	b.n	80045b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	461a      	mov	r2, r3
 800459c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e008      	b.n	80045b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	461a      	mov	r2, r3
 80045b2:	2300      	movs	r3, #0
 80045b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	3301      	adds	r3, #1
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3b7      	bcc.n	800455a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e043      	b.n	8004678 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004606:	d118      	bne.n	800463a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e013      	b.n	800464c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e008      	b.n	800464c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	2300      	movs	r3, #0
 800464a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004670:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d3b7      	bcc.n	80045f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004692:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <USB_DevInit+0x2c4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	803c3800 	.word	0x803c3800

080046fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <USB_FlushTxFifo+0x48>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e006      	b.n	8004736 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	d0f0      	beq.n	8004716 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	00030d40 	.word	0x00030d40

08004748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2210      	movs	r2, #16
 8004758:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3301      	adds	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <USB_FlushRxFifo+0x40>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e006      	b.n	800477a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d0f0      	beq.n	800475a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	00030d40 	.word	0x00030d40

0800478c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047be:	b480      	push	{r7}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0306 	and.w	r3, r3, #6
 80047d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047de:	2300      	movs	r3, #0
 80047e0:	75fb      	strb	r3, [r7, #23]
 80047e2:	e00a      	b.n	80047fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d002      	beq.n	80047f0 <USB_GetDevSpeed+0x32>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d102      	bne.n	80047f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047f0:	2302      	movs	r3, #2
 80047f2:	75fb      	strb	r3, [r7, #23]
 80047f4:	e001      	b.n	80047fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047f6:	230f      	movs	r3, #15
 80047f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d13a      	bne.n	800489a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	b29b      	uxth	r3, r3
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004842:	4313      	orrs	r3, r2
 8004844:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d155      	bne.n	8004908 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	78db      	ldrb	r3, [r3, #3]
 8004876:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004878:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	059b      	lsls	r3, r3, #22
 800487e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004880:	4313      	orrs	r3, r2
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e036      	b.n	8004908 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11a      	bne.n	8004908 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ee:	430b      	orrs	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d161      	bne.n	80049f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494a:	d11f      	bne.n	800498c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800496a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800498a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ac:	4013      	ands	r3, r2
 80049ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d0:	4013      	ands	r3, r2
 80049d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0159      	lsls	r1, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	440b      	add	r3, r1
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	4619      	mov	r1, r3
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <USB_DeactivateEndpoint+0x1b0>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]
 80049f6:	e060      	b.n	8004aba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a0e:	d11f      	bne.n	8004a50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a70:	4013      	ands	r3, r2
 8004a72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a94:	4013      	ands	r3, r2
 8004a96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	0159      	lsls	r1, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <USB_DeactivateEndpoint+0x1b4>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	ec337800 	.word	0xec337800
 8004acc:	eff37800 	.word	0xeff37800

08004ad0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 815c 	bne.w	8004daa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d132      	bne.n	8004b60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	0cdb      	lsrs	r3, r3, #19
 8004b5a:	04db      	lsls	r3, r3, #19
 8004b5c:	6113      	str	r3, [r2, #16]
 8004b5e:	e074      	b.n	8004c4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	0cdb      	lsrs	r3, r3, #19
 8004b7c:	04db      	lsls	r3, r3, #19
 8004b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	6959      	ldr	r1, [r3, #20]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	440b      	add	r3, r1
 8004bbc:	1e59      	subs	r1, r3, #1
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc6:	04d9      	lsls	r1, r3, #19
 8004bc8:	4b9d      	ldr	r3, [pc, #628]	; (8004e40 <USB_EPStartXfer+0x370>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	0148      	lsls	r0, r1, #5
 8004bd0:	69f9      	ldr	r1, [r7, #28]
 8004bd2:	4401      	add	r1, r0
 8004bd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf2:	69b9      	ldr	r1, [r7, #24]
 8004bf4:	0148      	lsls	r0, r1, #5
 8004bf6:	69f9      	ldr	r1, [r7, #28]
 8004bf8:	4401      	add	r1, r0
 8004bfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d11f      	bne.n	8004c4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d14b      	bne.n	8004ce8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	461a      	mov	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	78db      	ldrb	r3, [r3, #3]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d128      	bne.n	8004cc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d110      	bne.n	8004ca6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e00f      	b.n	8004cc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e12f      	b.n	8004f48 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d015      	beq.n	8004d3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8117 	beq.w	8004f48 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d36:	4313      	orrs	r3, r2
 8004d38:	634b      	str	r3, [r1, #52]	; 0x34
 8004d3a:	e105      	b.n	8004f48 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d110      	bne.n	8004d6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e00f      	b.n	8004d8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68d9      	ldr	r1, [r3, #12]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	b298      	uxth	r0, r3
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4603      	mov	r3, r0
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fa2b 	bl	80051fe <USB_WritePacket>
 8004da8:	e0ce      	b.n	8004f48 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	0cdb      	lsrs	r3, r3, #19
 8004dc6:	04db      	lsls	r3, r3, #19
 8004dc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d126      	bne.n	8004e44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	0148      	lsls	r0, r1, #5
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	4401      	add	r1, r0
 8004e14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e3a:	6113      	str	r3, [r2, #16]
 8004e3c:	e036      	b.n	8004eac <USB_EPStartXfer+0x3dc>
 8004e3e:	bf00      	nop
 8004e40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	04d9      	lsls	r1, r3, #19
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <USB_EPStartXfer+0x484>)
 8004e6e:	400b      	ands	r3, r1
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	0148      	lsls	r0, r1, #5
 8004e74:	69f9      	ldr	r1, [r7, #28]
 8004e76:	4401      	add	r1, r0
 8004e78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	8af9      	ldrh	r1, [r7, #22]
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	0148      	lsls	r0, r1, #5
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	4401      	add	r1, r0
 8004ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10d      	bne.n	8004ece <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	68d9      	ldr	r1, [r3, #12]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	460a      	mov	r2, r1
 8004ecc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d128      	bne.n	8004f28 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d110      	bne.n	8004f08 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e00f      	b.n	8004f28 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	1ff80000 	.word	0x1ff80000

08004f58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 80cd 	bne.w	8005114 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d132      	bne.n	8004fe8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	0cdb      	lsrs	r3, r3, #19
 8004fe2:	04db      	lsls	r3, r3, #19
 8004fe4:	6113      	str	r3, [r2, #16]
 8004fe6:	e04e      	b.n	8005086 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005002:	0cdb      	lsrs	r3, r3, #19
 8005004:	04db      	lsls	r3, r3, #19
 8005006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800502a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d903      	bls.n	8005040 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005076:	6939      	ldr	r1, [r7, #16]
 8005078:	0148      	lsls	r0, r1, #5
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	4401      	add	r1, r0
 800507e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d11e      	bne.n	80050ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e092      	b.n	80051f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d07e      	beq.n	80051f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510e:	4313      	orrs	r3, r2
 8005110:	634b      	str	r3, [r1, #52]	; 0x34
 8005112:	e06d      	b.n	80051f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512e:	0cdb      	lsrs	r3, r3, #19
 8005130:	04db      	lsls	r3, r3, #19
 8005132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005152:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005156:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	0148      	lsls	r0, r1, #5
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	4401      	add	r1, r0
 80051a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051aa:	4313      	orrs	r3, r2
 80051ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10d      	bne.n	80051d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68d9      	ldr	r1, [r3, #12]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	460a      	mov	r2, r1
 80051ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051fe:	b480      	push	{r7}
 8005200:	b089      	sub	sp, #36	; 0x24
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	4611      	mov	r1, r2
 800520a:	461a      	mov	r2, r3
 800520c:	460b      	mov	r3, r1
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	4613      	mov	r3, r2
 8005212:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800521c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11a      	bne.n	800525a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005224:	88bb      	ldrh	r3, [r7, #4]
 8005226:	3303      	adds	r3, #3
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e00f      	b.n	8005252 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	031a      	lsls	r2, r3, #12
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	461a      	mov	r2, r3
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3304      	adds	r3, #4
 800524a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	3301      	adds	r3, #1
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3eb      	bcc.n	8005232 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3724      	adds	r7, #36	; 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	3303      	adds	r3, #3
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e00b      	b.n	80052a4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	601a      	str	r2, [r3, #0]
    pDest++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3304      	adds	r3, #4
 800529c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3ef      	bcc.n	800528c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d12c      	bne.n	8005330 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db12      	blt.n	800530e <USB_EPSetStall+0x54>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00f      	beq.n	800530e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800530c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e02b      	b.n	8005388 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db12      	blt.n	8005368 <USB_EPSetStall+0xae>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00f      	beq.n	8005368 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005366:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d128      	bne.n	8005404 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	78db      	ldrb	r3, [r3, #3]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d003      	beq.n	80053e2 <USB_EPClearStall+0x4c>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d138      	bne.n	8005454 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e027      	b.n	8005454 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005422:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	78db      	ldrb	r3, [r3, #3]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d003      	beq.n	8005434 <USB_EPClearStall+0x9e>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d10f      	bne.n	8005454 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005480:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005484:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c8:	f023 0302 	bic.w	r3, r3, #2
 80054cc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80054ce:	2003      	movs	r0, #3
 80054d0:	f7fb fb7c 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80054fe:	2003      	movs	r0, #3
 8005500:	f7fb fb64 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005526:	68fb      	ldr	r3, [r7, #12]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	0c1b      	lsrs	r3, r3, #16
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	b29b      	uxth	r3, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ca:	68bb      	ldr	r3, [r7, #8]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	01db      	lsls	r3, r3, #7
 800560a:	b2db      	uxtb	r3, r3
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005626:	68bb      	ldr	r3, [r7, #8]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0301 	and.w	r3, r3, #1
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800566e:	f023 0307 	bic.w	r3, r3, #7
 8005672:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	460b      	mov	r3, r1
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	333c      	adds	r3, #60	; 0x3c
 80056ae:	3304      	adds	r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4a26      	ldr	r2, [pc, #152]	; (8005750 <USB_EP0_OutStart+0xb8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d90a      	bls.n	80056d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056cc:	d101      	bne.n	80056d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e037      	b.n	8005742 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	2300      	movs	r3, #0
 80056dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 0318 	orr.w	r3, r3, #24
 8005704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005714:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005718:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d10f      	bne.n	8005740 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800573e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	4f54300a 	.word	0x4f54300a

08005754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <USB_CoreReset+0x64>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e01b      	b.n	80057aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	daf2      	bge.n	8005760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f043 0201 	orr.w	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <USB_CoreReset+0x64>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e006      	b.n	80057aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d0f0      	beq.n	800578a <USB_CoreReset+0x36>

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	00030d40 	.word	0x00030d40

080057bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057cc:	f002 f8d6 	bl	800797c <malloc>
 80057d0:	4603      	mov	r3, r0
 80057d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80057e2:	2302      	movs	r3, #2
 80057e4:	e066      	b.n	80058b4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7c1b      	ldrb	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d119      	bne.n	800582a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fa:	2202      	movs	r2, #2
 80057fc:	2181      	movs	r1, #129	; 0x81
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 ff43 	bl	800768a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800580a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580e:	2202      	movs	r2, #2
 8005810:	2101      	movs	r1, #1
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 ff39 	bl	800768a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2210      	movs	r2, #16
 8005824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005828:	e016      	b.n	8005858 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800582a:	2340      	movs	r3, #64	; 0x40
 800582c:	2202      	movs	r2, #2
 800582e:	2181      	movs	r1, #129	; 0x81
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 ff2a 	bl	800768a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	2202      	movs	r2, #2
 8005840:	2101      	movs	r1, #1
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 ff21 	bl	800768a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2210      	movs	r2, #16
 8005854:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005858:	2308      	movs	r3, #8
 800585a:	2203      	movs	r2, #3
 800585c:	2182      	movs	r1, #130	; 0x82
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 ff13 	bl	800768a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7c1b      	ldrb	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005898:	2101      	movs	r1, #1
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 ffe4 	bl	8007868 <USBD_LL_PrepareReceive>
 80058a0:	e007      	b.n	80058b2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058a8:	2340      	movs	r3, #64	; 0x40
 80058aa:	2101      	movs	r1, #1
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 ffdb 	bl	8007868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058cc:	2181      	movs	r1, #129	; 0x81
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 ff01 	bl	80076d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058da:	2101      	movs	r1, #1
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 fefa 	bl	80076d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058ea:	2182      	movs	r1, #130	; 0x82
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fef2 	bl	80076d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591c:	4618      	mov	r0, r3
 800591e:	f002 f835 	bl	800798c <free>
    pdev->pClassData = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005944:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800595a:	2b00      	cmp	r3, #0
 800595c:	d03a      	beq.n	80059d4 <USBD_CDC_Setup+0xa0>
 800595e:	2b20      	cmp	r3, #32
 8005960:	f040 8097 	bne.w	8005a92 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	88db      	ldrh	r3, [r3, #6]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d029      	beq.n	80059c0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	b25b      	sxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	da11      	bge.n	800599a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005982:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	88d2      	ldrh	r2, [r2, #6]
 8005988:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800598a:	6939      	ldr	r1, [r7, #16]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	88db      	ldrh	r3, [r3, #6]
 8005990:	461a      	mov	r2, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 fa6d 	bl	8006e72 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005998:	e082      	b.n	8005aa0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	785a      	ldrb	r2, [r3, #1]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	88db      	ldrh	r3, [r3, #6]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	88db      	ldrh	r3, [r3, #6]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fa86 	bl	8006eca <USBD_CtlPrepareRx>
    break;
 80059be:	e06f      	b.n	8005aa0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	7850      	ldrb	r0, [r2, #1]
 80059cc:	2200      	movs	r2, #0
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	4798      	blx	r3
    break;
 80059d2:	e065      	b.n	8005aa0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b0b      	cmp	r3, #11
 80059da:	d84f      	bhi.n	8005a7c <USBD_CDC_Setup+0x148>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <USBD_CDC_Setup+0xb0>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a8b 	.word	0x08005a8b
 80059ec:	08005a7d 	.word	0x08005a7d
 80059f0:	08005a7d 	.word	0x08005a7d
 80059f4:	08005a7d 	.word	0x08005a7d
 80059f8:	08005a7d 	.word	0x08005a7d
 80059fc:	08005a7d 	.word	0x08005a7d
 8005a00:	08005a7d 	.word	0x08005a7d
 8005a04:	08005a7d 	.word	0x08005a7d
 8005a08:	08005a7d 	.word	0x08005a7d
 8005a0c:	08005a3d 	.word	0x08005a3d
 8005a10:	08005a65 	.word	0x08005a65
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d107      	bne.n	8005a2e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a1e:	f107 030c 	add.w	r3, r7, #12
 8005a22:	2202      	movs	r2, #2
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 fa23 	bl	8006e72 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005a2c:	e030      	b.n	8005a90 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 f9ad 	bl	8006d90 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a36:	2303      	movs	r3, #3
 8005a38:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3a:	e029      	b.n	8005a90 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d107      	bne.n	8005a56 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a46:	f107 030f 	add.w	r3, r7, #15
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fa0f 	bl	8006e72 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005a54:	e01c      	b.n	8005a90 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 f999 	bl	8006d90 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	75fb      	strb	r3, [r7, #23]
      break;
 8005a62:	e015      	b.n	8005a90 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d00f      	beq.n	8005a8e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 f98d 	bl	8006d90 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a76:	2303      	movs	r3, #3
 8005a78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005a7a:	e008      	b.n	8005a8e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 f986 	bl	8006d90 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	75fb      	strb	r3, [r7, #23]
      break;
 8005a88:	e002      	b.n	8005a90 <USBD_CDC_Setup+0x15c>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e008      	b.n	8005aa0 <USBD_CDC_Setup+0x16c>
      break;
 8005a8e:	bf00      	nop
    }
    break;
 8005a90:	e006      	b.n	8005aa0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f97b 	bl	8006d90 <USBD_CtlError>
    ret = USBD_FAIL;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	75fb      	strb	r3, [r7, #23]
    break;
 8005a9e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005abe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e049      	b.n	8005b62 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d029      	beq.n	8005b40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	3318      	adds	r3, #24
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	78f9      	ldrb	r1, [r7, #3]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	460b      	mov	r3, r1
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	1a5b      	subs	r3, r3, r1
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4403      	add	r3, r0
 8005b0c:	3344      	adds	r3, #68	; 0x44
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b14:	fb03 f301 	mul.w	r3, r3, r1
 8005b18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d110      	bne.n	8005b40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b32:	78f9      	ldrb	r1, [r7, #3]
 8005b34:	2300      	movs	r3, #0
 8005b36:	2200      	movs	r2, #0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fe74 	bl	8007826 <USBD_LL_Transmit>
 8005b3e:	e00f      	b.n	8005b60 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	460b      	mov	r3, r1
 8005b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e015      	b.n	8005bb8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fe8a 	bl	80078aa <USBD_LL_GetRxDataSize>
 8005b96:	4602      	mov	r2, r0
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d015      	beq.n	8005c06 <USBD_CDC_EP0_RxReady+0x46>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005be0:	2bff      	cmp	r3, #255	; 0xff
 8005be2:	d010      	beq.n	8005c06 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005bf2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2243      	movs	r2, #67	; 0x43
 8005c1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c1e:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000094 	.word	0x20000094

08005c30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2243      	movs	r2, #67	; 0x43
 8005c3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c3e:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000050 	.word	0x20000050

08005c50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2243      	movs	r2, #67	; 0x43
 8005c5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005c5e:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	200000d8 	.word	0x200000d8

08005c70 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	220a      	movs	r2, #10
 8005c7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c7e:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e004      	b.n	8005cae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b087      	sub	sp, #28
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ccc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e016      	b.n	8005d60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7c1b      	ldrb	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d44:	2101      	movs	r1, #1
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fd8e 	bl	8007868 <USBD_LL_PrepareReceive>
 8005d4c:	e007      	b.n	8005d5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	2101      	movs	r1, #1
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fd85 	bl	8007868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e025      	b.n	8005dcc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	79fa      	ldrb	r2, [r7, #7]
 8005dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f001 fbfb 	bl	80075bc <USBD_LL_Init>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e010      	b.n	8005e0e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	f107 020e 	add.w	r2, r7, #14
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
 8005e04:	4602      	mov	r2, r0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fc18 	bl	8007654 <USBD_LL_Start>
 8005e24:	4603      	mov	r3, r0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	4611      	mov	r1, r2
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
  }

  return USBD_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 ff2c 	bl	8006d1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d00e      	beq.n	8005f06 <USBD_LL_SetupStage+0x5a>
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d302      	bcc.n	8005ef2 <USBD_LL_SetupStage+0x46>
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d014      	beq.n	8005f1a <USBD_LL_SetupStage+0x6e>
 8005ef0:	e01d      	b.n	8005f2e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa18 	bl	8006330 <USBD_StdDevReq>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	e020      	b.n	8005f48 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa7c 	bl	800640c <USBD_StdItfReq>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]
      break;
 8005f18:	e016      	b.n	8005f48 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fab8 	bl	8006498 <USBD_StdEPReq>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2c:	e00c      	b.n	8005f48 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 fbe9 	bl	8007714 <USBD_LL_StallEP>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
      break;
 8005f46:	bf00      	nop
  }

  return ret;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f60:	7afb      	ldrb	r3, [r7, #11]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d137      	bne.n	8005fd6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d14a      	bne.n	800600e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d913      	bls.n	8005fac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bf28      	it	cs
 8005f9e:	4613      	movcs	r3, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 ffad 	bl	8006f04 <USBD_CtlContinueRx>
 8005faa:	e030      	b.n	800600e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d105      	bne.n	8005fce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 ffa9 	bl	8006f26 <USBD_CtlSendStatus>
 8005fd4:	e01b      	b.n	800600e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d013      	beq.n	800600a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d10e      	bne.n	800600a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	7afa      	ldrb	r2, [r7, #11]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	4798      	blx	r3
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	e002      	b.n	8006010 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800600a:	2303      	movs	r3, #3
 800600c:	e000      	b.n	8006010 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	460b      	mov	r3, r1
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d16a      	bne.n	8006102 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3314      	adds	r3, #20
 8006030:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006038:	2b02      	cmp	r3, #2
 800603a:	d155      	bne.n	80060e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	d914      	bls.n	8006072 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	461a      	mov	r2, r3
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 ff22 	bl	8006ea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006064:	2300      	movs	r3, #0
 8006066:	2200      	movs	r2, #0
 8006068:	2100      	movs	r1, #0
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f001 fbfc 	bl	8007868 <USBD_LL_PrepareReceive>
 8006070:	e03a      	b.n	80060e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	d11c      	bne.n	80060b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006086:	429a      	cmp	r2, r3
 8006088:	d316      	bcc.n	80060b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006094:	429a      	cmp	r2, r3
 8006096:	d20f      	bcs.n	80060b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006098:	2200      	movs	r2, #0
 800609a:	2100      	movs	r1, #0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 ff03 	bl	8006ea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060aa:	2300      	movs	r3, #0
 80060ac:	2200      	movs	r2, #0
 80060ae:	2100      	movs	r1, #0
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f001 fbd9 	bl	8007868 <USBD_LL_PrepareReceive>
 80060b6:	e017      	b.n	80060e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d105      	bne.n	80060da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f001 fb19 	bl	8007714 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 ff32 	bl	8006f4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d123      	bne.n	800613a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fe9b 	bl	8005e2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006100:	e01b      	b.n	800613a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d013      	beq.n	8006136 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006114:	2b03      	cmp	r3, #3
 8006116:	d10e      	bne.n	8006136 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	7afa      	ldrb	r2, [r7, #11]
 8006122:	4611      	mov	r1, r2
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	4798      	blx	r3
 8006128:	4603      	mov	r3, r0
 800612a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	e002      	b.n	800613c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	e000      	b.n	800613c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	4611      	mov	r1, r2
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fa7b 	bl	800768a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a4:	2340      	movs	r3, #64	; 0x40
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fa6d 	bl	800768a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2240      	movs	r2, #64	; 0x40
 80061ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	78fa      	ldrb	r2, [r7, #3]
 80061d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621e:	2b04      	cmp	r3, #4
 8006220:	d105      	bne.n	800622e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624a:	2b03      	cmp	r3, #3
 800624c:	d10b      	bne.n	8006266 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6852      	ldr	r2, [r2, #4]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	4611      	mov	r1, r2
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
  }

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3301      	adds	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006310:	8a3b      	ldrh	r3, [r7, #16]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	b21a      	sxth	r2, r3
 8006316:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800631a:	4313      	orrs	r3, r2
 800631c:	b21b      	sxth	r3, r3
 800631e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006320:	89fb      	ldrh	r3, [r7, #14]
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006346:	2b20      	cmp	r3, #32
 8006348:	d004      	beq.n	8006354 <USBD_StdDevReq+0x24>
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d002      	beq.n	8006354 <USBD_StdDevReq+0x24>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <USBD_StdDevReq+0x38>
 8006352:	e050      	b.n	80063f6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
    break;
 8006366:	e04b      	b.n	8006400 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b09      	cmp	r3, #9
 800636e:	d83c      	bhi.n	80063ea <USBD_StdDevReq+0xba>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <USBD_StdDevReq+0x48>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063cd 	.word	0x080063cd
 800637c:	080063e1 	.word	0x080063e1
 8006380:	080063eb 	.word	0x080063eb
 8006384:	080063d7 	.word	0x080063d7
 8006388:	080063eb 	.word	0x080063eb
 800638c:	080063ab 	.word	0x080063ab
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063eb 	.word	0x080063eb
 8006398:	080063c3 	.word	0x080063c3
 800639c:	080063b5 	.word	0x080063b5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f9ce 	bl	8006744 <USBD_GetDescriptor>
      break;
 80063a8:	e024      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fb33 	bl	8006a18 <USBD_SetAddress>
      break;
 80063b2:	e01f      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fb70 	bl	8006a9c <USBD_SetConfig>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]
      break;
 80063c0:	e018      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fc0d 	bl	8006be4 <USBD_GetConfig>
      break;
 80063ca:	e013      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc3c 	bl	8006c4c <USBD_GetStatus>
      break;
 80063d4:	e00e      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fc6a 	bl	8006cb2 <USBD_SetFeature>
      break;
 80063de:	e009      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fc79 	bl	8006cda <USBD_ClrFeature>
      break;
 80063e8:	e004      	b.n	80063f4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fccf 	bl	8006d90 <USBD_CtlError>
      break;
 80063f2:	bf00      	nop
    }
    break;
 80063f4:	e004      	b.n	8006400 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fcc9 	bl	8006d90 <USBD_CtlError>
    break;
 80063fe:	bf00      	nop
  }

  return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop

0800640c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006422:	2b20      	cmp	r3, #32
 8006424:	d003      	beq.n	800642e <USBD_StdItfReq+0x22>
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d001      	beq.n	800642e <USBD_StdItfReq+0x22>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d12a      	bne.n	8006484 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	3b01      	subs	r3, #1
 8006436:	2b02      	cmp	r3, #2
 8006438:	d81d      	bhi.n	8006476 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	889b      	ldrh	r3, [r3, #4]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d813      	bhi.n	800646c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	88db      	ldrh	r3, [r3, #6]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d110      	bne.n	8006480 <USBD_StdItfReq+0x74>
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fd5e 	bl	8006f26 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800646a:	e009      	b.n	8006480 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fc8e 	bl	8006d90 <USBD_CtlError>
      break;
 8006474:	e004      	b.n	8006480 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc89 	bl	8006d90 <USBD_CtlError>
      break;
 800647e:	e000      	b.n	8006482 <USBD_StdItfReq+0x76>
      break;
 8006480:	bf00      	nop
    }
    break;
 8006482:	e004      	b.n	800648e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fc82 	bl	8006d90 <USBD_CtlError>
    break;
 800648c:	bf00      	nop
  }

  return ret;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	889b      	ldrh	r3, [r3, #4]
 80064aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d004      	beq.n	80064c2 <USBD_StdEPReq+0x2a>
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d002      	beq.n	80064c2 <USBD_StdEPReq+0x2a>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <USBD_StdEPReq+0x3e>
 80064c0:	e135      	b.n	800672e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
    break;
 80064d4:	e130      	b.n	8006738 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d03e      	beq.n	800655c <USBD_StdEPReq+0xc4>
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d002      	beq.n	80064e8 <USBD_StdEPReq+0x50>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d077      	beq.n	80065d6 <USBD_StdEPReq+0x13e>
 80064e6:	e11c      	b.n	8006722 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d002      	beq.n	80064f8 <USBD_StdEPReq+0x60>
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d015      	beq.n	8006522 <USBD_StdEPReq+0x8a>
 80064f6:	e02b      	b.n	8006550 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <USBD_StdEPReq+0x80>
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d009      	beq.n	8006518 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 f903 	bl	8007714 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f8ff 	bl	8007714 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006516:	e020      	b.n	800655a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fc38 	bl	8006d90 <USBD_CtlError>
        break;
 8006520:	e01b      	b.n	800655a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10e      	bne.n	8006548 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <USBD_StdEPReq+0xb0>
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d008      	beq.n	8006548 <USBD_StdEPReq+0xb0>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 f8e6 	bl	8007714 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fcec 	bl	8006f26 <USBD_CtlSendStatus>

        break;
 800654e:	e004      	b.n	800655a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fc1c 	bl	8006d90 <USBD_CtlError>
        break;
 8006558:	bf00      	nop
      }
      break;
 800655a:	e0e7      	b.n	800672c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006562:	2b02      	cmp	r3, #2
 8006564:	d002      	beq.n	800656c <USBD_StdEPReq+0xd4>
 8006566:	2b03      	cmp	r3, #3
 8006568:	d015      	beq.n	8006596 <USBD_StdEPReq+0xfe>
 800656a:	e02d      	b.n	80065c8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <USBD_StdEPReq+0xf4>
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d009      	beq.n	800658c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f8c9 	bl	8007714 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 f8c5 	bl	8007714 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800658a:	e023      	b.n	80065d4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fbfe 	bl	8006d90 <USBD_CtlError>
        break;
 8006594:	e01e      	b.n	80065d4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	885b      	ldrh	r3, [r3, #2]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d119      	bne.n	80065d2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 f8d0 	bl	8007752 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fcb7 	bl	8006f26 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
        }
        break;
 80065c6:	e004      	b.n	80065d2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fbe0 	bl	8006d90 <USBD_CtlError>
        break;
 80065d0:	e000      	b.n	80065d4 <USBD_StdEPReq+0x13c>
        break;
 80065d2:	bf00      	nop
      }
      break;
 80065d4:	e0aa      	b.n	800672c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d002      	beq.n	80065e6 <USBD_StdEPReq+0x14e>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d032      	beq.n	800664a <USBD_StdEPReq+0x1b2>
 80065e4:	e097      	b.n	8006716 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <USBD_StdEPReq+0x164>
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d004      	beq.n	80065fc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fbcb 	bl	8006d90 <USBD_CtlError>
          break;
 80065fa:	e091      	b.n	8006720 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da0b      	bge.n	800661c <USBD_StdEPReq+0x184>
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	3310      	adds	r3, #16
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	3304      	adds	r3, #4
 800661a:	e00b      	b.n	8006634 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	3304      	adds	r3, #4
 8006634:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2202      	movs	r2, #2
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fc15 	bl	8006e72 <USBD_CtlSendData>
        break;
 8006648:	e06a      	b.n	8006720 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800664a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	da11      	bge.n	8006676 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	f003 020f 	and.w	r2, r3, #15
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	3324      	adds	r3, #36	; 0x24
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d117      	bne.n	800669c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fb8e 	bl	8006d90 <USBD_CtlError>
            break;
 8006674:	e054      	b.n	8006720 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb7b 	bl	8006d90 <USBD_CtlError>
            break;
 800669a:	e041      	b.n	8006720 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800669c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	da0b      	bge.n	80066bc <USBD_StdEPReq+0x224>
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	3310      	adds	r3, #16
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	4413      	add	r3, r2
 80066b8:	3304      	adds	r3, #4
 80066ba:	e00b      	b.n	80066d4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	3304      	adds	r3, #4
 80066d4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <USBD_StdEPReq+0x24a>
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d103      	bne.n	80066ea <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	e00e      	b.n	8006708 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 f84e 	bl	8007790 <USBD_LL_IsStallEP>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2201      	movs	r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	e002      	b.n	8006708 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2202      	movs	r2, #2
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fbaf 	bl	8006e72 <USBD_CtlSendData>
          break;
 8006714:	e004      	b.n	8006720 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb39 	bl	8006d90 <USBD_CtlError>
        break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e004      	b.n	800672c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb33 	bl	8006d90 <USBD_CtlError>
      break;
 800672a:	bf00      	nop
    }
    break;
 800672c:	e004      	b.n	8006738 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fb2d 	bl	8006d90 <USBD_CtlError>
    break;
 8006736:	bf00      	nop
  }

  return ret;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	885b      	ldrh	r3, [r3, #2]
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	2b06      	cmp	r3, #6
 8006766:	f200 8128 	bhi.w	80069ba <USBD_GetDescriptor+0x276>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <USBD_GetDescriptor+0x2c>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	0800678d 	.word	0x0800678d
 8006774:	080067a5 	.word	0x080067a5
 8006778:	080067e5 	.word	0x080067e5
 800677c:	080069bb 	.word	0x080069bb
 8006780:	080069bb 	.word	0x080069bb
 8006784:	0800695b 	.word	0x0800695b
 8006788:	08006987 	.word	0x08006987
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
    break;
 80067a2:	e112      	b.n	80069ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	7c1b      	ldrb	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10d      	bne.n	80067c8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	f107 0208 	add.w	r2, r7, #8
 80067b8:	4610      	mov	r0, r2
 80067ba:	4798      	blx	r3
 80067bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	2202      	movs	r2, #2
 80067c4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80067c6:	e100      	b.n	80069ca <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	f107 0208 	add.w	r2, r7, #8
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	2202      	movs	r2, #2
 80067e0:	701a      	strb	r2, [r3, #0]
    break;
 80067e2:	e0f2      	b.n	80069ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	885b      	ldrh	r3, [r3, #2]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	f200 80ac 	bhi.w	8006948 <USBD_GetDescriptor+0x204>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBD_GetDescriptor+0xb4>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	08006811 	.word	0x08006811
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006879 	.word	0x08006879
 8006804:	080068ad 	.word	0x080068ad
 8006808:	080068e1 	.word	0x080068e1
 800680c:	08006915 	.word	0x08006915
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006832:	e091      	b.n	8006958 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 faaa 	bl	8006d90 <USBD_CtlError>
        err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
      break;
 8006842:	e089      	b.n	8006958 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006866:	e077      	b.n	8006958 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa90 	bl	8006d90 <USBD_CtlError>
        err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
      break;
 8006876:	e06f      	b.n	8006958 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800689a:	e05d      	b.n	8006958 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa76 	bl	8006d90 <USBD_CtlError>
        err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
      break;
 80068aa:	e055      	b.n	8006958 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	7c12      	ldrb	r2, [r2, #16]
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ce:	e043      	b.n	8006958 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa5c 	bl	8006d90 <USBD_CtlError>
        err++;
 80068d8:	7afb      	ldrb	r3, [r7, #11]
 80068da:	3301      	adds	r3, #1
 80068dc:	72fb      	strb	r3, [r7, #11]
      break;
 80068de:	e03b      	b.n	8006958 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006902:	e029      	b.n	8006958 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa42 	bl	8006d90 <USBD_CtlError>
        err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
      break;
 8006912:	e021      	b.n	8006958 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	7c12      	ldrb	r2, [r2, #16]
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
 8006934:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006936:	e00f      	b.n	8006958 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa28 	bl	8006d90 <USBD_CtlError>
        err++;
 8006940:	7afb      	ldrb	r3, [r7, #11]
 8006942:	3301      	adds	r3, #1
 8006944:	72fb      	strb	r3, [r7, #11]
      break;
 8006946:	e007      	b.n	8006958 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa20 	bl	8006d90 <USBD_CtlError>
      err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006956:	bf00      	nop
    }
    break;
 8006958:	e037      	b.n	80069ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	7c1b      	ldrb	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	f107 0208 	add.w	r2, r7, #8
 800696e:	4610      	mov	r0, r2
 8006970:	4798      	blx	r3
 8006972:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006974:	e029      	b.n	80069ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa09 	bl	8006d90 <USBD_CtlError>
      err++;
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	3301      	adds	r3, #1
 8006982:	72fb      	strb	r3, [r7, #11]
    break;
 8006984:	e021      	b.n	80069ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7c1b      	ldrb	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10d      	bne.n	80069aa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f107 0208 	add.w	r2, r7, #8
 800699a:	4610      	mov	r0, r2
 800699c:	4798      	blx	r3
 800699e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	2207      	movs	r2, #7
 80069a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80069a8:	e00f      	b.n	80069ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f9ef 	bl	8006d90 <USBD_CtlError>
      err++;
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	3301      	adds	r3, #1
 80069b6:	72fb      	strb	r3, [r7, #11]
    break;
 80069b8:	e007      	b.n	80069ca <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9e7 	bl	8006d90 <USBD_CtlError>
    err++;
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	3301      	adds	r3, #1
 80069c6:	72fb      	strb	r3, [r7, #11]
    break;
 80069c8:	bf00      	nop
  }

  if (err != 0U)
 80069ca:	7afb      	ldrb	r3, [r7, #11]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11e      	bne.n	8006a0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	88db      	ldrh	r3, [r3, #6]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d016      	beq.n	8006a06 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80069d8:	893b      	ldrh	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	88da      	ldrh	r2, [r3, #6]
 80069e2:	893b      	ldrh	r3, [r7, #8]
 80069e4:	4293      	cmp	r3, r2
 80069e6:	bf28      	it	cs
 80069e8:	4613      	movcs	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80069ee:	893b      	ldrh	r3, [r7, #8]
 80069f0:	461a      	mov	r2, r3
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa3c 	bl	8006e72 <USBD_CtlSendData>
 80069fa:	e009      	b.n	8006a10 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9c6 	bl	8006d90 <USBD_CtlError>
 8006a04:	e004      	b.n	8006a10 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa8d 	bl	8006f26 <USBD_CtlSendStatus>
 8006a0c:	e000      	b.n	8006a10 <USBD_GetDescriptor+0x2cc>
    return;
 8006a0e:	bf00      	nop
    }
  }
}
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop

08006a18 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	889b      	ldrh	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d130      	bne.n	8006a8c <USBD_SetAddress+0x74>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d12c      	bne.n	8006a8c <USBD_SetAddress+0x74>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	885b      	ldrh	r3, [r3, #2]
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d828      	bhi.n	8006a8c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d104      	bne.n	8006a5a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f99c 	bl	8006d90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a58:	e01c      	b.n	8006a94 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	7bfa      	ldrb	r2, [r7, #15]
 8006a5e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 febe 	bl	80077e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa5a 	bl	8006f26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a80:	e008      	b.n	8006a94 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8a:	e003      	b.n	8006a94 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f97e 	bl	8006d90 <USBD_CtlError>
  }
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	885b      	ldrh	r3, [r3, #2]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <USBD_SetConfig+0x144>)
 8006ab2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ab4:	4b4a      	ldr	r3, [pc, #296]	; (8006be0 <USBD_SetConfig+0x144>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d905      	bls.n	8006ac8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f966 	bl	8006d90 <USBD_CtlError>
    return USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e087      	b.n	8006bd8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d002      	beq.n	8006ad8 <USBD_SetConfig+0x3c>
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d025      	beq.n	8006b22 <USBD_SetConfig+0x86>
 8006ad6:	e071      	b.n	8006bbc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006ad8:	4b41      	ldr	r3, [pc, #260]	; (8006be0 <USBD_SetConfig+0x144>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01c      	beq.n	8006b1a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006ae0:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <USBD_SetConfig+0x144>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006aea:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <USBD_SetConfig+0x144>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff f9a7 	bl	8005e44 <USBD_SetClassConfig>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f944 	bl	8006d90 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b08:	e065      	b.n	8006bd6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa0b 	bl	8006f26 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2203      	movs	r2, #3
 8006b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006b18:	e05d      	b.n	8006bd6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa03 	bl	8006f26 <USBD_CtlSendStatus>
    break;
 8006b20:	e059      	b.n	8006bd6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006b22:	4b2f      	ldr	r3, [pc, #188]	; (8006be0 <USBD_SetConfig+0x144>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d112      	bne.n	8006b50 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006b32:	4b2b      	ldr	r3, [pc, #172]	; (8006be0 <USBD_SetConfig+0x144>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b3c:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <USBD_SetConfig+0x144>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff f99a 	bl	8005e7c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9ec 	bl	8006f26 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b4e:	e042      	b.n	8006bd6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006b50:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <USBD_SetConfig+0x144>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d02a      	beq.n	8006bb4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff f988 	bl	8005e7c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006b6c:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <USBD_SetConfig+0x144>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <USBD_SetConfig+0x144>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff f961 	bl	8005e44 <USBD_SetClassConfig>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00f      	beq.n	8006bac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f8fe 	bl	8006d90 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff f96d 	bl	8005e7c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006baa:	e014      	b.n	8006bd6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f9ba 	bl	8006f26 <USBD_CtlSendStatus>
    break;
 8006bb2:	e010      	b.n	8006bd6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f9b6 	bl	8006f26 <USBD_CtlSendStatus>
    break;
 8006bba:	e00c      	b.n	8006bd6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f8e6 	bl	8006d90 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <USBD_SetConfig+0x144>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff f956 	bl	8005e7c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd4:	bf00      	nop
  }

  return ret;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000204 	.word	0x20000204

08006be4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	88db      	ldrh	r3, [r3, #6]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d004      	beq.n	8006c00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f8c9 	bl	8006d90 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006bfe:	e021      	b.n	8006c44 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	db17      	blt.n	8006c3a <USBD_GetConfig+0x56>
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	dd02      	ble.n	8006c14 <USBD_GetConfig+0x30>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d00b      	beq.n	8006c2a <USBD_GetConfig+0x46>
 8006c12:	e012      	b.n	8006c3a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f925 	bl	8006e72 <USBD_CtlSendData>
      break;
 8006c28:	e00c      	b.n	8006c44 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f91d 	bl	8006e72 <USBD_CtlSendData>
      break;
 8006c38:	e004      	b.n	8006c44 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f8a7 	bl	8006d90 <USBD_CtlError>
      break;
 8006c42:	bf00      	nop
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d81e      	bhi.n	8006ca0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88db      	ldrh	r3, [r3, #6]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d004      	beq.n	8006c74 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f88f 	bl	8006d90 <USBD_CtlError>
      break;
 8006c72:	e01a      	b.n	8006caa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f043 0202 	orr.w	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	330c      	adds	r3, #12
 8006c94:	2202      	movs	r2, #2
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f8ea 	bl	8006e72 <USBD_CtlSendData>
    break;
 8006c9e:	e004      	b.n	8006caa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f874 	bl	8006d90 <USBD_CtlError>
    break;
 8006ca8:	bf00      	nop
  }
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	885b      	ldrh	r3, [r3, #2]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d106      	bne.n	8006cd2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f92a 	bl	8006f26 <USBD_CtlSendStatus>
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	3b01      	subs	r3, #1
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d80b      	bhi.n	8006d08 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	885b      	ldrh	r3, [r3, #2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d10c      	bne.n	8006d12 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f910 	bl	8006f26 <USBD_CtlSendStatus>
      }
      break;
 8006d06:	e004      	b.n	8006d12 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f840 	bl	8006d90 <USBD_CtlError>
      break;
 8006d10:	e000      	b.n	8006d14 <USBD_ClrFeature+0x3a>
      break;
 8006d12:	bf00      	nop
  }
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	781a      	ldrb	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff fad3 	bl	80062f2 <SWAPBYTE>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fac6 	bl	80062f2 <SWAPBYTE>
 8006d66:	4603      	mov	r3, r0
 8006d68:	461a      	mov	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fab9 	bl	80062f2 <SWAPBYTE>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	80da      	strh	r2, [r3, #6]
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fcb9 	bl	8007714 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006da2:	2100      	movs	r1, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fcb5 	bl	8007714 <USBD_LL_StallEP>
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d036      	beq.n	8006e36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006dcc:	6938      	ldr	r0, [r7, #16]
 8006dce:	f000 f836 	bl	8006e3e <USBD_GetLen>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4413      	add	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	3301      	adds	r3, #1
 8006df0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	4413      	add	r3, r2
 8006df8:	2203      	movs	r2, #3
 8006dfa:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e02:	e013      	b.n	8006e2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4413      	add	r3, r2
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	7812      	ldrb	r2, [r2, #0]
 8006e0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3301      	adds	r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
    idx++;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e7      	bne.n	8006e04 <USBD_GetString+0x52>
 8006e34:	e000      	b.n	8006e38 <USBD_GetString+0x86>
    return;
 8006e36:	bf00      	nop
  }
}
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e4e:	e005      	b.n	8006e5c <USBD_GetLen+0x1e>
  {
    len++;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	3301      	adds	r3, #1
 8006e54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f5      	bne.n	8006e50 <USBD_GetLen+0x12>
  }

  return len;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	2100      	movs	r1, #0
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fcc4 	bl	8007826 <USBD_LL_Transmit>

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fcb3 	bl	8007826 <USBD_LL_Transmit>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2203      	movs	r2, #3
 8006eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fcb7 	bl	8007868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	2100      	movs	r1, #0
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fca6 	bl	8007868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f36:	2300      	movs	r3, #0
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fc72 	bl	8007826 <USBD_LL_Transmit>

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2205      	movs	r2, #5
 8006f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fc80 	bl	8007868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4912      	ldr	r1, [pc, #72]	; (8006fc4 <MX_USB_DEVICE_Init+0x50>)
 8006f7c:	4812      	ldr	r0, [pc, #72]	; (8006fc8 <MX_USB_DEVICE_Init+0x54>)
 8006f7e:	f7fe fef3 	bl	8005d68 <USBD_Init>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f88:	f7f9 fc22 	bl	80007d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f8c:	490f      	ldr	r1, [pc, #60]	; (8006fcc <MX_USB_DEVICE_Init+0x58>)
 8006f8e:	480e      	ldr	r0, [pc, #56]	; (8006fc8 <MX_USB_DEVICE_Init+0x54>)
 8006f90:	f7fe ff20 	bl	8005dd4 <USBD_RegisterClass>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f9a:	f7f9 fc19 	bl	80007d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f9e:	490c      	ldr	r1, [pc, #48]	; (8006fd0 <MX_USB_DEVICE_Init+0x5c>)
 8006fa0:	4809      	ldr	r0, [pc, #36]	; (8006fc8 <MX_USB_DEVICE_Init+0x54>)
 8006fa2:	f7fe fe75 	bl	8005c90 <USBD_CDC_RegisterInterface>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fac:	f7f9 fc10 	bl	80007d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <MX_USB_DEVICE_Init+0x54>)
 8006fb2:	f7fe ff30 	bl	8005e16 <USBD_Start>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006fbc:	f7f9 fc08 	bl	80007d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006fc0:	bf00      	nop
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000130 	.word	0x20000130
 8006fc8:	20000374 	.word	0x20000374
 8006fcc:	20000018 	.word	0x20000018
 8006fd0:	2000011c 	.word	0x2000011c

08006fd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4905      	ldr	r1, [pc, #20]	; (8006ff0 <CDC_Init_FS+0x1c>)
 8006fdc:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <CDC_Init_FS+0x20>)
 8006fde:	f7fe fe6c 	bl	8005cba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fe2:	4905      	ldr	r1, [pc, #20]	; (8006ff8 <CDC_Init_FS+0x24>)
 8006fe4:	4803      	ldr	r0, [pc, #12]	; (8006ff4 <CDC_Init_FS+0x20>)
 8006fe6:	f7fe fe81 	bl	8005cec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000e44 	.word	0x20000e44
 8006ff4:	20000374 	.word	0x20000374
 8006ff8:	20000644 	.word	0x20000644

08006ffc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007000:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
 8007018:	4613      	mov	r3, r2
 800701a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b23      	cmp	r3, #35	; 0x23
 8007020:	d84a      	bhi.n	80070b8 <CDC_Control_FS+0xac>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <CDC_Control_FS+0x1c>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	080070b9 	.word	0x080070b9
 800702c:	080070b9 	.word	0x080070b9
 8007030:	080070b9 	.word	0x080070b9
 8007034:	080070b9 	.word	0x080070b9
 8007038:	080070b9 	.word	0x080070b9
 800703c:	080070b9 	.word	0x080070b9
 8007040:	080070b9 	.word	0x080070b9
 8007044:	080070b9 	.word	0x080070b9
 8007048:	080070b9 	.word	0x080070b9
 800704c:	080070b9 	.word	0x080070b9
 8007050:	080070b9 	.word	0x080070b9
 8007054:	080070b9 	.word	0x080070b9
 8007058:	080070b9 	.word	0x080070b9
 800705c:	080070b9 	.word	0x080070b9
 8007060:	080070b9 	.word	0x080070b9
 8007064:	080070b9 	.word	0x080070b9
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070b9 	.word	0x080070b9
 8007070:	080070b9 	.word	0x080070b9
 8007074:	080070b9 	.word	0x080070b9
 8007078:	080070b9 	.word	0x080070b9
 800707c:	080070b9 	.word	0x080070b9
 8007080:	080070b9 	.word	0x080070b9
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070b9 	.word	0x080070b9
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070b9 	.word	0x080070b9
 800709c:	080070b9 	.word	0x080070b9
 80070a0:	080070b9 	.word	0x080070b9
 80070a4:	080070b9 	.word	0x080070b9
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	080070b9 	.word	0x080070b9
 80070b0:	080070b9 	.word	0x080070b9
 80070b4:	080070b9 	.word	0x080070b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070b8:	bf00      	nop
  }

  return (USBD_OK);
 80070ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4805      	ldr	r0, [pc, #20]	; (80070ec <CDC_Receive_FS+0x24>)
 80070d6:	f7fe fe09 	bl	8005cec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070da:	4804      	ldr	r0, [pc, #16]	; (80070ec <CDC_Receive_FS+0x24>)
 80070dc:	f7fe fe1a 	bl	8005d14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80070e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000374 	.word	0x20000374

080070f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2212      	movs	r2, #18
 8007124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007126:	4b03      	ldr	r3, [pc, #12]	; (8007134 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	2000014c 	.word	0x2000014c

08007138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	6039      	str	r1, [r7, #0]
 8007142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2204      	movs	r2, #4
 8007148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800714a:	4b03      	ldr	r3, [pc, #12]	; (8007158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20000160 	.word	0x20000160

0800715c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4907      	ldr	r1, [pc, #28]	; (8007190 <USBD_FS_ProductStrDescriptor+0x34>)
 8007172:	4808      	ldr	r0, [pc, #32]	; (8007194 <USBD_FS_ProductStrDescriptor+0x38>)
 8007174:	f7ff fe1d 	bl	8006db2 <USBD_GetString>
 8007178:	e004      	b.n	8007184 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	4904      	ldr	r1, [pc, #16]	; (8007190 <USBD_FS_ProductStrDescriptor+0x34>)
 800717e:	4805      	ldr	r0, [pc, #20]	; (8007194 <USBD_FS_ProductStrDescriptor+0x38>)
 8007180:	f7ff fe17 	bl	8006db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20001644 	.word	0x20001644
 8007194:	08007b38 	.word	0x08007b38

08007198 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	4904      	ldr	r1, [pc, #16]	; (80071b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071a8:	4804      	ldr	r0, [pc, #16]	; (80071bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071aa:	f7ff fe02 	bl	8006db2 <USBD_GetString>
  return USBD_StrDesc;
 80071ae:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20001644 	.word	0x20001644
 80071bc:	08007b50 	.word	0x08007b50

080071c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	221a      	movs	r2, #26
 80071d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071d2:	f000 f843 	bl	800725c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071d6:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20000164 	.word	0x20000164

080071e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	4907      	ldr	r1, [pc, #28]	; (8007218 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071fa:	4808      	ldr	r0, [pc, #32]	; (800721c <USBD_FS_ConfigStrDescriptor+0x38>)
 80071fc:	f7ff fdd9 	bl	8006db2 <USBD_GetString>
 8007200:	e004      	b.n	800720c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4904      	ldr	r1, [pc, #16]	; (8007218 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007208:	f7ff fdd3 	bl	8006db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20001644 	.word	0x20001644
 800721c:	08007b64 	.word	0x08007b64

08007220 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4907      	ldr	r1, [pc, #28]	; (8007254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007236:	4808      	ldr	r0, [pc, #32]	; (8007258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007238:	f7ff fdbb 	bl	8006db2 <USBD_GetString>
 800723c:	e004      	b.n	8007248 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007244:	f7ff fdb5 	bl	8006db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20001644 	.word	0x20001644
 8007258:	08007b70 	.word	0x08007b70

0800725c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <Get_SerialNum+0x44>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007268:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <Get_SerialNum+0x48>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800726e:	4b0e      	ldr	r3, [pc, #56]	; (80072a8 <Get_SerialNum+0x4c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007282:	2208      	movs	r2, #8
 8007284:	4909      	ldr	r1, [pc, #36]	; (80072ac <Get_SerialNum+0x50>)
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f814 	bl	80072b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800728c:	2204      	movs	r2, #4
 800728e:	4908      	ldr	r1, [pc, #32]	; (80072b0 <Get_SerialNum+0x54>)
 8007290:	68b8      	ldr	r0, [r7, #8]
 8007292:	f000 f80f 	bl	80072b4 <IntToUnicode>
  }
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	1fff7a10 	.word	0x1fff7a10
 80072a4:	1fff7a14 	.word	0x1fff7a14
 80072a8:	1fff7a18 	.word	0x1fff7a18
 80072ac:	20000166 	.word	0x20000166
 80072b0:	20000176 	.word	0x20000176

080072b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072c6:	2300      	movs	r3, #0
 80072c8:	75fb      	strb	r3, [r7, #23]
 80072ca:	e027      	b.n	800731c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	0f1b      	lsrs	r3, r3, #28
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	d80b      	bhi.n	80072ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	0f1b      	lsrs	r3, r3, #28
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	4619      	mov	r1, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	440b      	add	r3, r1
 80072e4:	3230      	adds	r2, #48	; 0x30
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	e00a      	b.n	8007302 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	0f1b      	lsrs	r3, r3, #28
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4619      	mov	r1, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	440b      	add	r3, r1
 80072fc:	3237      	adds	r2, #55	; 0x37
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	3301      	adds	r3, #1
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4413      	add	r3, r2
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	3301      	adds	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
 800731c:	7dfa      	ldrb	r2, [r7, #23]
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	429a      	cmp	r2, r3
 8007322:	d3d3      	bcc.n	80072cc <IntToUnicode+0x18>
  }
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	60da      	str	r2, [r3, #12]
 8007346:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007350:	d13a      	bne.n	80073c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	4b1e      	ldr	r3, [pc, #120]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	6313      	str	r3, [r2, #48]	; 0x30
 8007362:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800736e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007374:	2302      	movs	r3, #2
 8007376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007378:	2300      	movs	r3, #0
 800737a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800737c:	2303      	movs	r3, #3
 800737e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007380:	230a      	movs	r3, #10
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	4619      	mov	r1, r3
 800738a:	4812      	ldr	r0, [pc, #72]	; (80073d4 <HAL_PCD_MspInit+0xa4>)
 800738c:	f7fa f85c 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 8007392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007394:	4a0e      	ldr	r2, [pc, #56]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 8007396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800739a:	6353      	str	r3, [r2, #52]	; 0x34
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	4a0a      	ldr	r2, [pc, #40]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 80073a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073aa:	6453      	str	r3, [r2, #68]	; 0x44
 80073ac:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <HAL_PCD_MspInit+0xa0>)
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073b8:	2200      	movs	r2, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	2043      	movs	r0, #67	; 0x43
 80073be:	f7f9 fd02 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073c2:	2043      	movs	r0, #67	; 0x43
 80073c4:	f7f9 fd1b 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073c8:	bf00      	nop
 80073ca:	3728      	adds	r7, #40	; 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40023800 	.word	0x40023800
 80073d4:	40020000 	.word	0x40020000

080073d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fe fd5c 	bl	8005eac <USBD_LL_SetupStage>
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800740e:	78fa      	ldrb	r2, [r7, #3]
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	440b      	add	r3, r1
 800741c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	4619      	mov	r1, r3
 8007426:	f7fe fd94 	bl	8005f52 <USBD_LL_DataOutStage>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	3348      	adds	r3, #72	; 0x48
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	4619      	mov	r1, r3
 800745a:	f7fe fddd 	bl	8006018 <USBD_LL_DataInStage>
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fee1 	bl	800623c <USBD_LL_SOF>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
 800749a:	e008      	b.n	80074ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d102      	bne.n	80074aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80074a4:	2301      	movs	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	e001      	b.n	80074ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80074aa:	f7f9 f991 	bl	80007d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b4:	7bfa      	ldrb	r2, [r7, #15]
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fe84 	bl	80061c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fe3d 	bl	8006144 <USBD_LL_Reset>
}
 80074ca:	bf00      	nop
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fe7f 	bl	80061e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <HAL_PCD_SuspendCallback+0x48>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a03      	ldr	r2, [pc, #12]	; (800751c <HAL_PCD_SuspendCallback+0x48>)
 800750e:	f043 0306 	orr.w	r3, r3, #6
 8007512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	e000ed00 	.word	0xe000ed00

08007520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fe6e 	bl	8006210 <USBD_LL_Resume>
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	4611      	mov	r1, r2
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fe99 	bl	800628a <USBD_LL_IsoOUTIncomplete>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fe7a 	bl	8006270 <USBD_LL_IsoINIncomplete>
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fe86 	bl	80062a4 <USBD_LL_DevConnected>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fe83 	bl	80062ba <USBD_LL_DevDisconnected>
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d13c      	bne.n	8007646 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <USBD_LL_Init+0x94>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <USBD_LL_Init+0x94>)
 80075d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075dc:	4b1c      	ldr	r3, [pc, #112]	; (8007650 <USBD_LL_Init+0x94>)
 80075de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <USBD_LL_Init+0x94>)
 80075e6:	2204      	movs	r2, #4
 80075e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075ea:	4b19      	ldr	r3, [pc, #100]	; (8007650 <USBD_LL_Init+0x94>)
 80075ec:	2202      	movs	r2, #2
 80075ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <USBD_LL_Init+0x94>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075f6:	4b16      	ldr	r3, [pc, #88]	; (8007650 <USBD_LL_Init+0x94>)
 80075f8:	2202      	movs	r2, #2
 80075fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075fc:	4b14      	ldr	r3, [pc, #80]	; (8007650 <USBD_LL_Init+0x94>)
 80075fe:	2200      	movs	r2, #0
 8007600:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <USBD_LL_Init+0x94>)
 8007604:	2200      	movs	r2, #0
 8007606:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007608:	4b11      	ldr	r3, [pc, #68]	; (8007650 <USBD_LL_Init+0x94>)
 800760a:	2200      	movs	r2, #0
 800760c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800760e:	4b10      	ldr	r3, [pc, #64]	; (8007650 <USBD_LL_Init+0x94>)
 8007610:	2200      	movs	r2, #0
 8007612:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007614:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <USBD_LL_Init+0x94>)
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800761a:	480d      	ldr	r0, [pc, #52]	; (8007650 <USBD_LL_Init+0x94>)
 800761c:	f7fa f8f2 	bl	8001804 <HAL_PCD_Init>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007626:	f7f9 f8d3 	bl	80007d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800762a:	2180      	movs	r1, #128	; 0x80
 800762c:	4808      	ldr	r0, [pc, #32]	; (8007650 <USBD_LL_Init+0x94>)
 800762e:	f7fb fa50 	bl	8002ad2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007632:	2240      	movs	r2, #64	; 0x40
 8007634:	2100      	movs	r1, #0
 8007636:	4806      	ldr	r0, [pc, #24]	; (8007650 <USBD_LL_Init+0x94>)
 8007638:	f7fb fa04 	bl	8002a44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	2101      	movs	r1, #1
 8007640:	4803      	ldr	r0, [pc, #12]	; (8007650 <USBD_LL_Init+0x94>)
 8007642:	f7fb f9ff 	bl	8002a44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20001844 	.word	0x20001844

08007654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800766a:	4618      	mov	r0, r3
 800766c:	f7fa f9e7 	bl	8001a3e <HAL_PCD_Start>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f92a 	bl	80078d0 <USBD_Get_USB_Status>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007680:	7bbb      	ldrb	r3, [r7, #14]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	4608      	mov	r0, r1
 8007694:	4611      	mov	r1, r2
 8007696:	461a      	mov	r2, r3
 8007698:	4603      	mov	r3, r0
 800769a:	70fb      	strb	r3, [r7, #3]
 800769c:	460b      	mov	r3, r1
 800769e:	70bb      	strb	r3, [r7, #2]
 80076a0:	4613      	mov	r3, r2
 80076a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076b2:	78bb      	ldrb	r3, [r7, #2]
 80076b4:	883a      	ldrh	r2, [r7, #0]
 80076b6:	78f9      	ldrb	r1, [r7, #3]
 80076b8:	f7fa fdcb 	bl	8002252 <HAL_PCD_EP_Open>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 f904 	bl	80078d0 <USBD_Get_USB_Status>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fa fe14 	bl	8002322 <HAL_PCD_EP_Close>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f8e5 	bl	80078d0 <USBD_Get_USB_Status>
 8007706:	4603      	mov	r3, r0
 8007708:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800770a:	7bbb      	ldrb	r3, [r7, #14]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7fa feec 	bl	8002510 <HAL_PCD_EP_SetStall>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f8c6 	bl	80078d0 <USBD_Get_USB_Status>
 8007744:	4603      	mov	r3, r0
 8007746:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007748:	7bbb      	ldrb	r3, [r7, #14]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f7fa ff31 	bl	80025d8 <HAL_PCD_EP_ClrStall>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 f8a7 	bl	80078d0 <USBD_Get_USB_Status>
 8007782:	4603      	mov	r3, r0
 8007784:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007786:	7bbb      	ldrb	r3, [r7, #14]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077a2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80077a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da0b      	bge.n	80077c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	4613      	mov	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	333e      	adds	r3, #62	; 0x3e
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	e00b      	b.n	80077dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7fa fcfe 	bl	8002208 <HAL_PCD_SetAddress>
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f85c 	bl	80078d0 <USBD_Get_USB_Status>
 8007818:	4603      	mov	r3, r0
 800781a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800781c:	7bbb      	ldrb	r3, [r7, #14]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	460b      	mov	r3, r1
 8007834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007844:	7af9      	ldrb	r1, [r7, #11]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	f7fa fe17 	bl	800247c <HAL_PCD_EP_Transmit>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 f83b 	bl	80078d0 <USBD_Get_USB_Status>
 800785a:	4603      	mov	r3, r0
 800785c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800785e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	460b      	mov	r3, r1
 8007876:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007886:	7af9      	ldrb	r1, [r7, #11]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	f7fa fd93 	bl	80023b6 <HAL_PCD_EP_Receive>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f81a 	bl	80078d0 <USBD_Get_USB_Status>
 800789c:	4603      	mov	r3, r0
 800789e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80078a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fa fdc3 	bl	800244c <HAL_PCD_EP_GetRxCount>
 80078c6:	4603      	mov	r3, r0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d817      	bhi.n	8007914 <USBD_Get_USB_Status+0x44>
 80078e4:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <USBD_Get_USB_Status+0x1c>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	080078fd 	.word	0x080078fd
 80078f0:	08007903 	.word	0x08007903
 80078f4:	08007909 	.word	0x08007909
 80078f8:	0800790f 	.word	0x0800790f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007900:	e00b      	b.n	800791a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
    break;
 8007906:	e008      	b.n	800791a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007908:	2301      	movs	r3, #1
 800790a:	73fb      	strb	r3, [r7, #15]
    break;
 800790c:	e005      	b.n	800791a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800790e:	2303      	movs	r3, #3
 8007910:	73fb      	strb	r3, [r7, #15]
    break;
 8007912:	e002      	b.n	800791a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	73fb      	strb	r3, [r7, #15]
    break;
 8007918:	bf00      	nop
  }
  return usb_status;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <__errno>:
 8007928:	4b01      	ldr	r3, [pc, #4]	; (8007930 <__errno+0x8>)
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000180 	.word	0x20000180

08007934 <__libc_init_array>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4e0d      	ldr	r6, [pc, #52]	; (800796c <__libc_init_array+0x38>)
 8007938:	4c0d      	ldr	r4, [pc, #52]	; (8007970 <__libc_init_array+0x3c>)
 800793a:	1ba4      	subs	r4, r4, r6
 800793c:	10a4      	asrs	r4, r4, #2
 800793e:	2500      	movs	r5, #0
 8007940:	42a5      	cmp	r5, r4
 8007942:	d109      	bne.n	8007958 <__libc_init_array+0x24>
 8007944:	4e0b      	ldr	r6, [pc, #44]	; (8007974 <__libc_init_array+0x40>)
 8007946:	4c0c      	ldr	r4, [pc, #48]	; (8007978 <__libc_init_array+0x44>)
 8007948:	f000 f8ea 	bl	8007b20 <_init>
 800794c:	1ba4      	subs	r4, r4, r6
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	2500      	movs	r5, #0
 8007952:	42a5      	cmp	r5, r4
 8007954:	d105      	bne.n	8007962 <__libc_init_array+0x2e>
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800795c:	4798      	blx	r3
 800795e:	3501      	adds	r5, #1
 8007960:	e7ee      	b.n	8007940 <__libc_init_array+0xc>
 8007962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007966:	4798      	blx	r3
 8007968:	3501      	adds	r5, #1
 800796a:	e7f2      	b.n	8007952 <__libc_init_array+0x1e>
 800796c:	08007ba8 	.word	0x08007ba8
 8007970:	08007ba8 	.word	0x08007ba8
 8007974:	08007ba8 	.word	0x08007ba8
 8007978:	08007bac 	.word	0x08007bac

0800797c <malloc>:
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <malloc+0xc>)
 800797e:	4601      	mov	r1, r0
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	f000 b861 	b.w	8007a48 <_malloc_r>
 8007986:	bf00      	nop
 8007988:	20000180 	.word	0x20000180

0800798c <free>:
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <free+0xc>)
 800798e:	4601      	mov	r1, r0
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	f000 b80b 	b.w	80079ac <_free_r>
 8007996:	bf00      	nop
 8007998:	20000180 	.word	0x20000180

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <_free_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4605      	mov	r5, r0
 80079b0:	2900      	cmp	r1, #0
 80079b2:	d045      	beq.n	8007a40 <_free_r+0x94>
 80079b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b8:	1f0c      	subs	r4, r1, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfb8      	it	lt
 80079be:	18e4      	addlt	r4, r4, r3
 80079c0:	f000 f8ac 	bl	8007b1c <__malloc_lock>
 80079c4:	4a1f      	ldr	r2, [pc, #124]	; (8007a44 <_free_r+0x98>)
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	4610      	mov	r0, r2
 80079ca:	b933      	cbnz	r3, 80079da <_free_r+0x2e>
 80079cc:	6063      	str	r3, [r4, #4]
 80079ce:	6014      	str	r4, [r2, #0]
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d6:	f000 b8a2 	b.w	8007b1e <__malloc_unlock>
 80079da:	42a3      	cmp	r3, r4
 80079dc:	d90c      	bls.n	80079f8 <_free_r+0x4c>
 80079de:	6821      	ldr	r1, [r4, #0]
 80079e0:	1862      	adds	r2, r4, r1
 80079e2:	4293      	cmp	r3, r2
 80079e4:	bf04      	itt	eq
 80079e6:	681a      	ldreq	r2, [r3, #0]
 80079e8:	685b      	ldreq	r3, [r3, #4]
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	bf04      	itt	eq
 80079ee:	1852      	addeq	r2, r2, r1
 80079f0:	6022      	streq	r2, [r4, #0]
 80079f2:	6004      	str	r4, [r0, #0]
 80079f4:	e7ec      	b.n	80079d0 <_free_r+0x24>
 80079f6:	4613      	mov	r3, r2
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	b10a      	cbz	r2, 8007a00 <_free_r+0x54>
 80079fc:	42a2      	cmp	r2, r4
 80079fe:	d9fa      	bls.n	80079f6 <_free_r+0x4a>
 8007a00:	6819      	ldr	r1, [r3, #0]
 8007a02:	1858      	adds	r0, r3, r1
 8007a04:	42a0      	cmp	r0, r4
 8007a06:	d10b      	bne.n	8007a20 <_free_r+0x74>
 8007a08:	6820      	ldr	r0, [r4, #0]
 8007a0a:	4401      	add	r1, r0
 8007a0c:	1858      	adds	r0, r3, r1
 8007a0e:	4282      	cmp	r2, r0
 8007a10:	6019      	str	r1, [r3, #0]
 8007a12:	d1dd      	bne.n	80079d0 <_free_r+0x24>
 8007a14:	6810      	ldr	r0, [r2, #0]
 8007a16:	6852      	ldr	r2, [r2, #4]
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	4401      	add	r1, r0
 8007a1c:	6019      	str	r1, [r3, #0]
 8007a1e:	e7d7      	b.n	80079d0 <_free_r+0x24>
 8007a20:	d902      	bls.n	8007a28 <_free_r+0x7c>
 8007a22:	230c      	movs	r3, #12
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	e7d3      	b.n	80079d0 <_free_r+0x24>
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	1821      	adds	r1, r4, r0
 8007a2c:	428a      	cmp	r2, r1
 8007a2e:	bf04      	itt	eq
 8007a30:	6811      	ldreq	r1, [r2, #0]
 8007a32:	6852      	ldreq	r2, [r2, #4]
 8007a34:	6062      	str	r2, [r4, #4]
 8007a36:	bf04      	itt	eq
 8007a38:	1809      	addeq	r1, r1, r0
 8007a3a:	6021      	streq	r1, [r4, #0]
 8007a3c:	605c      	str	r4, [r3, #4]
 8007a3e:	e7c7      	b.n	80079d0 <_free_r+0x24>
 8007a40:	bd38      	pop	{r3, r4, r5, pc}
 8007a42:	bf00      	nop
 8007a44:	20000208 	.word	0x20000208

08007a48 <_malloc_r>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	1ccd      	adds	r5, r1, #3
 8007a4c:	f025 0503 	bic.w	r5, r5, #3
 8007a50:	3508      	adds	r5, #8
 8007a52:	2d0c      	cmp	r5, #12
 8007a54:	bf38      	it	cc
 8007a56:	250c      	movcc	r5, #12
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	db01      	blt.n	8007a62 <_malloc_r+0x1a>
 8007a5e:	42a9      	cmp	r1, r5
 8007a60:	d903      	bls.n	8007a6a <_malloc_r+0x22>
 8007a62:	230c      	movs	r3, #12
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	2000      	movs	r0, #0
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	f000 f857 	bl	8007b1c <__malloc_lock>
 8007a6e:	4a21      	ldr	r2, [pc, #132]	; (8007af4 <_malloc_r+0xac>)
 8007a70:	6814      	ldr	r4, [r2, #0]
 8007a72:	4621      	mov	r1, r4
 8007a74:	b991      	cbnz	r1, 8007a9c <_malloc_r+0x54>
 8007a76:	4c20      	ldr	r4, [pc, #128]	; (8007af8 <_malloc_r+0xb0>)
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	b91b      	cbnz	r3, 8007a84 <_malloc_r+0x3c>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f000 f83d 	bl	8007afc <_sbrk_r>
 8007a82:	6020      	str	r0, [r4, #0]
 8007a84:	4629      	mov	r1, r5
 8007a86:	4630      	mov	r0, r6
 8007a88:	f000 f838 	bl	8007afc <_sbrk_r>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d124      	bne.n	8007ada <_malloc_r+0x92>
 8007a90:	230c      	movs	r3, #12
 8007a92:	6033      	str	r3, [r6, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 f842 	bl	8007b1e <__malloc_unlock>
 8007a9a:	e7e4      	b.n	8007a66 <_malloc_r+0x1e>
 8007a9c:	680b      	ldr	r3, [r1, #0]
 8007a9e:	1b5b      	subs	r3, r3, r5
 8007aa0:	d418      	bmi.n	8007ad4 <_malloc_r+0x8c>
 8007aa2:	2b0b      	cmp	r3, #11
 8007aa4:	d90f      	bls.n	8007ac6 <_malloc_r+0x7e>
 8007aa6:	600b      	str	r3, [r1, #0]
 8007aa8:	50cd      	str	r5, [r1, r3]
 8007aaa:	18cc      	adds	r4, r1, r3
 8007aac:	4630      	mov	r0, r6
 8007aae:	f000 f836 	bl	8007b1e <__malloc_unlock>
 8007ab2:	f104 000b 	add.w	r0, r4, #11
 8007ab6:	1d23      	adds	r3, r4, #4
 8007ab8:	f020 0007 	bic.w	r0, r0, #7
 8007abc:	1ac3      	subs	r3, r0, r3
 8007abe:	d0d3      	beq.n	8007a68 <_malloc_r+0x20>
 8007ac0:	425a      	negs	r2, r3
 8007ac2:	50e2      	str	r2, [r4, r3]
 8007ac4:	e7d0      	b.n	8007a68 <_malloc_r+0x20>
 8007ac6:	428c      	cmp	r4, r1
 8007ac8:	684b      	ldr	r3, [r1, #4]
 8007aca:	bf16      	itet	ne
 8007acc:	6063      	strne	r3, [r4, #4]
 8007ace:	6013      	streq	r3, [r2, #0]
 8007ad0:	460c      	movne	r4, r1
 8007ad2:	e7eb      	b.n	8007aac <_malloc_r+0x64>
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	6849      	ldr	r1, [r1, #4]
 8007ad8:	e7cc      	b.n	8007a74 <_malloc_r+0x2c>
 8007ada:	1cc4      	adds	r4, r0, #3
 8007adc:	f024 0403 	bic.w	r4, r4, #3
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d005      	beq.n	8007af0 <_malloc_r+0xa8>
 8007ae4:	1a21      	subs	r1, r4, r0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f000 f808 	bl	8007afc <_sbrk_r>
 8007aec:	3001      	adds	r0, #1
 8007aee:	d0cf      	beq.n	8007a90 <_malloc_r+0x48>
 8007af0:	6025      	str	r5, [r4, #0]
 8007af2:	e7db      	b.n	8007aac <_malloc_r+0x64>
 8007af4:	20000208 	.word	0x20000208
 8007af8:	2000020c 	.word	0x2000020c

08007afc <_sbrk_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4c06      	ldr	r4, [pc, #24]	; (8007b18 <_sbrk_r+0x1c>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4605      	mov	r5, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	f7f8 ff96 	bl	8000a38 <_sbrk>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_sbrk_r+0x1a>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_sbrk_r+0x1a>
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	20001c4c 	.word	0x20001c4c

08007b1c <__malloc_lock>:
 8007b1c:	4770      	bx	lr

08007b1e <__malloc_unlock>:
 8007b1e:	4770      	bx	lr

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
