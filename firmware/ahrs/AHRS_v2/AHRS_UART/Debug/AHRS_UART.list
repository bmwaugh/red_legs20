
AHRS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d08  08007d08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a6c  200001e4  08007ef4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c50  08007ef4  00021c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c13  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003036  00000000  00000000  00034e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00038c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ad2  00000000  00000000  00039868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e39f  00000000  00000000  0005f33a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4da1  00000000  00000000  0006d6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014247a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  001424f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e4 	.word	0x200001e4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007c80 	.word	0x08007c80

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001e8 	.word	0x200001e8
 80001e8:	08007c80 	.word	0x08007c80

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb10 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f824 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8de 	bl	80006c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f8b4 	bl	8000678 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f888 	bl	8000624 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000514:	f006 fdde 	bl	80070d4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	data = HAL_UART_Receive(&huart2, (uint8_t *)rxData, 90,10);
 8000518:	230a      	movs	r3, #10
 800051a:	225a      	movs	r2, #90	; 0x5a
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <main+0x44>)
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x48>)
 8000520:	f003 f846 	bl	80035b0 <HAL_UART_Receive>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <main+0x4c>)
 800052a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_13);
 800052c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x50>)
 8000532:	f001 f956 	bl	80017e2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053a:	f000 fb51 	bl	8000be0 <HAL_Delay>
	  	data = HAL_UART_Receive(&huart2, (uint8_t *)rxData, 90,10);
 800053e:	e7eb      	b.n	8000518 <main+0x1c>
 8000540:	20000210 	.word	0x20000210
 8000544:	20000330 	.word	0x20000330
 8000548:	2000032c 	.word	0x2000032c
 800054c:	40020000 	.word	0x40020000

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f007 facc 	bl	8007afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c8:	2348      	movs	r3, #72	; 0x48
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d0:	2303      	movs	r3, #3
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 faa1 	bl	8002b20 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e4:	f000 f8fe 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2102      	movs	r1, #2
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fcfb 	bl	8003000 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000610:	f000 f8e8 	bl	80007e4 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART2_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800065c:	f002 fec2 	bl	80033e4 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f8bd 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000330 	.word	0x20000330
 8000674:	40004400 	.word	0x40004400

08000678 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_DMA_Init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <MX_DMA_Init+0x4c>)
 8000688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_DMA_Init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f000 fb9b 	bl	8000dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 fbb4 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2011      	movs	r0, #17
 80006b0:	f000 fb93 	bl	8000dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006b4:	2011      	movs	r0, #17
 80006b6:	f000 fbac 	bl	8000e12 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b32      	ldr	r3, [pc, #200]	; (80007ac <MX_GPIO_Init+0xe4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a31      	ldr	r2, [pc, #196]	; (80007ac <MX_GPIO_Init+0xe4>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <MX_GPIO_Init+0xe4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_GPIO_Init+0xe4>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000756:	f001 f82b 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000760:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0xec>)
 8000762:	f001 f825 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000766:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_GPIO_Init+0xe8>)
 8000780:	f000 fe6c 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0xec>)
 800079e:	f000 fe5d 	bl	800145c <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40021800 	.word	0x40021800

080007b8 <HAL_UART_RxCpltCallback>:
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_UART_Transmit(&huart2, (uint8_t *)rxData, strlen(rxData), 10);
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <HAL_UART_RxCpltCallback+0x24>)
 80007c2:	f7ff fd13 	bl	80001ec <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	230a      	movs	r3, #10
 80007cc:	4903      	ldr	r1, [pc, #12]	; (80007dc <HAL_UART_RxCpltCallback+0x24>)
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <HAL_UART_RxCpltCallback+0x28>)
 80007d0:	f002 fe55 	bl	800347e <HAL_UART_Transmit>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000210 	.word	0x20000210
 80007e0:	20000330 	.word	0x20000330

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a4b      	ldr	r2, [pc, #300]	; (8000990 <HAL_UART_MspInit+0x14c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	f040 8090 	bne.w	8000988 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	4b49      	ldr	r3, [pc, #292]	; (8000994 <HAL_UART_MspInit+0x150>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a48      	ldr	r2, [pc, #288]	; (8000994 <HAL_UART_MspInit+0x150>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b46      	ldr	r3, [pc, #280]	; (8000994 <HAL_UART_MspInit+0x150>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b42      	ldr	r3, [pc, #264]	; (8000994 <HAL_UART_MspInit+0x150>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a41      	ldr	r2, [pc, #260]	; (8000994 <HAL_UART_MspInit+0x150>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b3f      	ldr	r3, [pc, #252]	; (8000994 <HAL_UART_MspInit+0x150>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008a0:	230c      	movs	r3, #12
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b0:	2307      	movs	r3, #7
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4837      	ldr	r0, [pc, #220]	; (8000998 <HAL_UART_MspInit+0x154>)
 80008bc:	f000 fdce 	bl	800145c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80008c0:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_UART_MspInit+0x158>)
 80008c2:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <HAL_UART_MspInit+0x15c>)
 80008c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <HAL_UART_MspInit+0x158>)
 80008c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_UART_MspInit+0x158>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <HAL_UART_MspInit+0x158>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_UART_MspInit+0x158>)
 80008dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <HAL_UART_MspInit+0x158>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <HAL_UART_MspInit+0x158>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <HAL_UART_MspInit+0x158>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_UART_MspInit+0x158>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <HAL_UART_MspInit+0x158>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <HAL_UART_MspInit+0x158>)
 8000902:	f000 faa1 	bl	8000e48 <HAL_DMA_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800090c:	f7ff ff6a 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <HAL_UART_MspInit+0x158>)
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4a21      	ldr	r2, [pc, #132]	; (800099c <HAL_UART_MspInit+0x158>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <HAL_UART_MspInit+0x160>)
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_UART_MspInit+0x164>)
 8000920:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000928:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <HAL_UART_MspInit+0x160>)
 800092c:	2240      	movs	r2, #64	; 0x40
 800092e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_UART_MspInit+0x160>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x160>)
 800095e:	f000 fa73 	bl	8000e48 <HAL_DMA_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000968:	f7ff ff3c 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <HAL_UART_MspInit+0x160>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2026      	movs	r0, #38	; 0x26
 800097e:	f000 fa2c 	bl	8000dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 fa45 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40004400 	.word	0x40004400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	2000026c 	.word	0x2000026c
 80009a0:	40026088 	.word	0x40026088
 80009a4:	200002cc 	.word	0x200002cc
 80009a8:	400260a0 	.word	0x400260a0

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <DMA1_Stream5_IRQHandler+0x10>)
 8000a02:	f000 faf1 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000026c 	.word	0x2000026c

08000a10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DMA1_Stream6_IRQHandler+0x10>)
 8000a16:	f000 fae7 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002cc 	.word	0x200002cc

08000a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USART2_IRQHandler+0x10>)
 8000a2a:	f002 fe67 	bl	80036fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000330 	.word	0x20000330

08000a38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <OTG_FS_IRQHandler+0x10>)
 8000a3e:	f001 f83b 	bl	8001ab8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001844 	.word	0x20001844

08000a4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x50>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x16>
		heap_end = &end;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <_sbrk+0x50>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <_sbrk+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_sbrk+0x50>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <_sbrk+0x50>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	466a      	mov	r2, sp
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d907      	bls.n	8000a86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a76:	f007 f807 	bl	8007a88 <__errno>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a84:	e006      	b.n	8000a94 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <_sbrk+0x50>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <_sbrk+0x50>)
 8000a90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000200 	.word	0x20000200
 8000aa0:	20001c50 	.word	0x20001c50

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <SystemInit+0x28>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <SystemInit+0x28>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SystemInit+0x28>)
 8000aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000abe:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ad4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ad6:	e003      	b.n	8000ae0 <LoopCopyDataInit>

08000ad8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000adc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ade:	3104      	adds	r1, #4

08000ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae8:	d3f6      	bcc.n	8000ad8 <CopyDataInit>
  ldr  r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aec:	e002      	b.n	8000af4 <LoopFillZerobss>

08000aee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000af0:	f842 3b04 	str.w	r3, [r2], #4

08000af4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000af6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af8:	d3f9      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afa:	f7ff ffd3 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f006 ffc9 	bl	8007a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fcfb 	bl	80004fc <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b08:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b0c:	08007d10 	.word	0x08007d10
  ldr  r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b14:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000b18:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000b1c:	20001c50 	.word	0x20001c50

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f939 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe4c 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f951 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 f919 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000370 	.word	0x20000370

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_Delay+0x40>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff29 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff3e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff31 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa2 	bl	8000d80 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff feb8 	bl	8000bc8 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e099      	b.n	8000f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e84:	e00f      	b.n	8000ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e86:	f7ff fe9f 	bl	8000bc8 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d908      	bls.n	8000ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2220      	movs	r2, #32
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e078      	b.n	8000f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e8      	bne.n	8000e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_DMA_Init+0x158>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d107      	bne.n	8000f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f023 0307 	bic.w	r3, r3, #7
 8000f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d117      	bne.n	8000f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00e      	beq.n	8000f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 fa0b 	bl	8001368 <DMA_CheckFifoParam>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d008      	beq.n	8000f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f66:	2301      	movs	r3, #1
 8000f68:	e016      	b.n	8000f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f9c2 	bl	80012fc <DMA_CalcBaseAndBitshift>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f80:	223f      	movs	r2, #63	; 0x3f
 8000f82:	409a      	lsls	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	f010803f 	.word	0xf010803f

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00c      	b.n	8000fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ff4:	4b92      	ldr	r3, [pc, #584]	; (8001240 <HAL_DMA_IRQHandler+0x258>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a92      	ldr	r2, [pc, #584]	; (8001244 <HAL_DMA_IRQHandler+0x25c>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0a9b      	lsrs	r3, r3, #10
 8001000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2208      	movs	r2, #8
 8001014:	409a      	lsls	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01a      	beq.n	8001054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0204 	bic.w	r2, r2, #4
 800103a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	2208      	movs	r2, #8
 8001042:	409a      	lsls	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	2201      	movs	r2, #1
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	f043 0202 	orr.w	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d012      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2204      	movs	r2, #4
 80010ae:	409a      	lsls	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	f043 0204 	orr.w	r2, r3, #4
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	2210      	movs	r2, #16
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d043      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d03c      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	2210      	movs	r2, #16
 80010e4:	409a      	lsls	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d018      	beq.n	800112a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d024      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	4798      	blx	r3
 8001116:	e01f      	b.n	8001158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01b      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
 8001128:	e016      	b.n	8001158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0208 	bic.w	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	2220      	movs	r2, #32
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 808e 	beq.w	8001286 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8086 	beq.w	8001286 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2220      	movs	r2, #32
 8001180:	409a      	lsls	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b05      	cmp	r3, #5
 8001190:	d136      	bne.n	8001200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0216 	bic.w	r2, r2, #22
 80011a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_DMA_IRQHandler+0x1da>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	223f      	movs	r2, #63	; 0x3f
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d07d      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
        }
        return;
 80011fe:	e078      	b.n	80012f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01c      	beq.n	8001248 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	2b00      	cmp	r3, #0
 8001222:	d030      	beq.n	8001286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	e02b      	b.n	8001286 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	2b00      	cmp	r3, #0
 8001234:	d027      	beq.n	8001286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
 800123e:	e022      	b.n	8001286 <HAL_DMA_IRQHandler+0x29e>
 8001240:	20000000 	.word	0x20000000
 8001244:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0210 	bic.w	r2, r2, #16
 8001264:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128a:	2b00      	cmp	r3, #0
 800128c:	d032      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d022      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2205      	movs	r2, #5
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d307      	bcc.n	80012ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f2      	bne.n	80012b2 <HAL_DMA_IRQHandler+0x2ca>
 80012cc:	e000      	b.n	80012d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
 80012f0:	e000      	b.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80012f2:	bf00      	nop
    }
  }
}
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop

080012fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3b10      	subs	r3, #16
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <DMA_CalcBaseAndBitshift+0x64>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <DMA_CalcBaseAndBitshift+0x68>)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d909      	bls.n	800133e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	1d1a      	adds	r2, r3, #4
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	659a      	str	r2, [r3, #88]	; 0x58
 800133c:	e007      	b.n	800134e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001346:	f023 0303 	bic.w	r3, r3, #3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	aaaaaaab 	.word	0xaaaaaaab
 8001364:	08007cf8 	.word	0x08007cf8

08001368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d11f      	bne.n	80013c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d855      	bhi.n	8001434 <DMA_CheckFifoParam+0xcc>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <DMA_CheckFifoParam+0x28>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013b3 	.word	0x080013b3
 8001398:	080013a1 	.word	0x080013a1
 800139c:	08001435 	.word	0x08001435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d045      	beq.n	8001438 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b0:	e042      	b.n	8001438 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013ba:	d13f      	bne.n	800143c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013c0:	e03c      	b.n	800143c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ca:	d121      	bne.n	8001410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d836      	bhi.n	8001440 <DMA_CheckFifoParam+0xd8>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <DMA_CheckFifoParam+0x70>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080013ef 	.word	0x080013ef
 80013e0:	080013e9 	.word	0x080013e9
 80013e4:	08001401 	.word	0x08001401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
      break;
 80013ec:	e02f      	b.n	800144e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d024      	beq.n	8001444 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013fe:	e021      	b.n	8001444 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001408:	d11e      	bne.n	8001448 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800140e:	e01b      	b.n	8001448 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d902      	bls.n	800141c <DMA_CheckFifoParam+0xb4>
 8001416:	2b03      	cmp	r3, #3
 8001418:	d003      	beq.n	8001422 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800141a:	e018      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
      break;
 8001420:	e015      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00e      	beq.n	800144c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
      break;
 8001432:	e00b      	b.n	800144c <DMA_CheckFifoParam+0xe4>
      break;
 8001434:	bf00      	nop
 8001436:	e00a      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;
 8001438:	bf00      	nop
 800143a:	e008      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;
 800143c:	bf00      	nop
 800143e:	e006      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;
 8001440:	bf00      	nop
 8001442:	e004      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;
 8001444:	bf00      	nop
 8001446:	e002      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;   
 8001448:	bf00      	nop
 800144a:	e000      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;
 800144c:	bf00      	nop
    }
  } 
  
  return status; 
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e177      	b.n	8001768 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 8166 	bne.w	8001762 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d00b      	beq.n	80014b6 <HAL_GPIO_Init+0x5a>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014aa:	2b11      	cmp	r3, #17
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d130      	bne.n	8001518 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 0201 	and.w	r2, r3, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0xfc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d123      	bne.n	80015a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0203 	and.w	r2, r3, #3
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80c0 	beq.w	8001762 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b65      	ldr	r3, [pc, #404]	; (800177c <HAL_GPIO_Init+0x320>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a64      	ldr	r2, [pc, #400]	; (800177c <HAL_GPIO_Init+0x320>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b62      	ldr	r3, [pc, #392]	; (800177c <HAL_GPIO_Init+0x320>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fe:	4a60      	ldr	r2, [pc, #384]	; (8001780 <HAL_GPIO_Init+0x324>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <HAL_GPIO_Init+0x328>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d037      	beq.n	800169a <HAL_GPIO_Init+0x23e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_GPIO_Init+0x32c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d031      	beq.n	8001696 <HAL_GPIO_Init+0x23a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_GPIO_Init+0x330>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d02b      	beq.n	8001692 <HAL_GPIO_Init+0x236>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_GPIO_Init+0x334>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d025      	beq.n	800168e <HAL_GPIO_Init+0x232>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a53      	ldr	r2, [pc, #332]	; (8001794 <HAL_GPIO_Init+0x338>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d01f      	beq.n	800168a <HAL_GPIO_Init+0x22e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_GPIO_Init+0x33c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d019      	beq.n	8001686 <HAL_GPIO_Init+0x22a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_GPIO_Init+0x340>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0x226>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_GPIO_Init+0x344>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00d      	beq.n	800167e <HAL_GPIO_Init+0x222>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <HAL_GPIO_Init+0x348>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_GPIO_Init+0x21e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <HAL_GPIO_Init+0x34c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_Init+0x21a>
 8001672:	2309      	movs	r3, #9
 8001674:	e012      	b.n	800169c <HAL_GPIO_Init+0x240>
 8001676:	230a      	movs	r3, #10
 8001678:	e010      	b.n	800169c <HAL_GPIO_Init+0x240>
 800167a:	2308      	movs	r3, #8
 800167c:	e00e      	b.n	800169c <HAL_GPIO_Init+0x240>
 800167e:	2307      	movs	r3, #7
 8001680:	e00c      	b.n	800169c <HAL_GPIO_Init+0x240>
 8001682:	2306      	movs	r3, #6
 8001684:	e00a      	b.n	800169c <HAL_GPIO_Init+0x240>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x240>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x240>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x240>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x240>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x240>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4934      	ldr	r1, [pc, #208]	; (8001780 <HAL_GPIO_Init+0x324>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ba:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <HAL_GPIO_Init+0x350>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016de:	4a33      	ldr	r2, [pc, #204]	; (80017ac <HAL_GPIO_Init+0x350>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_GPIO_Init+0x350>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <HAL_GPIO_Init+0x350>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_GPIO_Init+0x350>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_GPIO_Init+0x350>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_GPIO_Init+0x350>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_GPIO_Init+0x350>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f ae84 	bls.w	8001478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	3724      	adds	r7, #36	; 0x24
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40023800 	.word	0x40023800
 8001780:	40013800 	.word	0x40013800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	40021800 	.word	0x40021800
 80017a0:	40021c00 	.word	0x40021c00
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40022400 	.word	0x40022400
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
 80017bc:	4613      	mov	r3, r2
 80017be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017cc:	e003      	b.n	80017d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	041a      	lsls	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	401a      	ands	r2, r3
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d104      	bne.n	8001806 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001804:	e002      	b.n	800180c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b08f      	sub	sp, #60	; 0x3c
 800181c:	af0a      	add	r7, sp, #40	; 0x28
 800181e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e10f      	b.n	8001a4a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f005 fe23 	bl	8007490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fe58 	bl	800451e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	687e      	ldr	r6, [r7, #4]
 8001876:	466d      	mov	r5, sp
 8001878:	f106 0410 	add.w	r4, r6, #16
 800187c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001888:	e885 0003 	stmia.w	r5, {r0, r1}
 800188c:	1d33      	adds	r3, r6, #4
 800188e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f002 fd2f 	bl	80042f4 <USB_CoreInit>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0d0      	b.n	8001a4a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fe46 	bl	8004540 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e04a      	b.n	8001950 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	333d      	adds	r3, #61	; 0x3d
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	333c      	adds	r3, #60	; 0x3c
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	b298      	uxth	r0, r3
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	4602      	mov	r2, r0
 80018f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	333f      	adds	r3, #63	; 0x3f
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3344      	adds	r3, #68	; 0x44
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3348      	adds	r3, #72	; 0x48
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3350      	adds	r3, #80	; 0x50
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	3301      	adds	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3af      	bcc.n	80018ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e044      	b.n	80019ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	3301      	adds	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3b5      	bcc.n	8001960 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	687e      	ldr	r6, [r7, #4]
 80019fc:	466d      	mov	r5, sp
 80019fe:	f106 0410 	add.w	r4, r6, #16
 8001a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a12:	1d33      	adds	r3, r6, #4
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f002 fdbc 	bl	8004594 <USB_DevInit>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00d      	b.n	8001a4a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fdfb 	bl	800563e <USB_DevDisconnect>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_PCD_Start+0x1c>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e020      	b.n	8001ab0 <HAL_PCD_Start+0x5e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d109      	bne.n	8001a92 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fdb9 	bl	800560e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fd2b 	bl	80044fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b08d      	sub	sp, #52	; 0x34
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fe60 	bl	8005794 <USB_GetMode>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 839d 	bne.w	8002216 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fdc4 	bl	800566e <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8393 	beq.w	8002214 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fdbb 	bl	800566e <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 0202 	and.w	r2, r2, #2
 8001b10:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fda9 	bl	800566e <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d161      	bne.n	8001bea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0210 	bic.w	r2, r2, #16
 8001b34:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	3304      	adds	r3, #4
 8001b54:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	0c5b      	lsrs	r3, r3, #17
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d124      	bne.n	8001bac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d035      	beq.n	8001bda <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	6a38      	ldr	r0, [r7, #32]
 8001b82:	f003 fc21 	bl	80053c8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b92:	441a      	add	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba4:	441a      	add	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e016      	b.n	8001bda <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	0c5b      	lsrs	r3, r3, #17
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d110      	bne.n	8001bda <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6a38      	ldr	r0, [r7, #32]
 8001bc4:	f003 fc00 	bl	80053c8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd4:	441a      	add	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0210 	orr.w	r2, r2, #16
 8001be8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fd3d 	bl	800566e <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bfe:	d16e      	bne.n	8001cde <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fd43 	bl	8005694 <USB_ReadDevAllOutEpInterrupt>
 8001c0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c10:	e062      	b.n	8001cd8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d057      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fd68 	bl	80056fc <USB_ReadDevOutEPInterrupt>
 8001c2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00c      	beq.n	8001c52 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c44:	461a      	mov	r2, r3
 8001c46:	2301      	movs	r3, #1
 8001c48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fdb1 	bl	80027b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00c      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 feab 	bl	80029cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2310      	movs	r3, #16
 8001c90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2320      	movs	r3, #32
 8001cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3301      	adds	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d199      	bne.n	8001c12 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fcc3 	bl	800566e <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cf2:	f040 80c0 	bne.w	8001e76 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fce4 	bl	80056c8 <USB_ReadDevAllInEpInterrupt>
 8001d00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d06:	e0b2      	b.n	8001e6e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a7 	beq.w	8001e62 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fd0a 	bl	8005738 <USB_ReadDevInEPInterrupt>
 8001d24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d057      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	2201      	movs	r2, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69f9      	ldr	r1, [r7, #28]
 8001d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d50:	4013      	ands	r3, r2
 8001d52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d60:	461a      	mov	r2, r3
 8001d62:	2301      	movs	r3, #1
 8001d64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d132      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3348      	adds	r3, #72	; 0x48
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4403      	add	r3, r0
 8001d8e:	3344      	adds	r3, #68	; 0x44
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4419      	add	r1, r3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4403      	add	r3, r0
 8001da2:	3348      	adds	r3, #72	; 0x48
 8001da4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d113      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x31c>
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	3350      	adds	r3, #80	; 0x50
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2101      	movs	r1, #1
 8001dd0:	f003 fd12 	bl	80057f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f005 fbd9 	bl	8007592 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df6:	461a      	mov	r2, r3
 8001df8:	2308      	movs	r3, #8
 8001dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e12:	461a      	mov	r2, r3
 8001e14:	2310      	movs	r3, #16
 8001e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fc1b 	bl	8002698 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3301      	adds	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f af49 	bne.w	8001d08 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fbf7 	bl	800566e <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e8a:	d122      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fe27 	bl	8002b08 <HAL_PCDEx_LPM_Callback>
 8001eba:	e002      	b.n	8001ec2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f005 fbdf 	bl	8007680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fbc9 	bl	800566e <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee6:	d112      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f005 fb9b 	bl	8007634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f0c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fbab 	bl	800566e <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f22:	f040 80c7 	bne.w	80020b4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2110      	movs	r1, #16
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fc8b 	bl	800485c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4a:	e056      	b.n	8001ffa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f70:	0151      	lsls	r1, r2, #5
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	440a      	add	r2, r1
 8001f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	461a      	mov	r2, r3
 8001fae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc4:	0151      	lsls	r1, r2, #5
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	440a      	add	r2, r1
 8001fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ff2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
 8002002:	d3a3      	bcc.n	8001f4c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002012:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002016:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2b00      	cmp	r3, #0
 800201e:	d016      	beq.n	800204e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002030:	f043 030b 	orr.w	r3, r3, #11
 8002034:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002046:	f043 030b 	orr.w	r3, r3, #11
 800204a:	6453      	str	r3, [r2, #68]	; 0x44
 800204c:	e015      	b.n	800207a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002060:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002064:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002074:	f043 030b 	orr.w	r3, r3, #11
 8002078:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002088:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800208c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800209e:	461a      	mov	r2, r3
 80020a0:	f003 fbaa 	bl	80057f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fad8 	bl	800566e <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c8:	d124      	bne.n	8002114 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fb6e 	bl	80057b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fc20 	bl	800491e <USB_GetDevSpeed>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681c      	ldr	r4, [r3, #0]
 80020ea:	f001 f947 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80020ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	4620      	mov	r0, r4
 80020fa:	f002 f95d 	bl	80043b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f005 fa6f 	bl	80075e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002112:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 faa8 	bl	800566e <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d10a      	bne.n	800213e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f005 fa4c 	bl	80075c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f002 0208 	and.w	r2, r2, #8
 800213c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fa93 	bl	800566e <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002152:	d10f      	bne.n	8002174 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f005 faae 	bl	80076c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fa78 	bl	800566e <USB_ReadInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002188:	d10f      	bne.n	80021aa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f005 fa81 	bl	800769c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 fa5d 	bl	800566e <USB_ReadInterrupts>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d10a      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f005 fa8f 	bl	80076e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fa47 	bl	800566e <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d115      	bne.n	8002216 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f005 fa7f 	bl	8007700 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e000      	b.n	8002216 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002214:	bf00      	nop
    }
  }
}
 8002216:	3734      	adds	r7, #52	; 0x34
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_PCD_SetAddress+0x1a>
 8002232:	2302      	movs	r3, #2
 8002234:	e013      	b.n	800225e <HAL_PCD_SetAddress+0x42>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f003 f9b7 	bl	80055c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	4608      	mov	r0, r1
 8002270:	4611      	mov	r1, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4603      	mov	r3, r0
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	460b      	mov	r3, r1
 800227a:	803b      	strh	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da0f      	bge.n	80022ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	3338      	adds	r3, #56	; 0x38
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	705a      	strb	r2, [r3, #1]
 80022aa:	e00f      	b.n	80022cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022d8:	883a      	ldrh	r2, [r7, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	78ba      	ldrb	r2, [r7, #2]
 80022e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022f6:	78bb      	ldrb	r3, [r7, #2]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d102      	bne.n	8002302 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_PCD_EP_Open+0xaa>
 800230c:	2302      	movs	r3, #2
 800230e:	e00e      	b.n	800232e <HAL_PCD_EP_Open+0xc8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fb22 	bl	8004968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800232c:	7afb      	ldrb	r3, [r7, #11]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da0f      	bge.n	800236a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 020f 	and.w	r2, r3, #15
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3338      	adds	r3, #56	; 0x38
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3304      	adds	r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	705a      	strb	r2, [r3, #1]
 8002368:	e00f      	b.n	800238a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 020f 	and.w	r2, r3, #15
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_PCD_EP_Close+0x6e>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e00e      	b.n	80023c2 <HAL_PCD_EP_Close+0x8c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 fb60 	bl	8004a78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	460b      	mov	r3, r1
 80023d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 020f 	and.w	r2, r3, #15
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	b2da      	uxtb	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d102      	bne.n	8002426 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	f002 fe3b 	bl	80050b8 <USB_EP0StartXfer>
 8002442:	e008      	b.n	8002456 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6979      	ldr	r1, [r7, #20]
 8002452:	f002 fbed 	bl	8004c30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	460b      	mov	r3, r1
 800249e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3338      	adds	r3, #56	; 0x38
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2201      	movs	r2, #1
 80024ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	f002 fdd9 	bl	80050b8 <USB_EP0StartXfer>
 8002506:	e008      	b.n	800251a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	f002 fb8b 	bl	8004c30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d901      	bls.n	8002542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e050      	b.n	80025e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da0f      	bge.n	800256a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3338      	adds	r3, #56	; 0x38
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	3304      	adds	r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	705a      	strb	r2, [r3, #1]
 8002568:	e00d      	b.n	8002586 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_PCD_EP_SetStall+0x82>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e01e      	b.n	80025e4 <HAL_PCD_EP_SetStall+0xc0>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 ff30 	bl	800541a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025d4:	461a      	mov	r2, r3
 80025d6:	f003 f90f 	bl	80057f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d901      	bls.n	800260a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e042      	b.n	8002690 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800260a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260e:	2b00      	cmp	r3, #0
 8002610:	da0f      	bge.n	8002632 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	3338      	adds	r3, #56	; 0x38
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	e00f      	b.n	8002652 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 020f 	and.w	r2, r3, #15
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_PCD_EP_ClrStall+0x86>
 800266e:	2302      	movs	r3, #2
 8002670:	e00e      	b.n	8002690 <HAL_PCD_EP_ClrStall+0xa4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 ff38 	bl	80054f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3338      	adds	r3, #56	; 0x38
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d901      	bls.n	80026d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e06c      	b.n	80027aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d902      	bls.n	80026ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3303      	adds	r3, #3
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026f4:	e02b      	b.n	800274e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	429a      	cmp	r2, r3
 800270a:	d902      	bls.n	8002712 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3303      	adds	r3, #3
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800272a:	b2db      	uxtb	r3, r3
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4603      	mov	r3, r0
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f002 fe14 	bl	800535e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	441a      	add	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	441a      	add	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	b29b      	uxth	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	429a      	cmp	r2, r3
 8002762:	d809      	bhi.n	8002778 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800276c:	429a      	cmp	r2, r3
 800276e:	d203      	bcs.n	8002778 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1be      	bne.n	80026f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	d811      	bhi.n	80027a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	2201      	movs	r2, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	43db      	mvns	r3, r3
 800279e:	6939      	ldr	r1, [r7, #16]
 80027a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027a4:	4013      	ands	r3, r2
 80027a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	333c      	adds	r3, #60	; 0x3c
 80027cc:	3304      	adds	r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 80a0 	bne.w	800292c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a72      	ldr	r2, [pc, #456]	; (80029c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	f240 80dd 	bls.w	80029ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80d7 	beq.w	80029ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281e:	6093      	str	r3, [r2, #8]
 8002820:	e0cb      	b.n	80029ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	2320      	movs	r3, #32
 800283c:	6093      	str	r3, [r2, #8]
 800283e:	e0bc      	b.n	80029ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 80b7 	bne.w	80029ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a5d      	ldr	r2, [pc, #372]	; (80029c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d90f      	bls.n	8002874 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002870:	6093      	str	r3, [r2, #8]
 8002872:	e0a2      	b.n	80029ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002886:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	0159      	lsls	r1, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	440b      	add	r3, r1
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800289a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4403      	add	r3, r0
 80028aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4419      	add	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4403      	add	r3, r0
 80028e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d114      	bne.n	800291e <PCD_EP_OutXfrComplete_int+0x16a>
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002916:	461a      	mov	r2, r3
 8002918:	2101      	movs	r1, #1
 800291a:	f002 ff6d 	bl	80057f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f004 fe19 	bl	800755c <HAL_PCD_DataOutStageCallback>
 800292a:	e046      	b.n	80029ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d124      	bne.n	800297e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294a:	461a      	mov	r2, r3
 800294c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002950:	6093      	str	r3, [r2, #8]
 8002952:	e032      	b.n	80029ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296a:	461a      	mov	r2, r3
 800296c:	2320      	movs	r3, #32
 800296e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f004 fdf0 	bl	800755c <HAL_PCD_DataOutStageCallback>
 800297c:	e01d      	b.n	80029ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d114      	bne.n	80029ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d108      	bne.n	80029ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029a6:	461a      	mov	r2, r3
 80029a8:	2100      	movs	r1, #0
 80029aa:	f002 ff25 	bl	80057f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f004 fdd1 	bl	800755c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	4f54300a 	.word	0x4f54300a
 80029c8:	4f54310a 	.word	0x4f54310a

080029cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	333c      	adds	r3, #60	; 0x3c
 80029e4:	3304      	adds	r3, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <PCD_EP_OutSetupPacket_int+0x88>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d90e      	bls.n	8002a20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f004 fd89 	bl	8007538 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d90c      	bls.n	8002a48 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d108      	bne.n	8002a48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a40:	461a      	mov	r2, r3
 8002a42:	2101      	movs	r1, #1
 8002a44:	f002 fed8 	bl	80057f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	4f54300a 	.word	0x4f54300a

08002a58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
 8002a64:	4613      	mov	r3, r2
 8002a66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a76:	883b      	ldrh	r3, [r7, #0]
 8002a78:	0419      	lsls	r1, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
 8002a84:	e028      	b.n	8002ad8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4413      	add	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e00d      	b.n	8002ab6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	3340      	adds	r3, #64	; 0x40
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4413      	add	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3ec      	bcc.n	8002a9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ac0:	883b      	ldrh	r3, [r7, #0]
 8002ac2:	0418      	lsls	r0, r3, #16
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	4302      	orrs	r2, r0
 8002ad0:	3340      	adds	r3, #64	; 0x40
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e25b      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d075      	beq.n	8002c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3e:	4ba3      	ldr	r3, [pc, #652]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4ba0      	ldr	r3, [pc, #640]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d112      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b9d      	ldr	r3, [pc, #628]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	4b99      	ldr	r3, [pc, #612]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x108>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d157      	bne.n	8002c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e236      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x74>
 8002b86:	4b91      	ldr	r3, [pc, #580]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a90      	ldr	r2, [pc, #576]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b8b      	ldr	r3, [pc, #556]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a8a      	ldr	r2, [pc, #552]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a87      	ldr	r2, [pc, #540]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	4b84      	ldr	r3, [pc, #528]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a83      	ldr	r2, [pc, #524]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a80      	ldr	r2, [pc, #512]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fd fff6 	bl	8000bc8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fd fff2 	bl	8000bc8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1fb      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fd ffe2 	bl	8000bc8 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fd ffde 	bl	8000bc8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1e7      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0xe8>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c36:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1bb      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4952      	ldr	r1, [pc, #328]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	e03a      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <HAL_RCC_OscConfig+0x2b0>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fd ff97 	bl	8000bc8 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9e:	f7fd ff93 	bl	8000bc8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e19c      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4940      	ldr	r1, [pc, #256]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e015      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_RCC_OscConfig+0x2b0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fd ff76 	bl	8000bc8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fd ff72 	bl	8000bc8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e17b      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d030      	beq.n	8002d6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_RCC_OscConfig+0x2b4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fd ff56 	bl	8000bc8 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fd ff52 	bl	8000bc8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e15b      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x200>
 8002d3e:	e015      	b.n	8002d6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_OscConfig+0x2b4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fd ff3f 	bl	8000bc8 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fd ff3b 	bl	8000bc8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e144      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a0 	beq.w	8002eba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x2b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d121      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x2b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_RCC_OscConfig+0x2b8>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7fd ff01 	bl	8000bc8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	e011      	b.n	8002dee <HAL_RCC_OscConfig+0x2ce>
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470000 	.word	0x42470000
 8002dd4:	42470e80 	.word	0x42470e80
 8002dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fd fef4 	bl	8000bc8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0fd      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b81      	ldr	r3, [pc, #516]	; (8002ff4 <HAL_RCC_OscConfig+0x4d4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d106      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
 8002e02:	4b7d      	ldr	r3, [pc, #500]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a7c      	ldr	r2, [pc, #496]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	e01c      	b.n	8002e4a <HAL_RCC_OscConfig+0x32a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d10c      	bne.n	8002e32 <HAL_RCC_OscConfig+0x312>
 8002e18:	4b77      	ldr	r3, [pc, #476]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a76      	ldr	r2, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	4b74      	ldr	r3, [pc, #464]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a73      	ldr	r2, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0x32a>
 8002e32:	4b71      	ldr	r3, [pc, #452]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a70      	ldr	r2, [pc, #448]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a6d      	ldr	r2, [pc, #436]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d015      	beq.n	8002e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fd feb9 	bl	8000bc8 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fd feb5 	bl	8000bc8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0bc      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RCC_OscConfig+0x33a>
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fd fea3 	bl	8000bc8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fd fe9f 	bl	8000bc8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0a6      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	4b56      	ldr	r3, [pc, #344]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a51      	ldr	r2, [pc, #324]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8092 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d05c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d141      	bne.n	8002f5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <HAL_RCC_OscConfig+0x4dc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fd fe73 	bl	8000bc8 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fd fe6f 	bl	8000bc8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e078      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	019b      	lsls	r3, r3, #6
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	4933      	ldr	r1, [pc, #204]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2e:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_RCC_OscConfig+0x4dc>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fe48 	bl	8000bc8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd fe44 	bl	8000bc8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e04d      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x41c>
 8002f5a:	e045      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_OscConfig+0x4dc>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fe31 	bl	8000bc8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fd fe2d 	bl	8000bc8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e036      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x44a>
 8002f88:	e02e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e029      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_RCC_OscConfig+0x4d8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d115      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	42470060 	.word	0x42470060

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0cc      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d90c      	bls.n	800303c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d044      	beq.n	8003120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d119      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d003      	beq.n	80030be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e067      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4934      	ldr	r1, [pc, #208]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fd fd6a 	bl	8000bc8 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fd fd66 	bl	8000bc8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d20c      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4601      	mov	r1, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	fa21 f303 	lsr.w	r3, r1, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fcde 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08007ce0 	.word	0x08007ce0
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	2300      	movs	r3, #0
 80031dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d007      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x32>
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d008      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x38>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 80b4 	bne.w	8003360 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031fa:	60bb      	str	r3, [r7, #8]
       break;
 80031fc:	e0b3      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fe:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003200:	60bb      	str	r3, [r7, #8]
      break;
 8003202:	e0b0      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003204:	4b5a      	ldr	r3, [pc, #360]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800320c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320e:	4b58      	ldr	r3, [pc, #352]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04a      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b55      	ldr	r3, [pc, #340]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	f04f 0400 	mov.w	r4, #0
 8003224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	ea03 0501 	and.w	r5, r3, r1
 8003230:	ea04 0602 	and.w	r6, r4, r2
 8003234:	4629      	mov	r1, r5
 8003236:	4632      	mov	r2, r6
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f04f 0400 	mov.w	r4, #0
 8003240:	0154      	lsls	r4, r2, #5
 8003242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003246:	014b      	lsls	r3, r1, #5
 8003248:	4619      	mov	r1, r3
 800324a:	4622      	mov	r2, r4
 800324c:	1b49      	subs	r1, r1, r5
 800324e:	eb62 0206 	sbc.w	r2, r2, r6
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	f04f 0400 	mov.w	r4, #0
 800325a:	0194      	lsls	r4, r2, #6
 800325c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003260:	018b      	lsls	r3, r1, #6
 8003262:	1a5b      	subs	r3, r3, r1
 8003264:	eb64 0402 	sbc.w	r4, r4, r2
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	00e2      	lsls	r2, r4, #3
 8003272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003276:	00d9      	lsls	r1, r3, #3
 8003278:	460b      	mov	r3, r1
 800327a:	4614      	mov	r4, r2
 800327c:	195b      	adds	r3, r3, r5
 800327e:	eb44 0406 	adc.w	r4, r4, r6
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	0262      	lsls	r2, r4, #9
 800328c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003290:	0259      	lsls	r1, r3, #9
 8003292:	460b      	mov	r3, r1
 8003294:	4614      	mov	r4, r2
 8003296:	4618      	mov	r0, r3
 8003298:	4621      	mov	r1, r4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f04f 0400 	mov.w	r4, #0
 80032a0:	461a      	mov	r2, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	f7fc ffaa 	bl	80001fc <__aeabi_uldivmod>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e049      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	f04f 0400 	mov.w	r4, #0
 80032ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	ea03 0501 	and.w	r5, r3, r1
 80032c6:	ea04 0602 	and.w	r6, r4, r2
 80032ca:	4629      	mov	r1, r5
 80032cc:	4632      	mov	r2, r6
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	0154      	lsls	r4, r2, #5
 80032d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032dc:	014b      	lsls	r3, r1, #5
 80032de:	4619      	mov	r1, r3
 80032e0:	4622      	mov	r2, r4
 80032e2:	1b49      	subs	r1, r1, r5
 80032e4:	eb62 0206 	sbc.w	r2, r2, r6
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	0194      	lsls	r4, r2, #6
 80032f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	1a5b      	subs	r3, r3, r1
 80032fa:	eb64 0402 	sbc.w	r4, r4, r2
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	00e2      	lsls	r2, r4, #3
 8003308:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800330c:	00d9      	lsls	r1, r3, #3
 800330e:	460b      	mov	r3, r1
 8003310:	4614      	mov	r4, r2
 8003312:	195b      	adds	r3, r3, r5
 8003314:	eb44 0406 	adc.w	r4, r4, r6
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	02a2      	lsls	r2, r4, #10
 8003322:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003326:	0299      	lsls	r1, r3, #10
 8003328:	460b      	mov	r3, r1
 800332a:	4614      	mov	r4, r2
 800332c:	4618      	mov	r0, r3
 800332e:	4621      	mov	r1, r4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	461a      	mov	r2, r3
 8003338:	4623      	mov	r3, r4
 800333a:	f7fc ff5f 	bl	80001fc <__aeabi_uldivmod>
 800333e:	4603      	mov	r3, r0
 8003340:	460c      	mov	r4, r1
 8003342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	3301      	adds	r3, #1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	60bb      	str	r3, [r7, #8]
      break;
 800335e:	e002      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003362:	60bb      	str	r3, [r7, #8]
      break;
 8003364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003366:	68bb      	ldr	r3, [r7, #8]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	00f42400 	.word	0x00f42400
 8003378:	007a1200 	.word	0x007a1200

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_RCC_GetHCLKFreq+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000000 	.word	0x20000000

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff0 	bl	800337c <HAL_RCC_GetHCLKFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08007cf0 	.word	0x08007cf0

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffdc 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0b5b      	lsrs	r3, r3, #13
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08007cf0 	.word	0x08007cf0

080033e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e03f      	b.n	8003476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fa1a 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fbe7 	bl	8003bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800345c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af02      	add	r7, sp, #8
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 8083 	bne.w	80035a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_UART_Transmit+0x2e>
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e07b      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x40>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e074      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2221      	movs	r2, #33	; 0x21
 80034d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fb78 	bl	8000bc8 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034ee:	e042      	b.n	8003576 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d122      	bne.n	800354e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fa06 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e042      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003534:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3302      	adds	r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	e017      	b.n	8003576 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3301      	adds	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	e013      	b.n	8003576 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f9e3 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e01f      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	60ba      	str	r2, [r7, #8]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1b7      	bne.n	80034f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f9ca 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e006      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	f040 8090 	bne.w	80036f2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_UART_Receive+0x2e>
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e088      	b.n	80036f4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_UART_Receive+0x40>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e081      	b.n	80036f4 <HAL_UART_Receive+0x144>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2222      	movs	r2, #34	; 0x22
 8003602:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003606:	f7fd fadf 	bl	8000bc8 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003620:	e05c      	b.n	80036dc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d12b      	bne.n	8003692 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2120      	movs	r1, #32
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f96d 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e04f      	b.n	80036f4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10c      	bne.n	800367a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366c:	b29a      	uxth	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3302      	adds	r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	e030      	b.n	80036dc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	b29b      	uxth	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	b29a      	uxth	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	e024      	b.n	80036dc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2120      	movs	r1, #32
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f941 	bl	8003924 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e023      	b.n	80036f4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d108      	bne.n	80036c6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	60ba      	str	r2, [r7, #8]
 80036c0:	b2ca      	uxtb	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e00a      	b.n	80036dc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1c59      	adds	r1, r3, #1
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d19d      	bne.n	8003622 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10d      	bne.n	800374e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x52>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f9d6 	bl	8003af8 <UART_Receive_IT>
      return;
 800374c:	e0d1      	b.n	80038f2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80b0 	beq.w	80038b6 <HAL_UART_IRQHandler+0x1ba>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_UART_IRQHandler+0x70>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a5 	beq.w	80038b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_UART_IRQHandler+0x90>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_UART_IRQHandler+0xb0>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_UART_IRQHandler+0xd0>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	f043 0204 	orr.w	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <HAL_UART_IRQHandler+0xfa>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_UART_IRQHandler+0xee>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	f043 0208 	orr.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d078      	beq.n	80038f0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_UART_IRQHandler+0x11c>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f970 	bl	8003af8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_UART_IRQHandler+0x144>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d031      	beq.n	80038a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8b9 	bl	80039b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d123      	bne.n	800389c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003862:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_UART_IRQHandler+0x1fc>)
 8003872:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fb93 	bl	8000fa4 <HAL_DMA_Abort_IT>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800388e:	4610      	mov	r0, r2
 8003890:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003892:	e00e      	b.n	80038b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f83b 	bl	8003910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389a:	e00a      	b.n	80038b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f837 	bl	8003910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a2:	e006      	b.n	80038b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f833 	bl	8003910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80038b0:	e01e      	b.n	80038f0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b2:	bf00      	nop
    return;
 80038b4:	e01c      	b.n	80038f0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_UART_IRQHandler+0x1d6>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8a6 	bl	8003a1c <UART_Transmit_IT>
    return;
 80038d0:	e00f      	b.n	80038f2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_UART_IRQHandler+0x1f6>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8ee 	bl	8003ac8 <UART_EndTransmit_IT>
    return;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80038f0:	bf00      	nop
  }
}
 80038f2:	3720      	adds	r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	080039f5 	.word	0x080039f5

080038fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003934:	e02c      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393c:	d028      	beq.n	8003990 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x30>
 8003944:	f7fd f940 	bl	8000bc8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d21d      	bcs.n	8003990 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003962:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00f      	b.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d0c3      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff ff7e 	bl	8003910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b21      	cmp	r3, #33	; 0x21
 8003a2e:	d144      	bne.n	8003aba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d11a      	bne.n	8003a70 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a4e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	1c9a      	adds	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	621a      	str	r2, [r3, #32]
 8003a62:	e00e      	b.n	8003a82 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	621a      	str	r2, [r3, #32]
 8003a6e:	e008      	b.n	8003a82 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	1c59      	adds	r1, r3, #1
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6211      	str	r1, [r2, #32]
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ade:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff07 	bl	80038fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b22      	cmp	r3, #34	; 0x22
 8003b0a:	d171      	bne.n	8003bf0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d123      	bne.n	8003b5e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10e      	bne.n	8003b42 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	1c9a      	adds	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b40:	e029      	b.n	8003b96 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b5c:	e01b      	b.n	8003b96 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6858      	ldr	r0, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	1c59      	adds	r1, r3, #1
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6291      	str	r1, [r2, #40]	; 0x28
 8003b76:	b2c2      	uxtb	r2, r0
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e00c      	b.n	8003b96 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	1c58      	adds	r0, r3, #1
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	6288      	str	r0, [r1, #40]	; 0x28
 8003b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d120      	bne.n	8003bec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0220 	bic.w	r2, r2, #32
 8003bb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc fde8 	bl	80007b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e002      	b.n	8003bf2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c3e:	f023 030c 	bic.w	r3, r3, #12
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6a:	f040 818b 	bne.w	8003f84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4ac1      	ldr	r2, [pc, #772]	; (8003f78 <UART_SetConfig+0x37c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d005      	beq.n	8003c84 <UART_SetConfig+0x88>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4abf      	ldr	r2, [pc, #764]	; (8003f7c <UART_SetConfig+0x380>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f040 80bd 	bne.w	8003dfe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7ff fb9a 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8003c88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	f04f 0600 	mov.w	r6, #0
 8003c92:	46a8      	mov	r8, r5
 8003c94:	46b1      	mov	r9, r6
 8003c96:	eb18 0308 	adds.w	r3, r8, r8
 8003c9a:	eb49 0409 	adc.w	r4, r9, r9
 8003c9e:	4698      	mov	r8, r3
 8003ca0:	46a1      	mov	r9, r4
 8003ca2:	eb18 0805 	adds.w	r8, r8, r5
 8003ca6:	eb49 0906 	adc.w	r9, r9, r6
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cbe:	4688      	mov	r8, r1
 8003cc0:	4691      	mov	r9, r2
 8003cc2:	eb18 0005 	adds.w	r0, r8, r5
 8003cc6:	eb49 0106 	adc.w	r1, r9, r6
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	461d      	mov	r5, r3
 8003cd0:	f04f 0600 	mov.w	r6, #0
 8003cd4:	196b      	adds	r3, r5, r5
 8003cd6:	eb46 0406 	adc.w	r4, r6, r6
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4623      	mov	r3, r4
 8003cde:	f7fc fa8d 	bl	80001fc <__aeabi_uldivmod>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4ba5      	ldr	r3, [pc, #660]	; (8003f80 <UART_SetConfig+0x384>)
 8003cea:	fba3 2302 	umull	r2, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	f04f 0600 	mov.w	r6, #0
 8003cfc:	46a9      	mov	r9, r5
 8003cfe:	46b2      	mov	sl, r6
 8003d00:	eb19 0309 	adds.w	r3, r9, r9
 8003d04:	eb4a 040a 	adc.w	r4, sl, sl
 8003d08:	4699      	mov	r9, r3
 8003d0a:	46a2      	mov	sl, r4
 8003d0c:	eb19 0905 	adds.w	r9, r9, r5
 8003d10:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d28:	4689      	mov	r9, r1
 8003d2a:	4692      	mov	sl, r2
 8003d2c:	eb19 0005 	adds.w	r0, r9, r5
 8003d30:	eb4a 0106 	adc.w	r1, sl, r6
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	461d      	mov	r5, r3
 8003d3a:	f04f 0600 	mov.w	r6, #0
 8003d3e:	196b      	adds	r3, r5, r5
 8003d40:	eb46 0406 	adc.w	r4, r6, r6
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	f7fc fa58 	bl	80001fc <__aeabi_uldivmod>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b8b      	ldr	r3, [pc, #556]	; (8003f80 <UART_SetConfig+0x384>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a86      	ldr	r2, [pc, #536]	; (8003f80 <UART_SetConfig+0x384>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d74:	4498      	add	r8, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	461d      	mov	r5, r3
 8003d7a:	f04f 0600 	mov.w	r6, #0
 8003d7e:	46a9      	mov	r9, r5
 8003d80:	46b2      	mov	sl, r6
 8003d82:	eb19 0309 	adds.w	r3, r9, r9
 8003d86:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8a:	4699      	mov	r9, r3
 8003d8c:	46a2      	mov	sl, r4
 8003d8e:	eb19 0905 	adds.w	r9, r9, r5
 8003d92:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003daa:	4689      	mov	r9, r1
 8003dac:	4692      	mov	sl, r2
 8003dae:	eb19 0005 	adds.w	r0, r9, r5
 8003db2:	eb4a 0106 	adc.w	r1, sl, r6
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	461d      	mov	r5, r3
 8003dbc:	f04f 0600 	mov.w	r6, #0
 8003dc0:	196b      	adds	r3, r5, r5
 8003dc2:	eb46 0406 	adc.w	r4, r6, r6
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	f7fc fa17 	bl	80001fc <__aeabi_uldivmod>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <UART_SetConfig+0x384>)
 8003dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2164      	movs	r1, #100	; 0x64
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	3332      	adds	r3, #50	; 0x32
 8003de8:	4a65      	ldr	r2, [pc, #404]	; (8003f80 <UART_SetConfig+0x384>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	f003 0207 	and.w	r2, r3, #7
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4442      	add	r2, r8
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	e26f      	b.n	80042de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7ff fac9 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8003e02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	461d      	mov	r5, r3
 8003e08:	f04f 0600 	mov.w	r6, #0
 8003e0c:	46a8      	mov	r8, r5
 8003e0e:	46b1      	mov	r9, r6
 8003e10:	eb18 0308 	adds.w	r3, r8, r8
 8003e14:	eb49 0409 	adc.w	r4, r9, r9
 8003e18:	4698      	mov	r8, r3
 8003e1a:	46a1      	mov	r9, r4
 8003e1c:	eb18 0805 	adds.w	r8, r8, r5
 8003e20:	eb49 0906 	adc.w	r9, r9, r6
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e38:	4688      	mov	r8, r1
 8003e3a:	4691      	mov	r9, r2
 8003e3c:	eb18 0005 	adds.w	r0, r8, r5
 8003e40:	eb49 0106 	adc.w	r1, r9, r6
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	461d      	mov	r5, r3
 8003e4a:	f04f 0600 	mov.w	r6, #0
 8003e4e:	196b      	adds	r3, r5, r5
 8003e50:	eb46 0406 	adc.w	r4, r6, r6
 8003e54:	461a      	mov	r2, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	f7fc f9d0 	bl	80001fc <__aeabi_uldivmod>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <UART_SetConfig+0x384>)
 8003e64:	fba3 2302 	umull	r2, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	461d      	mov	r5, r3
 8003e72:	f04f 0600 	mov.w	r6, #0
 8003e76:	46a9      	mov	r9, r5
 8003e78:	46b2      	mov	sl, r6
 8003e7a:	eb19 0309 	adds.w	r3, r9, r9
 8003e7e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e82:	4699      	mov	r9, r3
 8003e84:	46a2      	mov	sl, r4
 8003e86:	eb19 0905 	adds.w	r9, r9, r5
 8003e8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea2:	4689      	mov	r9, r1
 8003ea4:	4692      	mov	sl, r2
 8003ea6:	eb19 0005 	adds.w	r0, r9, r5
 8003eaa:	eb4a 0106 	adc.w	r1, sl, r6
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	f04f 0600 	mov.w	r6, #0
 8003eb8:	196b      	adds	r3, r5, r5
 8003eba:	eb46 0406 	adc.w	r4, r6, r6
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	f7fc f99b 	bl	80001fc <__aeabi_uldivmod>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460c      	mov	r4, r1
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <UART_SetConfig+0x384>)
 8003ece:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2164      	movs	r1, #100	; 0x64
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	3332      	adds	r3, #50	; 0x32
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <UART_SetConfig+0x384>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eee:	4498      	add	r8, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	f04f 0600 	mov.w	r6, #0
 8003ef8:	46a9      	mov	r9, r5
 8003efa:	46b2      	mov	sl, r6
 8003efc:	eb19 0309 	adds.w	r3, r9, r9
 8003f00:	eb4a 040a 	adc.w	r4, sl, sl
 8003f04:	4699      	mov	r9, r3
 8003f06:	46a2      	mov	sl, r4
 8003f08:	eb19 0905 	adds.w	r9, r9, r5
 8003f0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f24:	4689      	mov	r9, r1
 8003f26:	4692      	mov	sl, r2
 8003f28:	eb19 0005 	adds.w	r0, r9, r5
 8003f2c:	eb4a 0106 	adc.w	r1, sl, r6
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	461d      	mov	r5, r3
 8003f36:	f04f 0600 	mov.w	r6, #0
 8003f3a:	196b      	adds	r3, r5, r5
 8003f3c:	eb46 0406 	adc.w	r4, r6, r6
 8003f40:	461a      	mov	r2, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	f7fc f95a 	bl	80001fc <__aeabi_uldivmod>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <UART_SetConfig+0x384>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <UART_SetConfig+0x384>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0207 	and.w	r2, r3, #7
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4442      	add	r2, r8
 8003f74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f76:	e1b2      	b.n	80042de <UART_SetConfig+0x6e2>
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4ad7      	ldr	r2, [pc, #860]	; (80042e8 <UART_SetConfig+0x6ec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d005      	beq.n	8003f9a <UART_SetConfig+0x39e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4ad6      	ldr	r2, [pc, #856]	; (80042ec <UART_SetConfig+0x6f0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	f040 80d1 	bne.w	800413c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9a:	f7ff fa0f 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8003f9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	469a      	mov	sl, r3
 8003fa4:	f04f 0b00 	mov.w	fp, #0
 8003fa8:	46d0      	mov	r8, sl
 8003faa:	46d9      	mov	r9, fp
 8003fac:	eb18 0308 	adds.w	r3, r8, r8
 8003fb0:	eb49 0409 	adc.w	r4, r9, r9
 8003fb4:	4698      	mov	r8, r3
 8003fb6:	46a1      	mov	r9, r4
 8003fb8:	eb18 080a 	adds.w	r8, r8, sl
 8003fbc:	eb49 090b 	adc.w	r9, r9, fp
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fd4:	4688      	mov	r8, r1
 8003fd6:	4691      	mov	r9, r2
 8003fd8:	eb1a 0508 	adds.w	r5, sl, r8
 8003fdc:	eb4b 0609 	adc.w	r6, fp, r9
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	f04f 0400 	mov.w	r4, #0
 8003ff2:	0094      	lsls	r4, r2, #2
 8003ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ff8:	008b      	lsls	r3, r1, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	4631      	mov	r1, r6
 8004002:	f7fc f8fb 	bl	80001fc <__aeabi_uldivmod>
 8004006:	4603      	mov	r3, r0
 8004008:	460c      	mov	r4, r1
 800400a:	461a      	mov	r2, r3
 800400c:	4bb8      	ldr	r3, [pc, #736]	; (80042f0 <UART_SetConfig+0x6f4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	469b      	mov	fp, r3
 800401c:	f04f 0c00 	mov.w	ip, #0
 8004020:	46d9      	mov	r9, fp
 8004022:	46e2      	mov	sl, ip
 8004024:	eb19 0309 	adds.w	r3, r9, r9
 8004028:	eb4a 040a 	adc.w	r4, sl, sl
 800402c:	4699      	mov	r9, r3
 800402e:	46a2      	mov	sl, r4
 8004030:	eb19 090b 	adds.w	r9, r9, fp
 8004034:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404c:	4689      	mov	r9, r1
 800404e:	4692      	mov	sl, r2
 8004050:	eb1b 0509 	adds.w	r5, fp, r9
 8004054:	eb4c 060a 	adc.w	r6, ip, sl
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	0094      	lsls	r4, r2, #2
 800406c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004070:	008b      	lsls	r3, r1, #2
 8004072:	461a      	mov	r2, r3
 8004074:	4623      	mov	r3, r4
 8004076:	4628      	mov	r0, r5
 8004078:	4631      	mov	r1, r6
 800407a:	f7fc f8bf 	bl	80001fc <__aeabi_uldivmod>
 800407e:	4603      	mov	r3, r0
 8004080:	460c      	mov	r4, r1
 8004082:	461a      	mov	r2, r3
 8004084:	4b9a      	ldr	r3, [pc, #616]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004086:	fba3 1302 	umull	r1, r3, r3, r2
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2164      	movs	r1, #100	; 0x64
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	3332      	adds	r3, #50	; 0x32
 8004098:	4a95      	ldr	r2, [pc, #596]	; (80042f0 <UART_SetConfig+0x6f4>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a4:	4498      	add	r8, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	469b      	mov	fp, r3
 80040aa:	f04f 0c00 	mov.w	ip, #0
 80040ae:	46d9      	mov	r9, fp
 80040b0:	46e2      	mov	sl, ip
 80040b2:	eb19 0309 	adds.w	r3, r9, r9
 80040b6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ba:	4699      	mov	r9, r3
 80040bc:	46a2      	mov	sl, r4
 80040be:	eb19 090b 	adds.w	r9, r9, fp
 80040c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040da:	4689      	mov	r9, r1
 80040dc:	4692      	mov	sl, r2
 80040de:	eb1b 0509 	adds.w	r5, fp, r9
 80040e2:	eb4c 060a 	adc.w	r6, ip, sl
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	0094      	lsls	r4, r2, #2
 80040fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	4628      	mov	r0, r5
 8004106:	4631      	mov	r1, r6
 8004108:	f7fc f878 	bl	80001fc <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	461a      	mov	r2, r3
 8004112:	4b77      	ldr	r3, [pc, #476]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4442      	add	r2, r8
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	e0d0      	b.n	80042de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7ff f92a 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8004140:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	469a      	mov	sl, r3
 8004146:	f04f 0b00 	mov.w	fp, #0
 800414a:	46d0      	mov	r8, sl
 800414c:	46d9      	mov	r9, fp
 800414e:	eb18 0308 	adds.w	r3, r8, r8
 8004152:	eb49 0409 	adc.w	r4, r9, r9
 8004156:	4698      	mov	r8, r3
 8004158:	46a1      	mov	r9, r4
 800415a:	eb18 080a 	adds.w	r8, r8, sl
 800415e:	eb49 090b 	adc.w	r9, r9, fp
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800416e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004172:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004176:	4688      	mov	r8, r1
 8004178:	4691      	mov	r9, r2
 800417a:	eb1a 0508 	adds.w	r5, sl, r8
 800417e:	eb4b 0609 	adc.w	r6, fp, r9
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4619      	mov	r1, r3
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	f04f 0400 	mov.w	r4, #0
 8004194:	0094      	lsls	r4, r2, #2
 8004196:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800419a:	008b      	lsls	r3, r1, #2
 800419c:	461a      	mov	r2, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	4628      	mov	r0, r5
 80041a2:	4631      	mov	r1, r6
 80041a4:	f7fc f82a 	bl	80001fc <__aeabi_uldivmod>
 80041a8:	4603      	mov	r3, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <UART_SetConfig+0x6f4>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	469b      	mov	fp, r3
 80041be:	f04f 0c00 	mov.w	ip, #0
 80041c2:	46d9      	mov	r9, fp
 80041c4:	46e2      	mov	sl, ip
 80041c6:	eb19 0309 	adds.w	r3, r9, r9
 80041ca:	eb4a 040a 	adc.w	r4, sl, sl
 80041ce:	4699      	mov	r9, r3
 80041d0:	46a2      	mov	sl, r4
 80041d2:	eb19 090b 	adds.w	r9, r9, fp
 80041d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ee:	4689      	mov	r9, r1
 80041f0:	4692      	mov	sl, r2
 80041f2:	eb1b 0509 	adds.w	r5, fp, r9
 80041f6:	eb4c 060a 	adc.w	r6, ip, sl
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4619      	mov	r1, r3
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	f04f 0400 	mov.w	r4, #0
 800420c:	0094      	lsls	r4, r2, #2
 800420e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004212:	008b      	lsls	r3, r1, #2
 8004214:	461a      	mov	r2, r3
 8004216:	4623      	mov	r3, r4
 8004218:	4628      	mov	r0, r5
 800421a:	4631      	mov	r1, r6
 800421c:	f7fb ffee 	bl	80001fc <__aeabi_uldivmod>
 8004220:	4603      	mov	r3, r0
 8004222:	460c      	mov	r4, r1
 8004224:	461a      	mov	r2, r3
 8004226:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004228:	fba3 1302 	umull	r1, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	2164      	movs	r1, #100	; 0x64
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	3332      	adds	r3, #50	; 0x32
 800423a:	4a2d      	ldr	r2, [pc, #180]	; (80042f0 <UART_SetConfig+0x6f4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004246:	4498      	add	r8, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	469b      	mov	fp, r3
 800424c:	f04f 0c00 	mov.w	ip, #0
 8004250:	46d9      	mov	r9, fp
 8004252:	46e2      	mov	sl, ip
 8004254:	eb19 0309 	adds.w	r3, r9, r9
 8004258:	eb4a 040a 	adc.w	r4, sl, sl
 800425c:	4699      	mov	r9, r3
 800425e:	46a2      	mov	sl, r4
 8004260:	eb19 090b 	adds.w	r9, r9, fp
 8004264:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004274:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004278:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800427c:	4689      	mov	r9, r1
 800427e:	4692      	mov	sl, r2
 8004280:	eb1b 0509 	adds.w	r5, fp, r9
 8004284:	eb4c 060a 	adc.w	r6, ip, sl
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	0094      	lsls	r4, r2, #2
 800429c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042a0:	008b      	lsls	r3, r1, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	4623      	mov	r3, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	4631      	mov	r1, r6
 80042aa:	f7fb ffa7 	bl	80001fc <__aeabi_uldivmod>
 80042ae:	4603      	mov	r3, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <UART_SetConfig+0x6f4>)
 80042b6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <UART_SetConfig+0x6f4>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4442      	add	r2, r8
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	e7ff      	b.n	80042de <UART_SetConfig+0x6e2>
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40011400 	.word	0x40011400
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042f4:	b084      	sub	sp, #16
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	f107 001c 	add.w	r0, r7, #28
 8004302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2b01      	cmp	r3, #1
 800430a:	d122      	bne.n	8004352 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d105      	bne.n	8004346 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f001 fab4 	bl	80058b4 <USB_CoreReset>
 800434c:	4603      	mov	r3, r0
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	e01a      	b.n	8004388 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f001 faa8 	bl	80058b4 <USB_CoreReset>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
 800437a:	e005      	b.n	8004388 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10b      	bne.n	80043a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f043 0206 	orr.w	r2, r3, #6
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043b2:	b004      	add	sp, #16
 80043b4:	4770      	bx	lr
	...

080043b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d165      	bne.n	8004498 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4a41      	ldr	r2, [pc, #260]	; (80044d4 <USB_SetTurnaroundTime+0x11c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d906      	bls.n	80043e2 <USB_SetTurnaroundTime+0x2a>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <USB_SetTurnaroundTime+0x120>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d802      	bhi.n	80043e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043dc:	230f      	movs	r3, #15
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e062      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <USB_SetTurnaroundTime+0x120>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d906      	bls.n	80043f8 <USB_SetTurnaroundTime+0x40>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a3b      	ldr	r2, [pc, #236]	; (80044dc <USB_SetTurnaroundTime+0x124>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d802      	bhi.n	80043f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043f2:	230e      	movs	r3, #14
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e057      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a38      	ldr	r2, [pc, #224]	; (80044dc <USB_SetTurnaroundTime+0x124>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d906      	bls.n	800440e <USB_SetTurnaroundTime+0x56>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <USB_SetTurnaroundTime+0x128>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d802      	bhi.n	800440e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004408:	230d      	movs	r3, #13
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e04c      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <USB_SetTurnaroundTime+0x128>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d906      	bls.n	8004424 <USB_SetTurnaroundTime+0x6c>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <USB_SetTurnaroundTime+0x12c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d802      	bhi.n	8004424 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800441e:	230c      	movs	r3, #12
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e041      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <USB_SetTurnaroundTime+0x12c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d906      	bls.n	800443a <USB_SetTurnaroundTime+0x82>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <USB_SetTurnaroundTime+0x130>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d802      	bhi.n	800443a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004434:	230b      	movs	r3, #11
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e036      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a2a      	ldr	r2, [pc, #168]	; (80044e8 <USB_SetTurnaroundTime+0x130>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d906      	bls.n	8004450 <USB_SetTurnaroundTime+0x98>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a29      	ldr	r2, [pc, #164]	; (80044ec <USB_SetTurnaroundTime+0x134>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d802      	bhi.n	8004450 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800444a:	230a      	movs	r3, #10
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e02b      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a26      	ldr	r2, [pc, #152]	; (80044ec <USB_SetTurnaroundTime+0x134>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d906      	bls.n	8004466 <USB_SetTurnaroundTime+0xae>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <USB_SetTurnaroundTime+0x138>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d802      	bhi.n	8004466 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004460:	2309      	movs	r3, #9
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e020      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <USB_SetTurnaroundTime+0x138>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d906      	bls.n	800447c <USB_SetTurnaroundTime+0xc4>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <USB_SetTurnaroundTime+0x13c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d802      	bhi.n	800447c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004476:	2308      	movs	r3, #8
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e015      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <USB_SetTurnaroundTime+0x13c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d906      	bls.n	8004492 <USB_SetTurnaroundTime+0xda>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <USB_SetTurnaroundTime+0x140>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d802      	bhi.n	8004492 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800448c:	2307      	movs	r3, #7
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e00a      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004492:	2306      	movs	r3, #6
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e007      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800449e:	2309      	movs	r3, #9
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e001      	b.n	80044a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044a4:	2309      	movs	r3, #9
 80044a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	029b      	lsls	r3, r3, #10
 80044bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	00d8acbf 	.word	0x00d8acbf
 80044d8:	00e4e1bf 	.word	0x00e4e1bf
 80044dc:	00f423ff 	.word	0x00f423ff
 80044e0:	0106737f 	.word	0x0106737f
 80044e4:	011a499f 	.word	0x011a499f
 80044e8:	01312cff 	.word	0x01312cff
 80044ec:	014ca43f 	.word	0x014ca43f
 80044f0:	016e35ff 	.word	0x016e35ff
 80044f4:	01a6ab1f 	.word	0x01a6ab1f
 80044f8:	01e847ff 	.word	0x01e847ff

080044fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d106      	bne.n	800456c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e00b      	b.n	8004584 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e001      	b.n	8004584 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e003      	b.n	800458c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004584:	2032      	movs	r0, #50	; 0x32
 8004586:	f7fc fb2b 	bl	8000be0 <HAL_Delay>

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004594:	b084      	sub	sp, #16
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e009      	b.n	80045c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3340      	adds	r3, #64	; 0x40
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	3301      	adds	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b0e      	cmp	r3, #14
 80045cc:	d9f2      	bls.n	80045b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11c      	bne.n	800460e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
 800460c:	e00b      	b.n	8004626 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800462c:	461a      	mov	r2, r3
 800462e:	2300      	movs	r3, #0
 8004630:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	4619      	mov	r1, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004640:	461a      	mov	r2, r3
 8004642:	680b      	ldr	r3, [r1, #0]
 8004644:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10c      	bne.n	8004666 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004652:	2100      	movs	r1, #0
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f949 	bl	80048ec <USB_SetDevSpeed>
 800465a:	e008      	b.n	800466e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800465c:	2101      	movs	r1, #1
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f944 	bl	80048ec <USB_SetDevSpeed>
 8004664:	e003      	b.n	800466e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004666:	2103      	movs	r1, #3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f93f 	bl	80048ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800466e:	2110      	movs	r1, #16
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8f3 	bl	800485c <USB_FlushTxFifo>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f911 	bl	80048a8 <USB_FlushRxFifo>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	461a      	mov	r2, r3
 80046a4:	2300      	movs	r3, #0
 80046a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	461a      	mov	r2, r3
 80046b0:	2300      	movs	r3, #0
 80046b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e043      	b.n	8004742 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d0:	d118      	bne.n	8004704 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e013      	b.n	8004716 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e008      	b.n	8004716 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	461a      	mov	r2, r3
 8004712:	2300      	movs	r3, #0
 8004714:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	461a      	mov	r2, r3
 8004736:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800473a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3301      	adds	r3, #1
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	429a      	cmp	r2, r3
 8004748:	d3b7      	bcc.n	80046ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e043      	b.n	80047d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004766:	d118      	bne.n	800479a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	461a      	mov	r2, r3
 800477c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e013      	b.n	80047ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	461a      	mov	r2, r3
 8004792:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e008      	b.n	80047ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	461a      	mov	r2, r3
 80047cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3301      	adds	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3b7      	bcc.n	8004750 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004800:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f043 0210 	orr.w	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <USB_DevInit+0x2c4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f043 0208 	orr.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004840:	f043 0304 	orr.w	r3, r3, #4
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004854:	b004      	add	sp, #16
 8004856:	4770      	bx	lr
 8004858:	803c3800 	.word	0x803c3800

0800485c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <USB_FlushTxFifo+0x48>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d0f0      	beq.n	8004876 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	00030d40 	.word	0x00030d40

080048a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2210      	movs	r2, #16
 80048b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <USB_FlushRxFifo+0x40>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d0f0      	beq.n	80048ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	00030d40 	.word	0x00030d40

080048ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
 8004942:	e00a      	b.n	800495a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d002      	beq.n	8004950 <USB_GetDevSpeed+0x32>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b06      	cmp	r3, #6
 800494e:	d102      	bne.n	8004956 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004950:	2302      	movs	r3, #2
 8004952:	75fb      	strb	r3, [r7, #23]
 8004954:	e001      	b.n	800495a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004956:	230f      	movs	r3, #15
 8004958:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
}
 800495c:	4618      	mov	r0, r3
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d13a      	bne.n	80049fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	b29b      	uxth	r3, r3
 800499c:	68f9      	ldr	r1, [r7, #12]
 800499e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d155      	bne.n	8004a68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	78db      	ldrb	r3, [r3, #3]
 80049d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	059b      	lsls	r3, r3, #22
 80049de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049e0:	4313      	orrs	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e036      	b.n	8004a68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11a      	bne.n	8004a68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	78db      	ldrb	r3, [r3, #3]
 8004a4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d161      	bne.n	8004b58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aaa:	d11f      	bne.n	8004aec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	0151      	lsls	r1, r2, #5
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b30:	4013      	ands	r3, r2
 8004b32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0159      	lsls	r1, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	440b      	add	r3, r1
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <USB_DeactivateEndpoint+0x1b0>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
 8004b56:	e060      	b.n	8004c1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6e:	d11f      	bne.n	8004bb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004baa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	43db      	mvns	r3, r3
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	0159      	lsls	r1, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	440b      	add	r3, r1
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	4619      	mov	r1, r3
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <USB_DeactivateEndpoint+0x1b4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	ec337800 	.word	0xec337800
 8004c2c:	eff37800 	.word	0xeff37800

08004c30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 815c 	bne.w	8004f0a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d132      	bne.n	8004cc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb8:	0cdb      	lsrs	r3, r3, #19
 8004cba:	04db      	lsls	r3, r3, #19
 8004cbc:	6113      	str	r3, [r2, #16]
 8004cbe:	e074      	b.n	8004daa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cda:	0cdb      	lsrs	r3, r3, #19
 8004cdc:	04db      	lsls	r3, r3, #19
 8004cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6959      	ldr	r1, [r3, #20]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	440b      	add	r3, r1
 8004d1c:	1e59      	subs	r1, r3, #1
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d26:	04d9      	lsls	r1, r3, #19
 8004d28:	4b9d      	ldr	r3, [pc, #628]	; (8004fa0 <USB_EPStartXfer+0x370>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	0148      	lsls	r0, r1, #5
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	4401      	add	r1, r0
 8004d34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	0148      	lsls	r0, r1, #5
 8004d56:	69f9      	ldr	r1, [r7, #28]
 8004d58:	4401      	add	r1, r0
 8004d5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	78db      	ldrb	r3, [r3, #3]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d11f      	bne.n	8004daa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004da8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d14b      	bne.n	8004e48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	78db      	ldrb	r3, [r3, #3]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d128      	bne.n	8004e26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d110      	bne.n	8004e06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e00f      	b.n	8004e26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e12f      	b.n	80050a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	78db      	ldrb	r3, [r3, #3]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d015      	beq.n	8004e9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8117 	beq.w	80050a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	69f9      	ldr	r1, [r7, #28]
 8004e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e96:	4313      	orrs	r3, r2
 8004e98:	634b      	str	r3, [r1, #52]	; 0x34
 8004e9a:	e105      	b.n	80050a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d110      	bne.n	8004ece <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e00f      	b.n	8004eee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	b298      	uxth	r0, r3
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fa2b 	bl	800535e <USB_WritePacket>
 8004f08:	e0ce      	b.n	80050a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	0cdb      	lsrs	r3, r3, #19
 8004f26:	04db      	lsls	r3, r3, #19
 8004f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d126      	bne.n	8004fa4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	0148      	lsls	r0, r1, #5
 8004f70:	69f9      	ldr	r1, [r7, #28]
 8004f72:	4401      	add	r1, r0
 8004f74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f9a:	6113      	str	r3, [r2, #16]
 8004f9c:	e036      	b.n	800500c <USB_EPStartXfer+0x3dc>
 8004f9e:	bf00      	nop
 8004fa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	8afb      	ldrh	r3, [r7, #22]
 8004fca:	04d9      	lsls	r1, r3, #19
 8004fcc:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <USB_EPStartXfer+0x484>)
 8004fce:	400b      	ands	r3, r1
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	0148      	lsls	r0, r1, #5
 8004fd4:	69f9      	ldr	r1, [r7, #28]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	8af9      	ldrh	r1, [r7, #22]
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	0148      	lsls	r0, r1, #5
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	4401      	add	r1, r0
 8005004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10d      	bne.n	800502e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68d9      	ldr	r1, [r3, #12]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	460a      	mov	r2, r1
 800502c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	78db      	ldrb	r3, [r3, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d128      	bne.n	8005088 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d110      	bne.n	8005068 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00f      	b.n	8005088 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	1ff80000 	.word	0x1ff80000

080050b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	f040 80cd 	bne.w	8005274 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d132      	bne.n	8005148 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	0cdb      	lsrs	r3, r3, #19
 8005142:	04db      	lsls	r3, r3, #19
 8005144:	6113      	str	r3, [r2, #16]
 8005146:	e04e      	b.n	80051e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	0cdb      	lsrs	r3, r3, #19
 8005164:	04db      	lsls	r3, r3, #19
 8005166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005186:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800518a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	429a      	cmp	r2, r3
 8005196:	d903      	bls.n	80051a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	0148      	lsls	r0, r1, #5
 80051da:	6979      	ldr	r1, [r7, #20]
 80051dc:	4401      	add	r1, r0
 80051de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051e2:	4313      	orrs	r3, r2
 80051e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d11e      	bne.n	800522a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	461a      	mov	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e092      	b.n	8005350 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005248:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d07e      	beq.n	8005350 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	2101      	movs	r1, #1
 8005264:	fa01 f303 	lsl.w	r3, r1, r3
 8005268:	6979      	ldr	r1, [r7, #20]
 800526a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526e:	4313      	orrs	r3, r2
 8005270:	634b      	str	r3, [r1, #52]	; 0x34
 8005272:	e06d      	b.n	8005350 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	0cdb      	lsrs	r3, r3, #19
 8005290:	04db      	lsls	r3, r3, #19
 8005292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	0148      	lsls	r0, r1, #5
 8005302:	6979      	ldr	r1, [r7, #20]
 8005304:	4401      	add	r1, r0
 8005306:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800530a:	4313      	orrs	r3, r2
 800530c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10d      	bne.n	8005330 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68d9      	ldr	r1, [r3, #12]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	460a      	mov	r2, r1
 800532e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800534e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800535e:	b480      	push	{r7}
 8005360:	b089      	sub	sp, #36	; 0x24
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	4611      	mov	r1, r2
 800536a:	461a      	mov	r2, r3
 800536c:	460b      	mov	r3, r1
 800536e:	71fb      	strb	r3, [r7, #7]
 8005370:	4613      	mov	r3, r2
 8005372:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800537c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11a      	bne.n	80053ba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005384:	88bb      	ldrh	r3, [r7, #4]
 8005386:	3303      	adds	r3, #3
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	e00f      	b.n	80053b2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	031a      	lsls	r2, r3, #12
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539e:	461a      	mov	r2, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3304      	adds	r3, #4
 80053aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3eb      	bcc.n	8005392 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3724      	adds	r7, #36	; 0x24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	; 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	3303      	adds	r3, #3
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e00b      	b.n	8005404 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3304      	adds	r3, #4
 80053fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	3301      	adds	r3, #1
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	429a      	cmp	r2, r3
 800540a:	d3ef      	bcc.n	80053ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800540c:	69fb      	ldr	r3, [r7, #28]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	; 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d12c      	bne.n	8005490 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	db12      	blt.n	800546e <USB_EPSetStall+0x54>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00f      	beq.n	800546e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005468:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800546c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e02b      	b.n	80054e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db12      	blt.n	80054c8 <USB_EPSetStall+0xae>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00f      	beq.n	80054c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	785b      	ldrb	r3, [r3, #1]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d128      	bne.n	8005564 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005530:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d003      	beq.n	8005542 <USB_EPClearStall+0x4c>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	78db      	ldrb	r3, [r3, #3]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d138      	bne.n	80055b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e027      	b.n	80055b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005582:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	78db      	ldrb	r3, [r3, #3]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d003      	beq.n	8005594 <USB_EPClearStall+0x9e>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	78db      	ldrb	r3, [r3, #3]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d10f      	bne.n	80055b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fc:	4313      	orrs	r3, r2
 80055fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005628:	f023 0302 	bic.w	r3, r3, #2
 800562c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800562e:	2003      	movs	r0, #3
 8005630:	f7fb fad6 	bl	8000be0 <HAL_Delay>

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800565e:	2003      	movs	r0, #3
 8005660:	f7fb fabe 	bl	8000be0 <HAL_Delay>

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4013      	ands	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005686:	68fb      	ldr	r3, [r7, #12]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4013      	ands	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	0c1b      	lsrs	r3, r3, #16
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	b29b      	uxth	r3, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800572a:	68bb      	ldr	r3, [r7, #8]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
 8005768:	01db      	lsls	r3, r3, #7
 800576a:	b2db      	uxtb	r3, r3
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4013      	ands	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005786:	68bb      	ldr	r3, [r7, #8]
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0301 	and.w	r3, r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057ce:	f023 0307 	bic.w	r3, r3, #7
 80057d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	460b      	mov	r3, r1
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	333c      	adds	r3, #60	; 0x3c
 800580e:	3304      	adds	r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <USB_EP0_OutStart+0xb8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d90a      	bls.n	8005832 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800582c:	d101      	bne.n	8005832 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e037      	b.n	80058a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	461a      	mov	r2, r3
 800583a:	2300      	movs	r3, #0
 800583c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005860:	f043 0318 	orr.w	r3, r3, #24
 8005864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005874:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005878:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d10f      	bne.n	80058a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800589e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	4f54300a 	.word	0x4f54300a

080058b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <USB_CoreReset+0x64>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e01b      	b.n	800590a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	daf2      	bge.n	80058c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f043 0201 	orr.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <USB_CoreReset+0x64>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d0f0      	beq.n	80058ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	00030d40 	.word	0x00030d40

0800591c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005928:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800592c:	f002 f8d6 	bl	8007adc <malloc>
 8005930:	4603      	mov	r3, r0
 8005932:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005942:	2302      	movs	r3, #2
 8005944:	e066      	b.n	8005a14 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7c1b      	ldrb	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d119      	bne.n	800598a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595a:	2202      	movs	r2, #2
 800595c:	2181      	movs	r1, #129	; 0x81
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 ff43 	bl	80077ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800596a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596e:	2202      	movs	r2, #2
 8005970:	2101      	movs	r1, #1
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 ff39 	bl	80077ea <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2210      	movs	r2, #16
 8005984:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005988:	e016      	b.n	80059b8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800598a:	2340      	movs	r3, #64	; 0x40
 800598c:	2202      	movs	r2, #2
 800598e:	2181      	movs	r1, #129	; 0x81
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 ff2a 	bl	80077ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	2202      	movs	r2, #2
 80059a0:	2101      	movs	r1, #1
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 ff21 	bl	80077ea <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2210      	movs	r2, #16
 80059b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059b8:	2308      	movs	r3, #8
 80059ba:	2203      	movs	r2, #3
 80059bc:	2182      	movs	r1, #130	; 0x82
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 ff13 	bl	80077ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7c1b      	ldrb	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059f8:	2101      	movs	r1, #1
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 ffe4 	bl	80079c8 <USBD_LL_PrepareReceive>
 8005a00:	e007      	b.n	8005a12 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 ffdb 	bl	80079c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a2c:	2181      	movs	r1, #129	; 0x81
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 ff01 	bl	8007836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 fefa 	bl	8007836 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a4a:	2182      	movs	r1, #130	; 0x82
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 fef2 	bl	8007836 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f002 f835 	bl	8007aec <free>
    pdev->pClassData = NULL;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d03a      	beq.n	8005b34 <USBD_CDC_Setup+0xa0>
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	f040 8097 	bne.w	8005bf2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	88db      	ldrh	r3, [r3, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d029      	beq.n	8005b20 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da11      	bge.n	8005afa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005ae2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	88d2      	ldrh	r2, [r2, #6]
 8005ae8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	88db      	ldrh	r3, [r3, #6]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fa6d 	bl	8006fd2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005af8:	e082      	b.n	8005c00 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	785a      	ldrb	r2, [r3, #1]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	88db      	ldrh	r3, [r3, #6]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b10:	6939      	ldr	r1, [r7, #16]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	88db      	ldrh	r3, [r3, #6]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 fa86 	bl	800702a <USBD_CtlPrepareRx>
    break;
 8005b1e:	e06f      	b.n	8005c00 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	7850      	ldrb	r0, [r2, #1]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	4798      	blx	r3
    break;
 8005b32:	e065      	b.n	8005c00 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b0b      	cmp	r3, #11
 8005b3a:	d84f      	bhi.n	8005bdc <USBD_CDC_Setup+0x148>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <USBD_CDC_Setup+0xb0>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005beb 	.word	0x08005beb
 8005b4c:	08005bdd 	.word	0x08005bdd
 8005b50:	08005bdd 	.word	0x08005bdd
 8005b54:	08005bdd 	.word	0x08005bdd
 8005b58:	08005bdd 	.word	0x08005bdd
 8005b5c:	08005bdd 	.word	0x08005bdd
 8005b60:	08005bdd 	.word	0x08005bdd
 8005b64:	08005bdd 	.word	0x08005bdd
 8005b68:	08005bdd 	.word	0x08005bdd
 8005b6c:	08005b9d 	.word	0x08005b9d
 8005b70:	08005bc5 	.word	0x08005bc5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d107      	bne.n	8005b8e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	2202      	movs	r2, #2
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fa23 	bl	8006fd2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b8c:	e030      	b.n	8005bf0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 f9ad 	bl	8006ef0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b96:	2303      	movs	r3, #3
 8005b98:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9a:	e029      	b.n	8005bf0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d107      	bne.n	8005bb6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ba6:	f107 030f 	add.w	r3, r7, #15
 8005baa:	2201      	movs	r2, #1
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fa0f 	bl	8006fd2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bb4:	e01c      	b.n	8005bf0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f999 	bl	8006ef0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	e015      	b.n	8005bf0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d00f      	beq.n	8005bee <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 f98d 	bl	8006ef0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bda:	e008      	b.n	8005bee <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 f986 	bl	8006ef0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	e002      	b.n	8005bf0 <USBD_CDC_Setup+0x15c>
      break;
 8005bea:	bf00      	nop
 8005bec:	e008      	b.n	8005c00 <USBD_CDC_Setup+0x16c>
      break;
 8005bee:	bf00      	nop
    }
    break;
 8005bf0:	e006      	b.n	8005c00 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f97b 	bl	8006ef0 <USBD_CtlError>
    ret = USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	75fb      	strb	r3, [r7, #23]
    break;
 8005bfe:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop

08005c0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e049      	b.n	8005cc2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	3318      	adds	r3, #24
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d029      	beq.n	8005ca0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	78f9      	ldrb	r1, [r7, #3]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	460b      	mov	r3, r1
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	1a5b      	subs	r3, r3, r1
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4403      	add	r3, r0
 8005c6c:	3344      	adds	r3, #68	; 0x44
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c74:	fb03 f301 	mul.w	r3, r3, r1
 8005c78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d110      	bne.n	8005ca0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c92:	78f9      	ldrb	r1, [r7, #3]
 8005c94:	2300      	movs	r3, #0
 8005c96:	2200      	movs	r2, #0
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fe74 	bl	8007986 <USBD_LL_Transmit>
 8005c9e:	e00f      	b.n	8005cc0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e015      	b.n	8005d18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fe8a 	bl	8007a0a <USBD_LL_GetRxDataSize>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d12:	4611      	mov	r1, r2
 8005d14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d015      	beq.n	8005d66 <USBD_CDC_EP0_RxReady+0x46>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d40:	2bff      	cmp	r3, #255	; 0xff
 8005d42:	d010      	beq.n	8005d66 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d52:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2243      	movs	r2, #67	; 0x43
 8005d7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005d7e:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000094 	.word	0x20000094

08005d90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2243      	movs	r2, #67	; 0x43
 8005d9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005d9e:	4b03      	ldr	r3, [pc, #12]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000050 	.word	0x20000050

08005db0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2243      	movs	r2, #67	; 0x43
 8005dbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005dbe:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	200000d8 	.word	0x200000d8

08005dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	220a      	movs	r2, #10
 8005ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e004      	b.n	8005e0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e5c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e016      	b.n	8005ec0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	7c1b      	ldrb	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fd8e 	bl	80079c8 <USBD_LL_PrepareReceive>
 8005eac:	e007      	b.n	8005ebe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 fd85 	bl	80079c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e025      	b.n	8005f2c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	79fa      	ldrb	r2, [r7, #7]
 8005f1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f001 fbfb 	bl	800771c <USBD_LL_Init>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e010      	b.n	8005f6e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	f107 020e 	add.w	r2, r7, #14
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	4602      	mov	r2, r0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fc18 	bl	80077b4 <USBD_LL_Start>
 8005f84:	4603      	mov	r3, r0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
  }

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 ff2c 	bl	8006e7c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	2b01      	cmp	r3, #1
 8006046:	d00e      	beq.n	8006066 <USBD_LL_SetupStage+0x5a>
 8006048:	2b01      	cmp	r3, #1
 800604a:	d302      	bcc.n	8006052 <USBD_LL_SetupStage+0x46>
 800604c:	2b02      	cmp	r3, #2
 800604e:	d014      	beq.n	800607a <USBD_LL_SetupStage+0x6e>
 8006050:	e01d      	b.n	800608e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa18 	bl	8006490 <USBD_StdDevReq>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e020      	b.n	80060a8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa7c 	bl	800656c <USBD_StdItfReq>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e016      	b.n	80060a8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fab8 	bl	80065f8 <USBD_StdEPReq>
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]
      break;
 800608c:	e00c      	b.n	80060a8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006094:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006098:	b2db      	uxtb	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fbe9 	bl	8007874 <USBD_LL_StallEP>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
      break;
 80060a6:	bf00      	nop
  }

  return ret;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	460b      	mov	r3, r1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d137      	bne.n	8006136 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d14a      	bne.n	800616e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d913      	bls.n	800610c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bf28      	it	cs
 80060fe:	4613      	movcs	r3, r2
 8006100:	461a      	mov	r2, r3
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 ffad 	bl	8007064 <USBD_CtlContinueRx>
 800610a:	e030      	b.n	800616e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800611e:	2b03      	cmp	r3, #3
 8006120:	d105      	bne.n	800612e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 ffa9 	bl	8007086 <USBD_CtlSendStatus>
 8006134:	e01b      	b.n	800616e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d013      	beq.n	800616a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006148:	2b03      	cmp	r3, #3
 800614a:	d10e      	bne.n	800616a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	7afa      	ldrb	r2, [r7, #11]
 8006156:	4611      	mov	r1, r2
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	4798      	blx	r3
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	e002      	b.n	8006170 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800616a:	2303      	movs	r3, #3
 800616c:	e000      	b.n	8006170 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	460b      	mov	r3, r1
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d16a      	bne.n	8006262 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3314      	adds	r3, #20
 8006190:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006198:	2b02      	cmp	r3, #2
 800619a:	d155      	bne.n	8006248 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d914      	bls.n	80061d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	1ad2      	subs	r2, r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 ff22 	bl	8007008 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061c4:	2300      	movs	r3, #0
 80061c6:	2200      	movs	r2, #0
 80061c8:	2100      	movs	r1, #0
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f001 fbfc 	bl	80079c8 <USBD_LL_PrepareReceive>
 80061d0:	e03a      	b.n	8006248 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d11c      	bne.n	8006218 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d316      	bcc.n	8006218 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d20f      	bcs.n	8006218 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061f8:	2200      	movs	r2, #0
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 ff03 	bl	8007008 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800620a:	2300      	movs	r3, #0
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 fbd9 	bl	80079c8 <USBD_LL_PrepareReceive>
 8006216:	e017      	b.n	8006248 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800622a:	2b03      	cmp	r3, #3
 800622c:	d105      	bne.n	800623a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 fb19 	bl	8007874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 ff32 	bl	80070ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d123      	bne.n	800629a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fe9b 	bl	8005f8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006260:	e01b      	b.n	800629a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006274:	2b03      	cmp	r3, #3
 8006276:	d10e      	bne.n	8006296 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	7afa      	ldrb	r2, [r7, #11]
 8006282:	4611      	mov	r1, r2
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	e002      	b.n	800629c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006296:	2303      	movs	r3, #3
 8006298:	e000      	b.n	800629c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6852      	ldr	r2, [r2, #4]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	4611      	mov	r1, r2
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 fa7b 	bl	80077ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2240      	movs	r2, #64	; 0x40
 8006300:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	2200      	movs	r2, #0
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fa6d 	bl	80077ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2240      	movs	r2, #64	; 0x40
 800631a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637e:	2b04      	cmp	r3, #4
 8006380:	d105      	bne.n	800638e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d10b      	bne.n	80063c6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6852      	ldr	r2, [r2, #4]
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	4611      	mov	r1, r2
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
  }

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006452:	b480      	push	{r7}
 8006454:	b087      	sub	sp, #28
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3301      	adds	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006470:	8a3b      	ldrh	r3, [r7, #16]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	b21a      	sxth	r2, r3
 8006476:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800647a:	4313      	orrs	r3, r2
 800647c:	b21b      	sxth	r3, r3
 800647e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006480:	89fb      	ldrh	r3, [r7, #14]
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d004      	beq.n	80064b4 <USBD_StdDevReq+0x24>
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d002      	beq.n	80064b4 <USBD_StdDevReq+0x24>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <USBD_StdDevReq+0x38>
 80064b2:	e050      	b.n	8006556 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
    break;
 80064c6:	e04b      	b.n	8006560 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b09      	cmp	r3, #9
 80064ce:	d83c      	bhi.n	800654a <USBD_StdDevReq+0xba>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <USBD_StdDevReq+0x48>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	08006541 	.word	0x08006541
 80064e0:	0800654b 	.word	0x0800654b
 80064e4:	08006537 	.word	0x08006537
 80064e8:	0800654b 	.word	0x0800654b
 80064ec:	0800650b 	.word	0x0800650b
 80064f0:	08006501 	.word	0x08006501
 80064f4:	0800654b 	.word	0x0800654b
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006515 	.word	0x08006515
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9ce 	bl	80068a4 <USBD_GetDescriptor>
      break;
 8006508:	e024      	b.n	8006554 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb33 	bl	8006b78 <USBD_SetAddress>
      break;
 8006512:	e01f      	b.n	8006554 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb70 	bl	8006bfc <USBD_SetConfig>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e018      	b.n	8006554 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fc0d 	bl	8006d44 <USBD_GetConfig>
      break;
 800652a:	e013      	b.n	8006554 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fc3c 	bl	8006dac <USBD_GetStatus>
      break;
 8006534:	e00e      	b.n	8006554 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fc6a 	bl	8006e12 <USBD_SetFeature>
      break;
 800653e:	e009      	b.n	8006554 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fc79 	bl	8006e3a <USBD_ClrFeature>
      break;
 8006548:	e004      	b.n	8006554 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fccf 	bl	8006ef0 <USBD_CtlError>
      break;
 8006552:	bf00      	nop
    }
    break;
 8006554:	e004      	b.n	8006560 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fcc9 	bl	8006ef0 <USBD_CtlError>
    break;
 800655e:	bf00      	nop
  }

  return ret;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006582:	2b20      	cmp	r3, #32
 8006584:	d003      	beq.n	800658e <USBD_StdItfReq+0x22>
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d001      	beq.n	800658e <USBD_StdItfReq+0x22>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d12a      	bne.n	80065e4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006594:	3b01      	subs	r3, #1
 8006596:	2b02      	cmp	r3, #2
 8006598:	d81d      	bhi.n	80065d6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	889b      	ldrh	r3, [r3, #4]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d813      	bhi.n	80065cc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	88db      	ldrh	r3, [r3, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d110      	bne.n	80065e0 <USBD_StdItfReq+0x74>
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10d      	bne.n	80065e0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fd5e 	bl	8007086 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80065ca:	e009      	b.n	80065e0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fc8e 	bl	8006ef0 <USBD_CtlError>
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fc89 	bl	8006ef0 <USBD_CtlError>
      break;
 80065de:	e000      	b.n	80065e2 <USBD_StdItfReq+0x76>
      break;
 80065e0:	bf00      	nop
    }
    break;
 80065e2:	e004      	b.n	80065ee <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fc82 	bl	8006ef0 <USBD_CtlError>
    break;
 80065ec:	bf00      	nop
  }

  return ret;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	889b      	ldrh	r3, [r3, #4]
 800660a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006614:	2b20      	cmp	r3, #32
 8006616:	d004      	beq.n	8006622 <USBD_StdEPReq+0x2a>
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d002      	beq.n	8006622 <USBD_StdEPReq+0x2a>
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <USBD_StdEPReq+0x3e>
 8006620:	e135      	b.n	800688e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	4798      	blx	r3
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
    break;
 8006634:	e130      	b.n	8006898 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d03e      	beq.n	80066bc <USBD_StdEPReq+0xc4>
 800663e:	2b03      	cmp	r3, #3
 8006640:	d002      	beq.n	8006648 <USBD_StdEPReq+0x50>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d077      	beq.n	8006736 <USBD_StdEPReq+0x13e>
 8006646:	e11c      	b.n	8006882 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <USBD_StdEPReq+0x60>
 8006652:	2b03      	cmp	r3, #3
 8006654:	d015      	beq.n	8006682 <USBD_StdEPReq+0x8a>
 8006656:	e02b      	b.n	80066b0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <USBD_StdEPReq+0x80>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d009      	beq.n	8006678 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f903 	bl	8007874 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 f8ff 	bl	8007874 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006676:	e020      	b.n	80066ba <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fc38 	bl	8006ef0 <USBD_CtlError>
        break;
 8006680:	e01b      	b.n	80066ba <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	885b      	ldrh	r3, [r3, #2]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10e      	bne.n	80066a8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <USBD_StdEPReq+0xb0>
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d008      	beq.n	80066a8 <USBD_StdEPReq+0xb0>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	88db      	ldrh	r3, [r3, #6]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 f8e6 	bl	8007874 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fcec 	bl	8007086 <USBD_CtlSendStatus>

        break;
 80066ae:	e004      	b.n	80066ba <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fc1c 	bl	8006ef0 <USBD_CtlError>
        break;
 80066b8:	bf00      	nop
      }
      break;
 80066ba:	e0e7      	b.n	800688c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d002      	beq.n	80066cc <USBD_StdEPReq+0xd4>
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d015      	beq.n	80066f6 <USBD_StdEPReq+0xfe>
 80066ca:	e02d      	b.n	8006728 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <USBD_StdEPReq+0xf4>
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d009      	beq.n	80066ec <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f8c9 	bl	8007874 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f8c5 	bl	8007874 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066ea:	e023      	b.n	8006734 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fbfe 	bl	8006ef0 <USBD_CtlError>
        break;
 80066f4:	e01e      	b.n	8006734 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d119      	bne.n	8006732 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f8d0 	bl	80078b2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fcb7 	bl	8007086 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
        }
        break;
 8006726:	e004      	b.n	8006732 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fbe0 	bl	8006ef0 <USBD_CtlError>
        break;
 8006730:	e000      	b.n	8006734 <USBD_StdEPReq+0x13c>
        break;
 8006732:	bf00      	nop
      }
      break;
 8006734:	e0aa      	b.n	800688c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673c:	2b02      	cmp	r3, #2
 800673e:	d002      	beq.n	8006746 <USBD_StdEPReq+0x14e>
 8006740:	2b03      	cmp	r3, #3
 8006742:	d032      	beq.n	80067aa <USBD_StdEPReq+0x1b2>
 8006744:	e097      	b.n	8006876 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <USBD_StdEPReq+0x164>
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b80      	cmp	r3, #128	; 0x80
 8006750:	d004      	beq.n	800675c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fbcb 	bl	8006ef0 <USBD_CtlError>
          break;
 800675a:	e091      	b.n	8006880 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	da0b      	bge.n	800677c <USBD_StdEPReq+0x184>
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	3310      	adds	r3, #16
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	e00b      	b.n	8006794 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	3304      	adds	r3, #4
 8006794:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2202      	movs	r2, #2
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fc15 	bl	8006fd2 <USBD_CtlSendData>
        break;
 80067a8:	e06a      	b.n	8006880 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80067aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da11      	bge.n	80067d6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3324      	adds	r3, #36	; 0x24
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d117      	bne.n	80067fc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fb8e 	bl	8006ef0 <USBD_CtlError>
            break;
 80067d4:	e054      	b.n	8006880 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	f003 020f 	and.w	r2, r3, #15
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb7b 	bl	8006ef0 <USBD_CtlError>
            break;
 80067fa:	e041      	b.n	8006880 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006800:	2b00      	cmp	r3, #0
 8006802:	da0b      	bge.n	800681c <USBD_StdEPReq+0x224>
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	3310      	adds	r3, #16
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4413      	add	r3, r2
 8006818:	3304      	adds	r3, #4
 800681a:	e00b      	b.n	8006834 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	3304      	adds	r3, #4
 8006834:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <USBD_StdEPReq+0x24a>
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b80      	cmp	r3, #128	; 0x80
 8006840:	d103      	bne.n	800684a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e00e      	b.n	8006868 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 f84e 	bl	80078f0 <USBD_LL_IsStallEP>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e002      	b.n	8006868 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2202      	movs	r2, #2
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fbaf 	bl	8006fd2 <USBD_CtlSendData>
          break;
 8006874:	e004      	b.n	8006880 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb39 	bl	8006ef0 <USBD_CtlError>
        break;
 800687e:	bf00      	nop
      }
      break;
 8006880:	e004      	b.n	800688c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb33 	bl	8006ef0 <USBD_CtlError>
      break;
 800688a:	bf00      	nop
    }
    break;
 800688c:	e004      	b.n	8006898 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fb2d 	bl	8006ef0 <USBD_CtlError>
    break;
 8006896:	bf00      	nop
  }

  return ret;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	885b      	ldrh	r3, [r3, #2]
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	f200 8128 	bhi.w	8006b1a <USBD_GetDescriptor+0x276>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <USBD_GetDescriptor+0x2c>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	080068ed 	.word	0x080068ed
 80068d4:	08006905 	.word	0x08006905
 80068d8:	08006945 	.word	0x08006945
 80068dc:	08006b1b 	.word	0x08006b1b
 80068e0:	08006b1b 	.word	0x08006b1b
 80068e4:	08006abb 	.word	0x08006abb
 80068e8:	08006ae7 	.word	0x08006ae7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
    break;
 8006902:	e112      	b.n	8006b2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7c1b      	ldrb	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10d      	bne.n	8006928 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f107 0208 	add.w	r2, r7, #8
 8006918:	4610      	mov	r0, r2
 800691a:	4798      	blx	r3
 800691c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3301      	adds	r3, #1
 8006922:	2202      	movs	r2, #2
 8006924:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006926:	e100      	b.n	8006b2a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	f107 0208 	add.w	r2, r7, #8
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
 8006938:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	2202      	movs	r2, #2
 8006940:	701a      	strb	r2, [r3, #0]
    break;
 8006942:	e0f2      	b.n	8006b2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	885b      	ldrh	r3, [r3, #2]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b05      	cmp	r3, #5
 800694c:	f200 80ac 	bhi.w	8006aa8 <USBD_GetDescriptor+0x204>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <USBD_GetDescriptor+0xb4>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006971 	.word	0x08006971
 800695c:	080069a5 	.word	0x080069a5
 8006960:	080069d9 	.word	0x080069d9
 8006964:	08006a0d 	.word	0x08006a0d
 8006968:	08006a41 	.word	0x08006a41
 800696c:	08006a75 	.word	0x08006a75
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7c12      	ldrb	r2, [r2, #16]
 8006988:	f107 0108 	add.w	r1, r7, #8
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
 8006990:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006992:	e091      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 faaa 	bl	8006ef0 <USBD_CtlError>
        err++;
 800699c:	7afb      	ldrb	r3, [r7, #11]
 800699e:	3301      	adds	r3, #1
 80069a0:	72fb      	strb	r3, [r7, #11]
      break;
 80069a2:	e089      	b.n	8006ab8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
 80069bc:	f107 0108 	add.w	r1, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069c6:	e077      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa90 	bl	8006ef0 <USBD_CtlError>
        err++;
 80069d0:	7afb      	ldrb	r3, [r7, #11]
 80069d2:	3301      	adds	r3, #1
 80069d4:	72fb      	strb	r3, [r7, #11]
      break;
 80069d6:	e06f      	b.n	8006ab8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	f107 0108 	add.w	r1, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069fa:	e05d      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa76 	bl	8006ef0 <USBD_CtlError>
        err++;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	3301      	adds	r3, #1
 8006a08:	72fb      	strb	r3, [r7, #11]
      break;
 8006a0a:	e055      	b.n	8006ab8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a2e:	e043      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa5c 	bl	8006ef0 <USBD_CtlError>
        err++;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a3e:	e03b      	b.n	8006ab8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	7c12      	ldrb	r2, [r2, #16]
 8006a58:	f107 0108 	add.w	r1, r7, #8
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a62:	e029      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa42 	bl	8006ef0 <USBD_CtlError>
        err++;
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	72fb      	strb	r3, [r7, #11]
      break;
 8006a72:	e021      	b.n	8006ab8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7c12      	ldrb	r2, [r2, #16]
 8006a8c:	f107 0108 	add.w	r1, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a96:	e00f      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa28 	bl	8006ef0 <USBD_CtlError>
        err++;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa6:	e007      	b.n	8006ab8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa20 	bl	8006ef0 <USBD_CtlError>
      err++;
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006ab6:	bf00      	nop
    }
    break;
 8006ab8:	e037      	b.n	8006b2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7c1b      	ldrb	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aca:	f107 0208 	add.w	r2, r7, #8
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4798      	blx	r3
 8006ad2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006ad4:	e029      	b.n	8006b2a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fa09 	bl	8006ef0 <USBD_CtlError>
      err++;
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	72fb      	strb	r3, [r7, #11]
    break;
 8006ae4:	e021      	b.n	8006b2a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7c1b      	ldrb	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	f107 0208 	add.w	r2, r7, #8
 8006afa:	4610      	mov	r0, r2
 8006afc:	4798      	blx	r3
 8006afe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	2207      	movs	r2, #7
 8006b06:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b08:	e00f      	b.n	8006b2a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f9ef 	bl	8006ef0 <USBD_CtlError>
      err++;
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	3301      	adds	r3, #1
 8006b16:	72fb      	strb	r3, [r7, #11]
    break;
 8006b18:	e007      	b.n	8006b2a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9e7 	bl	8006ef0 <USBD_CtlError>
    err++;
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	3301      	adds	r3, #1
 8006b26:	72fb      	strb	r3, [r7, #11]
    break;
 8006b28:	bf00      	nop
  }

  if (err != 0U)
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11e      	bne.n	8006b6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	88db      	ldrh	r3, [r3, #6]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d016      	beq.n	8006b66 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006b38:	893b      	ldrh	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88da      	ldrh	r2, [r3, #6]
 8006b42:	893b      	ldrh	r3, [r7, #8]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	bf28      	it	cs
 8006b48:	4613      	movcs	r3, r2
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b4e:	893b      	ldrh	r3, [r7, #8]
 8006b50:	461a      	mov	r2, r3
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa3c 	bl	8006fd2 <USBD_CtlSendData>
 8006b5a:	e009      	b.n	8006b70 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9c6 	bl	8006ef0 <USBD_CtlError>
 8006b64:	e004      	b.n	8006b70 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa8d 	bl	8007086 <USBD_CtlSendStatus>
 8006b6c:	e000      	b.n	8006b70 <USBD_GetDescriptor+0x2cc>
    return;
 8006b6e:	bf00      	nop
    }
  }
}
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop

08006b78 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	889b      	ldrh	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d130      	bne.n	8006bec <USBD_SetAddress+0x74>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	88db      	ldrh	r3, [r3, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d12c      	bne.n	8006bec <USBD_SetAddress+0x74>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	2b7f      	cmp	r3, #127	; 0x7f
 8006b98:	d828      	bhi.n	8006bec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d104      	bne.n	8006bba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f99c 	bl	8006ef0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb8:	e01c      	b.n	8006bf4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 febe 	bl	8007948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fa5a 	bl	8007086 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be0:	e008      	b.n	8006bf4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bea:	e003      	b.n	8006bf4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f97e 	bl	8006ef0 <USBD_CtlError>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	4b4b      	ldr	r3, [pc, #300]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c14:	4b4a      	ldr	r3, [pc, #296]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d905      	bls.n	8006c28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f966 	bl	8006ef0 <USBD_CtlError>
    return USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e087      	b.n	8006d38 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d002      	beq.n	8006c38 <USBD_SetConfig+0x3c>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d025      	beq.n	8006c82 <USBD_SetConfig+0x86>
 8006c36:	e071      	b.n	8006d1c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006c38:	4b41      	ldr	r3, [pc, #260]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01c      	beq.n	8006c7a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006c40:	4b3f      	ldr	r3, [pc, #252]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c4a:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff f9a7 	bl	8005fa4 <USBD_SetClassConfig>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f944 	bl	8006ef0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c68:	e065      	b.n	8006d36 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa0b 	bl	8007086 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2203      	movs	r2, #3
 8006c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c78:	e05d      	b.n	8006d36 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa03 	bl	8007086 <USBD_CtlSendStatus>
    break;
 8006c80:	e059      	b.n	8006d36 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006c82:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d112      	bne.n	8006cb0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006c92:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c9c:	4b28      	ldr	r3, [pc, #160]	; (8006d40 <USBD_SetConfig+0x144>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff f99a 	bl	8005fdc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f9ec 	bl	8007086 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006cae:	e042      	b.n	8006d36 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006cb0:	4b23      	ldr	r3, [pc, #140]	; (8006d40 <USBD_SetConfig+0x144>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d02a      	beq.n	8006d14 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff f988 	bl	8005fdc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006ccc:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <USBD_SetConfig+0x144>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <USBD_SetConfig+0x144>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff f961 	bl	8005fa4 <USBD_SetClassConfig>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00f      	beq.n	8006d0c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8fe 	bl	8006ef0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff f96d 	bl	8005fdc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2202      	movs	r2, #2
 8006d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d0a:	e014      	b.n	8006d36 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9ba 	bl	8007086 <USBD_CtlSendStatus>
    break;
 8006d12:	e010      	b.n	8006d36 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9b6 	bl	8007086 <USBD_CtlSendStatus>
    break;
 8006d1a:	e00c      	b.n	8006d36 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8e6 	bl	8006ef0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <USBD_SetConfig+0x144>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff f956 	bl	8005fdc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006d30:	2303      	movs	r3, #3
 8006d32:	73fb      	strb	r3, [r7, #15]
    break;
 8006d34:	bf00      	nop
  }

  return ret;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000204 	.word	0x20000204

08006d44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d004      	beq.n	8006d60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f8c9 	bl	8006ef0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006d5e:	e021      	b.n	8006da4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	db17      	blt.n	8006d9a <USBD_GetConfig+0x56>
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	dd02      	ble.n	8006d74 <USBD_GetConfig+0x30>
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d00b      	beq.n	8006d8a <USBD_GetConfig+0x46>
 8006d72:	e012      	b.n	8006d9a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f925 	bl	8006fd2 <USBD_CtlSendData>
      break;
 8006d88:	e00c      	b.n	8006da4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f91d 	bl	8006fd2 <USBD_CtlSendData>
      break;
 8006d98:	e004      	b.n	8006da4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8a7 	bl	8006ef0 <USBD_CtlError>
      break;
 8006da2:	bf00      	nop
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d81e      	bhi.n	8006e00 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d004      	beq.n	8006dd4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f88f 	bl	8006ef0 <USBD_CtlError>
      break;
 8006dd2:	e01a      	b.n	8006e0a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f043 0202 	orr.w	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	330c      	adds	r3, #12
 8006df4:	2202      	movs	r2, #2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f8ea 	bl	8006fd2 <USBD_CtlSendData>
    break;
 8006dfe:	e004      	b.n	8006e0a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f874 	bl	8006ef0 <USBD_CtlError>
    break;
 8006e08:	bf00      	nop
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	885b      	ldrh	r3, [r3, #2]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d106      	bne.n	8006e32 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f92a 	bl	8007086 <USBD_CtlSendStatus>
  }
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d80b      	bhi.n	8006e68 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	885b      	ldrh	r3, [r3, #2]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d10c      	bne.n	8006e72 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f910 	bl	8007086 <USBD_CtlSendStatus>
      }
      break;
 8006e66:	e004      	b.n	8006e72 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f840 	bl	8006ef0 <USBD_CtlError>
      break;
 8006e70:	e000      	b.n	8006e74 <USBD_ClrFeature+0x3a>
      break;
 8006e72:	bf00      	nop
  }
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff fad3 	bl	8006452 <SWAPBYTE>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff fac6 	bl	8006452 <SWAPBYTE>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fab9 	bl	8006452 <SWAPBYTE>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	80da      	strh	r2, [r3, #6]
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006efa:	2180      	movs	r1, #128	; 0x80
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fcb9 	bl	8007874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f02:	2100      	movs	r1, #0
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fcb5 	bl	8007874 <USBD_LL_StallEP>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d036      	beq.n	8006f96 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f000 f836 	bl	8006f9e <USBD_GetLen>
 8006f32:	4603      	mov	r3, r0
 8006f34:	3301      	adds	r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4413      	add	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4413      	add	r3, r2
 8006f58:	2203      	movs	r2, #3
 8006f5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f62:	e013      	b.n	8006f8c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	4413      	add	r3, r2
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3301      	adds	r3, #1
 8006f74:	613b      	str	r3, [r7, #16]
    idx++;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e7      	bne.n	8006f64 <USBD_GetString+0x52>
 8006f94:	e000      	b.n	8006f98 <USBD_GetString+0x86>
    return;
 8006f96:	bf00      	nop
  }
}
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006fae:	e005      	b.n	8006fbc <USBD_GetLen+0x1e>
  {
    len++;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f5      	bne.n	8006fb0 <USBD_GetLen+0x12>
  }

  return len;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fcc4 	bl	8007986 <USBD_LL_Transmit>

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	2100      	movs	r1, #0
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fcb3 	bl	8007986 <USBD_LL_Transmit>

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2203      	movs	r2, #3
 800703a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	2100      	movs	r1, #0
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fcb7 	bl	80079c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	2100      	movs	r1, #0
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fca6 	bl	80079c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2204      	movs	r2, #4
 8007092:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007096:	2300      	movs	r3, #0
 8007098:	2200      	movs	r2, #0
 800709a:	2100      	movs	r1, #0
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fc72 	bl	8007986 <USBD_LL_Transmit>

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2205      	movs	r2, #5
 80070b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070bc:	2300      	movs	r3, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc80 	bl	80079c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070d8:	2200      	movs	r2, #0
 80070da:	4912      	ldr	r1, [pc, #72]	; (8007124 <MX_USB_DEVICE_Init+0x50>)
 80070dc:	4812      	ldr	r0, [pc, #72]	; (8007128 <MX_USB_DEVICE_Init+0x54>)
 80070de:	f7fe fef3 	bl	8005ec8 <USBD_Init>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070e8:	f7f9 fb7c 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070ec:	490f      	ldr	r1, [pc, #60]	; (800712c <MX_USB_DEVICE_Init+0x58>)
 80070ee:	480e      	ldr	r0, [pc, #56]	; (8007128 <MX_USB_DEVICE_Init+0x54>)
 80070f0:	f7fe ff20 	bl	8005f34 <USBD_RegisterClass>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070fa:	f7f9 fb73 	bl	80007e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070fe:	490c      	ldr	r1, [pc, #48]	; (8007130 <MX_USB_DEVICE_Init+0x5c>)
 8007100:	4809      	ldr	r0, [pc, #36]	; (8007128 <MX_USB_DEVICE_Init+0x54>)
 8007102:	f7fe fe75 	bl	8005df0 <USBD_CDC_RegisterInterface>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800710c:	f7f9 fb6a 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007110:	4805      	ldr	r0, [pc, #20]	; (8007128 <MX_USB_DEVICE_Init+0x54>)
 8007112:	f7fe ff30 	bl	8005f76 <USBD_Start>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800711c:	f7f9 fb62 	bl	80007e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007120:	bf00      	nop
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000130 	.word	0x20000130
 8007128:	20000374 	.word	0x20000374
 800712c:	20000018 	.word	0x20000018
 8007130:	2000011c 	.word	0x2000011c

08007134 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007138:	2200      	movs	r2, #0
 800713a:	4905      	ldr	r1, [pc, #20]	; (8007150 <CDC_Init_FS+0x1c>)
 800713c:	4805      	ldr	r0, [pc, #20]	; (8007154 <CDC_Init_FS+0x20>)
 800713e:	f7fe fe6c 	bl	8005e1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007142:	4905      	ldr	r1, [pc, #20]	; (8007158 <CDC_Init_FS+0x24>)
 8007144:	4803      	ldr	r0, [pc, #12]	; (8007154 <CDC_Init_FS+0x20>)
 8007146:	f7fe fe81 	bl	8005e4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800714a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800714c:	4618      	mov	r0, r3
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000e44 	.word	0x20000e44
 8007154:	20000374 	.word	0x20000374
 8007158:	20000644 	.word	0x20000644

0800715c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007160:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007162:	4618      	mov	r0, r3
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
 8007178:	4613      	mov	r3, r2
 800717a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	2b23      	cmp	r3, #35	; 0x23
 8007180:	d84a      	bhi.n	8007218 <CDC_Control_FS+0xac>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <CDC_Control_FS+0x1c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	08007219 	.word	0x08007219
 800718c:	08007219 	.word	0x08007219
 8007190:	08007219 	.word	0x08007219
 8007194:	08007219 	.word	0x08007219
 8007198:	08007219 	.word	0x08007219
 800719c:	08007219 	.word	0x08007219
 80071a0:	08007219 	.word	0x08007219
 80071a4:	08007219 	.word	0x08007219
 80071a8:	08007219 	.word	0x08007219
 80071ac:	08007219 	.word	0x08007219
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007219 	.word	0x08007219
 80071b8:	08007219 	.word	0x08007219
 80071bc:	08007219 	.word	0x08007219
 80071c0:	08007219 	.word	0x08007219
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007219 	.word	0x08007219
 80071cc:	08007219 	.word	0x08007219
 80071d0:	08007219 	.word	0x08007219
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007219 	.word	0x08007219
 80071dc:	08007219 	.word	0x08007219
 80071e0:	08007219 	.word	0x08007219
 80071e4:	08007219 	.word	0x08007219
 80071e8:	08007219 	.word	0x08007219
 80071ec:	08007219 	.word	0x08007219
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007219 	.word	0x08007219
 80071fc:	08007219 	.word	0x08007219
 8007200:	08007219 	.word	0x08007219
 8007204:	08007219 	.word	0x08007219
 8007208:	08007219 	.word	0x08007219
 800720c:	08007219 	.word	0x08007219
 8007210:	08007219 	.word	0x08007219
 8007214:	08007219 	.word	0x08007219
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007218:	bf00      	nop
  }

  return (USBD_OK);
 800721a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	4805      	ldr	r0, [pc, #20]	; (800724c <CDC_Receive_FS+0x24>)
 8007236:	f7fe fe09 	bl	8005e4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800723a:	4804      	ldr	r0, [pc, #16]	; (800724c <CDC_Receive_FS+0x24>)
 800723c:	f7fe fe1a 	bl	8005e74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007240:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000374 	.word	0x20000374

08007250 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2212      	movs	r2, #18
 8007284:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	2000014c 	.word	0x2000014c

08007298 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	6039      	str	r1, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2204      	movs	r2, #4
 80072a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000160 	.word	0x20000160

080072bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	6039      	str	r1, [r7, #0]
 80072c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d105      	bne.n	80072da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	4907      	ldr	r1, [pc, #28]	; (80072f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80072d2:	4808      	ldr	r0, [pc, #32]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80072d4:	f7ff fe1d 	bl	8006f12 <USBD_GetString>
 80072d8:	e004      	b.n	80072e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	4904      	ldr	r1, [pc, #16]	; (80072f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80072de:	4805      	ldr	r0, [pc, #20]	; (80072f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80072e0:	f7ff fe17 	bl	8006f12 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072e4:	4b02      	ldr	r3, [pc, #8]	; (80072f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20001644 	.word	0x20001644
 80072f4:	08007c98 	.word	0x08007c98

080072f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	4904      	ldr	r1, [pc, #16]	; (8007318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007308:	4804      	ldr	r0, [pc, #16]	; (800731c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800730a:	f7ff fe02 	bl	8006f12 <USBD_GetString>
  return USBD_StrDesc;
 800730e:	4b02      	ldr	r3, [pc, #8]	; (8007318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20001644 	.word	0x20001644
 800731c:	08007cb0 	.word	0x08007cb0

08007320 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	221a      	movs	r2, #26
 8007330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007332:	f000 f843 	bl	80073bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007336:	4b02      	ldr	r3, [pc, #8]	; (8007340 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000164 	.word	0x20000164

08007344 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d105      	bne.n	8007362 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4907      	ldr	r1, [pc, #28]	; (8007378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800735a:	4808      	ldr	r0, [pc, #32]	; (800737c <USBD_FS_ConfigStrDescriptor+0x38>)
 800735c:	f7ff fdd9 	bl	8006f12 <USBD_GetString>
 8007360:	e004      	b.n	800736c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	4904      	ldr	r1, [pc, #16]	; (8007378 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007366:	4805      	ldr	r0, [pc, #20]	; (800737c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007368:	f7ff fdd3 	bl	8006f12 <USBD_GetString>
  }
  return USBD_StrDesc;
 800736c:	4b02      	ldr	r3, [pc, #8]	; (8007378 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20001644 	.word	0x20001644
 800737c:	08007cc4 	.word	0x08007cc4

08007380 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4907      	ldr	r1, [pc, #28]	; (80073b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007396:	4808      	ldr	r0, [pc, #32]	; (80073b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007398:	f7ff fdbb 	bl	8006f12 <USBD_GetString>
 800739c:	e004      	b.n	80073a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4904      	ldr	r1, [pc, #16]	; (80073b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073a2:	4805      	ldr	r0, [pc, #20]	; (80073b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073a4:	f7ff fdb5 	bl	8006f12 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20001644 	.word	0x20001644
 80073b8:	08007cd0 	.word	0x08007cd0

080073bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <Get_SerialNum+0x44>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <Get_SerialNum+0x48>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <Get_SerialNum+0x4c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4413      	add	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073e2:	2208      	movs	r2, #8
 80073e4:	4909      	ldr	r1, [pc, #36]	; (800740c <Get_SerialNum+0x50>)
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f814 	bl	8007414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073ec:	2204      	movs	r2, #4
 80073ee:	4908      	ldr	r1, [pc, #32]	; (8007410 <Get_SerialNum+0x54>)
 80073f0:	68b8      	ldr	r0, [r7, #8]
 80073f2:	f000 f80f 	bl	8007414 <IntToUnicode>
  }
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	1fff7a10 	.word	0x1fff7a10
 8007404:	1fff7a14 	.word	0x1fff7a14
 8007408:	1fff7a18 	.word	0x1fff7a18
 800740c:	20000166 	.word	0x20000166
 8007410:	20000176 	.word	0x20000176

08007414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007426:	2300      	movs	r3, #0
 8007428:	75fb      	strb	r3, [r7, #23]
 800742a:	e027      	b.n	800747c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	0f1b      	lsrs	r3, r3, #28
 8007430:	2b09      	cmp	r3, #9
 8007432:	d80b      	bhi.n	800744c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0f1b      	lsrs	r3, r3, #28
 8007438:	b2da      	uxtb	r2, r3
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	4619      	mov	r1, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	440b      	add	r3, r1
 8007444:	3230      	adds	r2, #48	; 0x30
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e00a      	b.n	8007462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	0f1b      	lsrs	r3, r3, #28
 8007450:	b2da      	uxtb	r2, r3
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4619      	mov	r1, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	440b      	add	r3, r1
 800745c:	3237      	adds	r2, #55	; 0x37
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	3301      	adds	r3, #1
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	3301      	adds	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
 800747c:	7dfa      	ldrb	r2, [r7, #23]
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	429a      	cmp	r2, r3
 8007482:	d3d3      	bcc.n	800742c <IntToUnicode+0x18>
  }
}
 8007484:	bf00      	nop
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b0:	d13a      	bne.n	8007528 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	6313      	str	r3, [r2, #48]	; 0x30
 80074c2:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d4:	2302      	movs	r3, #2
 80074d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074dc:	2303      	movs	r3, #3
 80074de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074e0:	230a      	movs	r3, #10
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e4:	f107 0314 	add.w	r3, r7, #20
 80074e8:	4619      	mov	r1, r3
 80074ea:	4812      	ldr	r0, [pc, #72]	; (8007534 <HAL_PCD_MspInit+0xa4>)
 80074ec:	f7f9 ffb6 	bl	800145c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074f0:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 80074f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f4:	4a0e      	ldr	r2, [pc, #56]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 80074f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fa:	6353      	str	r3, [r2, #52]	; 0x34
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	4a0a      	ldr	r2, [pc, #40]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 8007506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800750a:	6453      	str	r3, [r2, #68]	; 0x44
 800750c:	4b08      	ldr	r3, [pc, #32]	; (8007530 <HAL_PCD_MspInit+0xa0>)
 800750e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	2043      	movs	r0, #67	; 0x43
 800751e:	f7f9 fc5c 	bl	8000dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007522:	2043      	movs	r0, #67	; 0x43
 8007524:	f7f9 fc75 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007528:	bf00      	nop
 800752a:	3728      	adds	r7, #40	; 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40023800 	.word	0x40023800
 8007534:	40020000 	.word	0x40020000

08007538 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fe fd5c 	bl	800600c <USBD_LL_SetupStage>
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	4619      	mov	r1, r3
 8007586:	f7fe fd94 	bl	80060b2 <USBD_LL_DataOutStage>
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3348      	adds	r3, #72	; 0x48
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	4619      	mov	r1, r3
 80075ba:	f7fe fddd 	bl	8006178 <USBD_LL_DataInStage>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fee1 	bl	800639c <USBD_LL_SOF>
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075ea:	2301      	movs	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
 80075fa:	e008      	b.n	800760e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d102      	bne.n	800760a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e001      	b.n	800760e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800760a:	f7f9 f8eb 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007614:	7bfa      	ldrb	r2, [r7, #15]
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fe84 	bl	8006326 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fe3d 	bl	80062a4 <USBD_LL_Reset>
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fe7f 	bl	8006346 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <HAL_PCD_SuspendCallback+0x48>)
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	4a03      	ldr	r2, [pc, #12]	; (800767c <HAL_PCD_SuspendCallback+0x48>)
 800766e:	f043 0306 	orr.w	r3, r3, #6
 8007672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed00 	.word	0xe000ed00

08007680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fe6e 	bl	8006370 <USBD_LL_Resume>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fe99 	bl	80063ea <USBD_LL_IsoOUTIncomplete>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fe7a 	bl	80063d0 <USBD_LL_IsoINIncomplete>
}
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fe86 	bl	8006404 <USBD_LL_DevConnected>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fe83 	bl	800641a <USBD_LL_DevDisconnected>
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d13c      	bne.n	80077a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800772c:	4a20      	ldr	r2, [pc, #128]	; (80077b0 <USBD_LL_Init+0x94>)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <USBD_LL_Init+0x94>)
 8007738:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800773c:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <USBD_LL_Init+0x94>)
 800773e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007744:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <USBD_LL_Init+0x94>)
 8007746:	2204      	movs	r2, #4
 8007748:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800774a:	4b19      	ldr	r3, [pc, #100]	; (80077b0 <USBD_LL_Init+0x94>)
 800774c:	2202      	movs	r2, #2
 800774e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007750:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <USBD_LL_Init+0x94>)
 8007752:	2200      	movs	r2, #0
 8007754:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007756:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <USBD_LL_Init+0x94>)
 8007758:	2202      	movs	r2, #2
 800775a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800775c:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <USBD_LL_Init+0x94>)
 800775e:	2200      	movs	r2, #0
 8007760:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007762:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <USBD_LL_Init+0x94>)
 8007764:	2200      	movs	r2, #0
 8007766:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007768:	4b11      	ldr	r3, [pc, #68]	; (80077b0 <USBD_LL_Init+0x94>)
 800776a:	2200      	movs	r2, #0
 800776c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800776e:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <USBD_LL_Init+0x94>)
 8007770:	2200      	movs	r2, #0
 8007772:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007774:	4b0e      	ldr	r3, [pc, #56]	; (80077b0 <USBD_LL_Init+0x94>)
 8007776:	2200      	movs	r2, #0
 8007778:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800777a:	480d      	ldr	r0, [pc, #52]	; (80077b0 <USBD_LL_Init+0x94>)
 800777c:	f7fa f84c 	bl	8001818 <HAL_PCD_Init>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007786:	f7f9 f82d 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800778a:	2180      	movs	r1, #128	; 0x80
 800778c:	4808      	ldr	r0, [pc, #32]	; (80077b0 <USBD_LL_Init+0x94>)
 800778e:	f7fb f9aa 	bl	8002ae6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007792:	2240      	movs	r2, #64	; 0x40
 8007794:	2100      	movs	r1, #0
 8007796:	4806      	ldr	r0, [pc, #24]	; (80077b0 <USBD_LL_Init+0x94>)
 8007798:	f7fb f95e 	bl	8002a58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800779c:	2280      	movs	r2, #128	; 0x80
 800779e:	2101      	movs	r1, #1
 80077a0:	4803      	ldr	r0, [pc, #12]	; (80077b0 <USBD_LL_Init+0x94>)
 80077a2:	f7fb f959 	bl	8002a58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20001844 	.word	0x20001844

080077b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa f941 	bl	8001a52 <HAL_PCD_Start>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f92a 	bl	8007a30 <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	4608      	mov	r0, r1
 80077f4:	4611      	mov	r1, r2
 80077f6:	461a      	mov	r2, r3
 80077f8:	4603      	mov	r3, r0
 80077fa:	70fb      	strb	r3, [r7, #3]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70bb      	strb	r3, [r7, #2]
 8007800:	4613      	mov	r3, r2
 8007802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007812:	78bb      	ldrb	r3, [r7, #2]
 8007814:	883a      	ldrh	r2, [r7, #0]
 8007816:	78f9      	ldrb	r1, [r7, #3]
 8007818:	f7fa fd25 	bl	8002266 <HAL_PCD_EP_Open>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f904 	bl	8007a30 <USBD_Get_USB_Status>
 8007828:	4603      	mov	r3, r0
 800782a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800782c:	7bbb      	ldrb	r3, [r7, #14]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f7fa fd6e 	bl	8002336 <HAL_PCD_EP_Close>
 800785a:	4603      	mov	r3, r0
 800785c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f8e5 	bl	8007a30 <USBD_Get_USB_Status>
 8007866:	4603      	mov	r3, r0
 8007868:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800786a:	7bbb      	ldrb	r3, [r7, #14]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7fa fe46 	bl	8002524 <HAL_PCD_EP_SetStall>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f8c6 	bl	8007a30 <USBD_Get_USB_Status>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fa fe8b 	bl	80025ec <HAL_PCD_EP_ClrStall>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 f8a7 	bl	8007a30 <USBD_Get_USB_Status>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007902:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0b      	bge.n	8007924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	333e      	adds	r3, #62	; 0x3e
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	e00b      	b.n	800793c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800792a:	68f9      	ldr	r1, [r7, #12]
 800792c:	4613      	mov	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800793a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f7fa fc58 	bl	800221c <HAL_PCD_SetAddress>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f85c 	bl	8007a30 <USBD_Get_USB_Status>
 8007978:	4603      	mov	r3, r0
 800797a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800797c:	7bbb      	ldrb	r3, [r7, #14]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	460b      	mov	r3, r1
 8007994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079a4:	7af9      	ldrb	r1, [r7, #11]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	f7fa fd71 	bl	8002490 <HAL_PCD_EP_Transmit>
 80079ae:	4603      	mov	r3, r0
 80079b0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 f83b 	bl	8007a30 <USBD_Get_USB_Status>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80079be:	7dbb      	ldrb	r3, [r7, #22]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	460b      	mov	r3, r1
 80079d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079e6:	7af9      	ldrb	r1, [r7, #11]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f7fa fced 	bl	80023ca <HAL_PCD_EP_Receive>
 80079f0:	4603      	mov	r3, r0
 80079f2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f81a 	bl	8007a30 <USBD_Get_USB_Status>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007a00:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fa fd1d 	bl	8002460 <HAL_PCD_EP_GetRxCount>
 8007a26:	4603      	mov	r3, r0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d817      	bhi.n	8007a74 <USBD_Get_USB_Status+0x44>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBD_Get_USB_Status+0x1c>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a63 	.word	0x08007a63
 8007a54:	08007a69 	.word	0x08007a69
 8007a58:	08007a6f 	.word	0x08007a6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a60:	e00b      	b.n	8007a7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	73fb      	strb	r3, [r7, #15]
    break;
 8007a66:	e008      	b.n	8007a7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6c:	e005      	b.n	8007a7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	73fb      	strb	r3, [r7, #15]
    break;
 8007a72:	e002      	b.n	8007a7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	bf00      	nop
  }
  return usb_status;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <__errno>:
 8007a88:	4b01      	ldr	r3, [pc, #4]	; (8007a90 <__errno+0x8>)
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	20000180 	.word	0x20000180

08007a94 <__libc_init_array>:
 8007a94:	b570      	push	{r4, r5, r6, lr}
 8007a96:	4e0d      	ldr	r6, [pc, #52]	; (8007acc <__libc_init_array+0x38>)
 8007a98:	4c0d      	ldr	r4, [pc, #52]	; (8007ad0 <__libc_init_array+0x3c>)
 8007a9a:	1ba4      	subs	r4, r4, r6
 8007a9c:	10a4      	asrs	r4, r4, #2
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	42a5      	cmp	r5, r4
 8007aa2:	d109      	bne.n	8007ab8 <__libc_init_array+0x24>
 8007aa4:	4e0b      	ldr	r6, [pc, #44]	; (8007ad4 <__libc_init_array+0x40>)
 8007aa6:	4c0c      	ldr	r4, [pc, #48]	; (8007ad8 <__libc_init_array+0x44>)
 8007aa8:	f000 f8ea 	bl	8007c80 <_init>
 8007aac:	1ba4      	subs	r4, r4, r6
 8007aae:	10a4      	asrs	r4, r4, #2
 8007ab0:	2500      	movs	r5, #0
 8007ab2:	42a5      	cmp	r5, r4
 8007ab4:	d105      	bne.n	8007ac2 <__libc_init_array+0x2e>
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007abc:	4798      	blx	r3
 8007abe:	3501      	adds	r5, #1
 8007ac0:	e7ee      	b.n	8007aa0 <__libc_init_array+0xc>
 8007ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ac6:	4798      	blx	r3
 8007ac8:	3501      	adds	r5, #1
 8007aca:	e7f2      	b.n	8007ab2 <__libc_init_array+0x1e>
 8007acc:	08007d08 	.word	0x08007d08
 8007ad0:	08007d08 	.word	0x08007d08
 8007ad4:	08007d08 	.word	0x08007d08
 8007ad8:	08007d0c 	.word	0x08007d0c

08007adc <malloc>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <malloc+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f000 b861 	b.w	8007ba8 <_malloc_r>
 8007ae6:	bf00      	nop
 8007ae8:	20000180 	.word	0x20000180

08007aec <free>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <free+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b80b 	b.w	8007b0c <_free_r>
 8007af6:	bf00      	nop
 8007af8:	20000180 	.word	0x20000180

08007afc <memset>:
 8007afc:	4402      	add	r2, r0
 8007afe:	4603      	mov	r3, r0
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d100      	bne.n	8007b06 <memset+0xa>
 8007b04:	4770      	bx	lr
 8007b06:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0a:	e7f9      	b.n	8007b00 <memset+0x4>

08007b0c <_free_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4605      	mov	r5, r0
 8007b10:	2900      	cmp	r1, #0
 8007b12:	d045      	beq.n	8007ba0 <_free_r+0x94>
 8007b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b18:	1f0c      	subs	r4, r1, #4
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bfb8      	it	lt
 8007b1e:	18e4      	addlt	r4, r4, r3
 8007b20:	f000 f8ac 	bl	8007c7c <__malloc_lock>
 8007b24:	4a1f      	ldr	r2, [pc, #124]	; (8007ba4 <_free_r+0x98>)
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	4610      	mov	r0, r2
 8007b2a:	b933      	cbnz	r3, 8007b3a <_free_r+0x2e>
 8007b2c:	6063      	str	r3, [r4, #4]
 8007b2e:	6014      	str	r4, [r2, #0]
 8007b30:	4628      	mov	r0, r5
 8007b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b36:	f000 b8a2 	b.w	8007c7e <__malloc_unlock>
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	d90c      	bls.n	8007b58 <_free_r+0x4c>
 8007b3e:	6821      	ldr	r1, [r4, #0]
 8007b40:	1862      	adds	r2, r4, r1
 8007b42:	4293      	cmp	r3, r2
 8007b44:	bf04      	itt	eq
 8007b46:	681a      	ldreq	r2, [r3, #0]
 8007b48:	685b      	ldreq	r3, [r3, #4]
 8007b4a:	6063      	str	r3, [r4, #4]
 8007b4c:	bf04      	itt	eq
 8007b4e:	1852      	addeq	r2, r2, r1
 8007b50:	6022      	streq	r2, [r4, #0]
 8007b52:	6004      	str	r4, [r0, #0]
 8007b54:	e7ec      	b.n	8007b30 <_free_r+0x24>
 8007b56:	4613      	mov	r3, r2
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	b10a      	cbz	r2, 8007b60 <_free_r+0x54>
 8007b5c:	42a2      	cmp	r2, r4
 8007b5e:	d9fa      	bls.n	8007b56 <_free_r+0x4a>
 8007b60:	6819      	ldr	r1, [r3, #0]
 8007b62:	1858      	adds	r0, r3, r1
 8007b64:	42a0      	cmp	r0, r4
 8007b66:	d10b      	bne.n	8007b80 <_free_r+0x74>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	4401      	add	r1, r0
 8007b6c:	1858      	adds	r0, r3, r1
 8007b6e:	4282      	cmp	r2, r0
 8007b70:	6019      	str	r1, [r3, #0]
 8007b72:	d1dd      	bne.n	8007b30 <_free_r+0x24>
 8007b74:	6810      	ldr	r0, [r2, #0]
 8007b76:	6852      	ldr	r2, [r2, #4]
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	4401      	add	r1, r0
 8007b7c:	6019      	str	r1, [r3, #0]
 8007b7e:	e7d7      	b.n	8007b30 <_free_r+0x24>
 8007b80:	d902      	bls.n	8007b88 <_free_r+0x7c>
 8007b82:	230c      	movs	r3, #12
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	e7d3      	b.n	8007b30 <_free_r+0x24>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	1821      	adds	r1, r4, r0
 8007b8c:	428a      	cmp	r2, r1
 8007b8e:	bf04      	itt	eq
 8007b90:	6811      	ldreq	r1, [r2, #0]
 8007b92:	6852      	ldreq	r2, [r2, #4]
 8007b94:	6062      	str	r2, [r4, #4]
 8007b96:	bf04      	itt	eq
 8007b98:	1809      	addeq	r1, r1, r0
 8007b9a:	6021      	streq	r1, [r4, #0]
 8007b9c:	605c      	str	r4, [r3, #4]
 8007b9e:	e7c7      	b.n	8007b30 <_free_r+0x24>
 8007ba0:	bd38      	pop	{r3, r4, r5, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000208 	.word	0x20000208

08007ba8 <_malloc_r>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	1ccd      	adds	r5, r1, #3
 8007bac:	f025 0503 	bic.w	r5, r5, #3
 8007bb0:	3508      	adds	r5, #8
 8007bb2:	2d0c      	cmp	r5, #12
 8007bb4:	bf38      	it	cc
 8007bb6:	250c      	movcc	r5, #12
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	4606      	mov	r6, r0
 8007bbc:	db01      	blt.n	8007bc2 <_malloc_r+0x1a>
 8007bbe:	42a9      	cmp	r1, r5
 8007bc0:	d903      	bls.n	8007bca <_malloc_r+0x22>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	6033      	str	r3, [r6, #0]
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	bd70      	pop	{r4, r5, r6, pc}
 8007bca:	f000 f857 	bl	8007c7c <__malloc_lock>
 8007bce:	4a21      	ldr	r2, [pc, #132]	; (8007c54 <_malloc_r+0xac>)
 8007bd0:	6814      	ldr	r4, [r2, #0]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	b991      	cbnz	r1, 8007bfc <_malloc_r+0x54>
 8007bd6:	4c20      	ldr	r4, [pc, #128]	; (8007c58 <_malloc_r+0xb0>)
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	b91b      	cbnz	r3, 8007be4 <_malloc_r+0x3c>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f83d 	bl	8007c5c <_sbrk_r>
 8007be2:	6020      	str	r0, [r4, #0]
 8007be4:	4629      	mov	r1, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	f000 f838 	bl	8007c5c <_sbrk_r>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d124      	bne.n	8007c3a <_malloc_r+0x92>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	6033      	str	r3, [r6, #0]
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f000 f842 	bl	8007c7e <__malloc_unlock>
 8007bfa:	e7e4      	b.n	8007bc6 <_malloc_r+0x1e>
 8007bfc:	680b      	ldr	r3, [r1, #0]
 8007bfe:	1b5b      	subs	r3, r3, r5
 8007c00:	d418      	bmi.n	8007c34 <_malloc_r+0x8c>
 8007c02:	2b0b      	cmp	r3, #11
 8007c04:	d90f      	bls.n	8007c26 <_malloc_r+0x7e>
 8007c06:	600b      	str	r3, [r1, #0]
 8007c08:	50cd      	str	r5, [r1, r3]
 8007c0a:	18cc      	adds	r4, r1, r3
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 f836 	bl	8007c7e <__malloc_unlock>
 8007c12:	f104 000b 	add.w	r0, r4, #11
 8007c16:	1d23      	adds	r3, r4, #4
 8007c18:	f020 0007 	bic.w	r0, r0, #7
 8007c1c:	1ac3      	subs	r3, r0, r3
 8007c1e:	d0d3      	beq.n	8007bc8 <_malloc_r+0x20>
 8007c20:	425a      	negs	r2, r3
 8007c22:	50e2      	str	r2, [r4, r3]
 8007c24:	e7d0      	b.n	8007bc8 <_malloc_r+0x20>
 8007c26:	428c      	cmp	r4, r1
 8007c28:	684b      	ldr	r3, [r1, #4]
 8007c2a:	bf16      	itet	ne
 8007c2c:	6063      	strne	r3, [r4, #4]
 8007c2e:	6013      	streq	r3, [r2, #0]
 8007c30:	460c      	movne	r4, r1
 8007c32:	e7eb      	b.n	8007c0c <_malloc_r+0x64>
 8007c34:	460c      	mov	r4, r1
 8007c36:	6849      	ldr	r1, [r1, #4]
 8007c38:	e7cc      	b.n	8007bd4 <_malloc_r+0x2c>
 8007c3a:	1cc4      	adds	r4, r0, #3
 8007c3c:	f024 0403 	bic.w	r4, r4, #3
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d005      	beq.n	8007c50 <_malloc_r+0xa8>
 8007c44:	1a21      	subs	r1, r4, r0
 8007c46:	4630      	mov	r0, r6
 8007c48:	f000 f808 	bl	8007c5c <_sbrk_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d0cf      	beq.n	8007bf0 <_malloc_r+0x48>
 8007c50:	6025      	str	r5, [r4, #0]
 8007c52:	e7db      	b.n	8007c0c <_malloc_r+0x64>
 8007c54:	20000208 	.word	0x20000208
 8007c58:	2000020c 	.word	0x2000020c

08007c5c <_sbrk_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4c06      	ldr	r4, [pc, #24]	; (8007c78 <_sbrk_r+0x1c>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4605      	mov	r5, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	f7f8 fef0 	bl	8000a4c <_sbrk>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_sbrk_r+0x1a>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_sbrk_r+0x1a>
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20001c4c 	.word	0x20001c4c

08007c7c <__malloc_lock>:
 8007c7c:	4770      	bx	lr

08007c7e <__malloc_unlock>:
 8007c7e:	4770      	bx	lr

08007c80 <_init>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

08007c8c <_fini>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr
